<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>山泽君的小站</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-04-16T16:04:08.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>山泽君</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Lua快速入门</title>
    <link href="http://example.com/posts/71a33465/"/>
    <id>http://example.com/posts/71a33465/</id>
    <published>2023-04-16T15:48:46.000Z</published>
    <updated>2023-04-16T16:04:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h1><p><a href="https://wiki.luatos.com/_static/luatos-emulator/lua.html">luatOS在线测试</a></p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>变量声明：直接赋值（全局），加local只能在当前作用域里用； </p><p>没有被声明过的变量类型都是nil，值也是nil；</p><p>可以同时给多个变量赋值，比如 a,b &#x3D; 1,2</p><p>如果 a,b,c &#x3D; 1,2   则c&#x3D;nil</p><p>数值型：只有number，支持进制和科学计数法，支持乘幂符号，如2^5</p><h1 id="字符串的使用"><a href="#字符串的使用" class="headerlink" title="字符串的使用"></a>字符串的使用</h1><p>字符串：用双引号或者单引号表示，支持换行符\n</p><p>多行文本：[[……]]</p><p>字符串连接符号：”..”,如 a..b</p><p>tostring：数字转成字符串</p><p>tonumber：字符串转成数字</p><p>查看字符串长度:”#”,如 #a</p><h1 id="函数的使用"><a href="#函数的使用" class="headerlink" title="函数的使用"></a>函数的使用</h1><p>函数：</p><pre><code>function f(a,b)    print(a,b)end</code></pre><p>返回可以用return，可以返回多个值</p><h1 id="table的基本用途"><a href="#table的基本用途" class="headerlink" title="table的基本用途"></a>table的基本用途</h1><p>table：什么都可以存，a &#x3D; {1,”ac”,{},function() end};下标从1开始；</p><p>用#也可以获得table的长度</p><p>insert: 插入 ，如table.insert(a,”d”)；table.insert(a,2,”d”)</p><p>remove: 移除 ， 如 table.remove(a,2),并且返回移除的值</p><p>可以构造以字符串作为下标的table：如</p><pre><code>a = &#123;a=1,b=&quot;123&quot;,c=function()end&#125;a[&quot;a&quot;] = 1;</code></pre><p>全局表_G:所有元素都在全局表中</p><h1 id="逻辑判断"><a href="#逻辑判断" class="headerlink" title="逻辑判断"></a>逻辑判断</h1><p>逻辑判断：不等于是~&#x3D;;其他与C类似</p><p>支持 and 、or 、not</p><p>lua里数字0也代表真，nil代表假</p><p>三目运算： 如 b &gt; 10 and “yes” or “no”</p><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><pre><code>if a&gt;10 then    print(1)elseif a&gt;5 then    print(2)else     print(0)end</code></pre><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><pre><code>for i = 1,10,2 do//从1到10 步长为2    print(i)end</code></pre><p>注：在for循环里不能对i进行修改，可以break</p><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><pre><code>local n = 10while n &gt; 1 do    print(n)    n = n - 1 //lua里面不支持自减自加end</code></pre><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>string.char：可以把ascll码变为字符串</p><p>string.byte: 可以直接取出一位，如 n &#x3D; string.byte(s,2)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;运行环境&quot;&gt;&lt;a href=&quot;#运行环境&quot; class=&quot;headerlink&quot; title=&quot;运行环境&quot;&gt;&lt;/a&gt;运行环境&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://wiki.luatos.com/_static/luatos-emulator/lua.h</summary>
      
    
    
    
    <category term="游戏开发" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Lua" scheme="http://example.com/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>Unity+Vuforia识别3D物体</title>
    <link href="http://example.com/posts/1cd0ef1f/"/>
    <id>http://example.com/posts/1cd0ef1f/</id>
    <published>2023-04-03T17:28:14.000Z</published>
    <updated>2023-04-03T18:43:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h1><p>Unity2020.3.46 + Vuforia Engine 9.8.13<br>UnityAndroid设置：Project Settings–&gt;Player–&gt;<br><img src="/img/Graduation/1.png"></p><p>注：导入Vuforia要耐心等待，需要一段时间。</p><h1 id="3D物体数据扫描"><a href="#3D物体数据扫描" class="headerlink" title="3D物体数据扫描"></a>3D物体数据扫描</h1><p>需要在安卓手机上安装一个Vuforia Object Scanner应用，用于3D物体的数据扫描。 <a href="https://developer.vuforia.com/downloads/tool">Scanner</a><br>下载的压缩包中不止有程序的apk文件，还有两张.pdf文件，这就是扫描物体时所必须要用的扫描基准图,打印其中的A4，并用手机安装软件。<br>将物体摆好用手机扫描：<br><img src="/img/Graduation/2.jpg" alt="扫描1"><br>录制尽量多的识别点：<br><img src="/img/Graduation/3.jpg" alt="扫描2"><br><img src="/img/Graduation/4.jpg" alt="扫描3"></p><p>最后将得到的od文件上传到电脑。<br>来到<a href="https://developer.vuforia.com/vui/develop/licenses">官网</a>申请一个license。<br>然后来到Target Manager添加Database<br><img src="/img/Graduation/5.png" alt="Database"><br>Add Target:<br><img src="/img/Graduation/6.png" alt="Target"><br>然后全部选中生成unitypackage。<br><img src="/img/Graduation/7.png" alt="unitypackage"></p><h1 id="Unity操作"><a href="#Unity操作" class="headerlink" title="Unity操作"></a>Unity操作</h1><p>将生成的文件导入项目中。</p><h2 id="创建场景"><a href="#创建场景" class="headerlink" title="创建场景"></a>创建场景</h2><p>创建Vuforia插件中的ARCamera和ObjectTarget，并删除原场景的MainCamera。GameObject–&gt;Vuforia Engine–&gt;<br><img src="/img/Graduation/8.png" alt="scene"><br>在ARCamera下的Vuforia Behaviour中添加许可证书。<br><img src="/img/Graduation/9.png" alt="licence"><br>选择ObjectTarget–&gt;Inspector界面进行设置。<br><img src="/img/Graduation/10.png" alt="obtarget"><br>最后可以在下面创建想对应的模型。<br><img src="/img/Graduation/11.png" alt="model"><br>（如果有多个物体对应关系，就多创建几个ObjectTarget，使用同一个事件脚本，不同target。）</p><h2 id="生成应用"><a href="#生成应用" class="headerlink" title="生成应用"></a>生成应用</h2><p>要先转换成Android平台，然后build。<br><img src="/img/Graduation/12.png" alt="build"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;版本&quot;&gt;&lt;a href=&quot;#版本&quot; class=&quot;headerlink&quot; title=&quot;版本&quot;&gt;&lt;/a&gt;版本&lt;/h1&gt;&lt;p&gt;Unity2020.3.46 + Vuforia Engine 9.8.13&lt;br&gt;UnityAndroid设置：Project Setti</summary>
      
    
    
    
    <category term="毕设" scheme="http://example.com/categories/%E6%AF%95%E8%AE%BE/"/>
    
    
    <category term="AR增强现实" scheme="http://example.com/tags/AR%E5%A2%9E%E5%BC%BA%E7%8E%B0%E5%AE%9E/"/>
    
  </entry>
  
  <entry>
    <title>勇士传说(一)</title>
    <link href="http://example.com/posts/96e04cc8/"/>
    <id>http://example.com/posts/96e04cc8/</id>
    <published>2023-03-24T14:08:44.000Z</published>
    <updated>2023-03-24T14:20:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h1><p>《勇士传说》是一款横版卷轴动作类游戏，是来自M_Studio老师的教程，在这里会记录一个零基础小白的学习历程和学习过程中的思考。</p><h1 id="学习历程（已完成）"><a href="#学习历程（已完成）" class="headerlink" title="学习历程（已完成）"></a>学习历程（已完成）</h1><ul><li>导入素材（人物和场景）</li><li>了解编辑器窗口布局设定</li><li>了解熟悉 Tilemap 瓦片地图功能</li><li>素材图片切割方法</li><li>叠层概念</li><li>创建 Rule Tile 实现快速场景绘制</li><li>创建 Animated Tile 实现动态瀑布效果</li></ul><h1 id="学习中遇到的问题"><a href="#学习中遇到的问题" class="headerlink" title="学习中遇到的问题"></a>学习中遇到的问题</h1><ul><li>矩形工具选中删除（已解决）：按住shift</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h1&gt;&lt;p&gt;《勇士传说》是一款横版卷轴动作类游戏，是来自M_Studio老师的教程，在这里会记录一个零基础小白的学习历程和学习过程中的思</summary>
      
    
    
    
    <category term="游戏开发" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="勇士传说" scheme="http://example.com/tags/%E5%8B%87%E5%A3%AB%E4%BC%A0%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>百奥春招笔试题</title>
    <link href="http://example.com/posts/fc1d6a7/"/>
    <id>http://example.com/posts/fc1d6a7/</id>
    <published>2023-03-05T07:36:17.000Z</published>
    <updated>2023-03-05T08:00:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目情况"><a href="#题目情况" class="headerlink" title="题目情况"></a>题目情况</h1><p>前两题都算是送分题，第一题求和，第二题是最大对角线和。第三题是求包含0~max的最短子串长度，第四题是三角形最小路径和。</p><h1 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h1><p>给你一串数字nums和它的最大值maxnum，求得包含0~maxnum所有值的最短子串长度，并返回该长度，若不存在，则返回-1。</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>我是用哈希表结合双指针来做的，从前往后依次读入，并更新哈希表，若该数在哈希表中value&#x3D;0，则将r指针指向该位置，同时去判断l指针所指的树在哈希表中的value值是否大于1，若是，则l指针右移，value值减一。遍历完数组可以得到包含该数组所有不重复元素的最小子串，再进行判断是否包含0~maxnum。若是则返回r-l+1，否则返回-1。</p><h1 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h1><p>给出一个三角形（数据数组），找出从上往下的最小路径和。每一步只能移动到下一行中的相邻结点上。</p><h2 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h2><p>因为我在宿舍做题并不是很专注，所以花了一段时间想动态规划并没有想出来，就用深搜去暴力了。答题结束后，这个动规方程就不难想出来了hhh。</p><p>dp[i][j]表示从第一行的顶点走到坐标为(i,j)位置的最短路径。dp[i][j]&#x3D;min(dp[i-1][j], dp[i-1][j-1])+triangle[i][j];<br>注意边界情况即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目情况&quot;&gt;&lt;a href=&quot;#题目情况&quot; class=&quot;headerlink&quot; title=&quot;题目情况&quot;&gt;&lt;/a&gt;题目情况&lt;/h1&gt;&lt;p&gt;前两题都算是送分题，第一题求和，第二题是最大对角线和。第三题是求包含0~max的最短子串长度，第四题是三角形最小路径和。&lt;/</summary>
      
    
    
    
    <category term="数据结构和算法" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="笔试题" scheme="http://example.com/tags/%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题第一天</title>
    <link href="http://example.com/posts/ff055d60/"/>
    <id>http://example.com/posts/ff055d60/</id>
    <published>2023-03-05T02:16:49.000Z</published>
    <updated>2023-03-05T04:41:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="（热题HOT-100）1-两数之和"><a href="#（热题HOT-100）1-两数之和" class="headerlink" title="（热题HOT 100）1.两数之和"></a>（热题HOT 100）1.两数之和</h1><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><h2 id="思路和时间复杂度"><a href="#思路和时间复杂度" class="headerlink" title="思路和时间复杂度"></a>思路和时间复杂度</h2><p>思路：用双指针，先排序并记录原来对应位置，设置头指针和尾指针if(sum &lt; target) left++；反之 right++；直到sum与target相等。<br>时间复杂度： 排序为O(nlogn)，指针移动为O(n)，所以时间复杂度为O(nlogn)。</p><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><pre><code>class Solution &#123;public:    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123;        int n = nums.size();        vector&lt;int&gt; id;        for(int i = 0;i &lt; n;i++) id.push_back(i);        sort(id.begin(),id.end(),[nums, id](int i, int j)&#123;            return nums[id[i]] &lt; nums[id[j]];        &#125;);        int l = 0,r = n-1;        vector&lt;int&gt; ret;        while(l &lt; r)&#123;            int sum = nums[id[l]] + nums[id[r]];            if(sum == target)&#123;                ret.push_back(id[l]);                ret.push_back(id[r]);                break;            &#125;else if(sum &lt; target)&#123;                l++;            &#125;else if(sum &gt; target)&#123;                r--;            &#125;        &#125;        return ret;    &#125;&#125;;</code></pre><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>也可以用哈希表来做，空间换时间。</p><h1 id="（热题HOT-100）2-两数相加"><a href="#（热题HOT-100）2-两数相加" class="headerlink" title="（热题HOT 100）2.两数相加"></a>（热题HOT 100）2.两数相加</h1><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><h2 id="思路和时间复杂度-1"><a href="#思路和时间复杂度-1" class="headerlink" title="思路和时间复杂度"></a>思路和时间复杂度</h2><p>思路：竖式加法，考虑进位。<br>时间复杂度： O(n)</p><h2 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h2><pre><code>/** * Definition for singly-linked list. * struct ListNode &#123; *     int val; *     ListNode *next; *     ListNode() : val(0), next(nullptr) &#123;&#125; *     ListNode(int x) : val(x), next(nullptr) &#123;&#125; *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125; * &#125;; */class Solution &#123;public:    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) &#123;        ListNode* H = new ListNode();        ListNode* p = H;        int carry = 0;        while(l1 || l2 || carry)&#123;            int val = 0;            if(l1) &#123;                val += l1-&gt;val;                l1 = l1-&gt;next;            &#125;            if(l2) &#123;                val += l2-&gt;val;                l2 = l2-&gt;next;            &#125;            val += carry;            carry = val/10;            ListNode* node = new ListNode(val % 10);            p-&gt;next = node;            p = node;        &#125;        return(H-&gt;next);                                              &#125;&#125;;</code></pre><h1 id="（热题HOT-100）3-无重复字符的最长子串"><a href="#（热题HOT-100）3-无重复字符的最长子串" class="headerlink" title="（热题HOT 100）3.无重复字符的最长子串"></a>（热题HOT 100）3.无重复字符的最长子串</h1><p>给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。</p><h2 id="思路和时间复杂度-2"><a href="#思路和时间复杂度-2" class="headerlink" title="思路和时间复杂度"></a>思路和时间复杂度</h2><p>思路：哈希表记录出现次数，通过前后指针移动遍历。<br>时间复杂度： O(n)</p><h2 id="核心代码-2"><a href="#核心代码-2" class="headerlink" title="核心代码"></a>核心代码</h2><pre><code>class Solution &#123;public:    int lengthOfLongestSubstring(string s) &#123;        int n = s.length();        int ret = 0;        int l = 0;        unordered_map&lt;char,int&gt; count;        for(int r = 0;r &lt; n;r++)&#123;            count[s[r]]++;            while(count[s[r]] &gt; 1)&#123;                count[s[l++]]--;            &#125;            ret = max(ret, r-l+1);        &#125;        return ret;    &#125;&#125;;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;（热题HOT-100）1-两数之和&quot;&gt;&lt;a href=&quot;#（热题HOT-100）1-两数之和&quot; class=&quot;headerlink&quot; title=&quot;（热题HOT 100）1.两数之和&quot;&gt;&lt;/a&gt;（热题HOT 100）1.两数之和&lt;/h1&gt;&lt;p&gt;给定一个整数数组 n</summary>
      
    
    
    
    <category term="数据结构和算法" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode 刷题" scheme="http://example.com/tags/LeetCode-%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>基于增强现实的智慧校园交互平台</title>
    <link href="http://example.com/posts/1d4fcfd4/"/>
    <id>http://example.com/posts/1d4fcfd4/</id>
    <published>2023-02-13T08:56:11.000Z</published>
    <updated>2023-02-16T03:42:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本内容与要求"><a href="#基本内容与要求" class="headerlink" title="基本内容与要求"></a>基本内容与要求</h1><p>利用增强现实技术，实现智慧校园信息可视化及交互</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本内容与要求&quot;&gt;&lt;a href=&quot;#基本内容与要求&quot; class=&quot;headerlink&quot; title=&quot;基本内容与要求&quot;&gt;&lt;/a&gt;基本内容与要求&lt;/h1&gt;&lt;p&gt;利用增强现实技术，实现智慧校园信息可视化及交互&lt;/p&gt;
</summary>
      
    
    
    
    <category term="毕设" scheme="http://example.com/categories/%E6%AF%95%E8%AE%BE/"/>
    
    
    <category term="AR增强现实" scheme="http://example.com/tags/AR%E5%A2%9E%E5%BC%BA%E7%8E%B0%E5%AE%9E/"/>
    
  </entry>
  
  <entry>
    <title>Web前端学习之jQuery学习（九）jQuery 其他方法</title>
    <link href="http://example.com/posts/d81dec03/"/>
    <id>http://example.com/posts/d81dec03/</id>
    <published>2022-04-22T09:30:17.000Z</published>
    <updated>2022-04-24T13:36:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jQuery-拷贝对象"><a href="#jQuery-拷贝对象" class="headerlink" title="jQuery 拷贝对象"></a>jQuery 拷贝对象</h1><p>如果想要把某个对象拷贝（合并）给另一个对象使用，此时可以使用$.extend() 方法。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">extend</span>([deep],target,object1,[objectN])</span><br></pre></td></tr></table></figure><ol><li>deep: 如果设为true为深拷贝，默认为false 浅拷贝</li><li>target: 要拷贝的目标对象</li><li>object1: 待拷贝到第一个对象的对象</li><li>objectN: 待拷贝到第N个对象的对象</li><li>浅拷贝是把被拷贝的对象<strong>复杂数据类型中的地址</strong>拷贝给目标对象，修改目标对象会影响被拷贝对象</li><li>深拷贝，前面加 true ,完全克隆（拷贝的对象，而不是地址），修改目标对象不会影响被拷贝对象。</li></ol><h1 id="jQuery-多库共存"><a href="#jQuery-多库共存" class="headerlink" title="jQuery 多库共存"></a>jQuery 多库共存</h1><h2 id="问题概述"><a href="#问题概述" class="headerlink" title="问题概述"></a>问题概述</h2><p>jQuery 使用$作为标识符，随着jQuery的流行，其他js库也会用$作为标识符，这样一起使用会引起冲突。</p><h2 id="客观需求"><a href="#客观需求" class="headerlink" title="客观需求"></a>客观需求</h2><p>需要一个解决方案，让jQuery和其他的js库不存在冲突，可以同时存在，这就叫做多库共存。</p><h2 id="jQuery-解决方案"><a href="#jQuery-解决方案" class="headerlink" title="jQuery 解决方案"></a>jQuery 解决方案</h2><ol><li>把里面的 $ 符号 统一改为 jQuery。比如 jQuery(“div”)</li><li>jQuery 变量规定新的名称：$.noConflict()     var xx &#x3D; $.noConflict();</li></ol><h1 id="jQuery-插件"><a href="#jQuery-插件" class="headerlink" title="jQuery 插件"></a>jQuery 插件</h1><p>jQuery 功能比较有限，想要更复杂的特效效果，可以借助 jQuery 插件完成</p><p>注意：这些插件也是依赖于 jQuery 来完成的，所以必须先引入 jQuery 文件，因此也称为 jQuery 插件。</p><h2 id="jQuery-插件常用网站"><a href="#jQuery-插件常用网站" class="headerlink" title="jQuery 插件常用网站"></a>jQuery 插件常用网站</h2><ol><li><a href="http://www.jq22.com/">jQuery插件库</a></li><li><a href="http://www.htmleaf.com/">jQuery之家</a></li></ol><h2 id="jQuery-插件使用步骤"><a href="#jQuery-插件使用步骤" class="headerlink" title="jQuery 插件使用步骤"></a>jQuery 插件使用步骤</h2><ol><li>引入相关文件。（jQuery 文件和插件文件）</li><li>复制相关html、css、js（调用插件）。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;jQuery-拷贝对象&quot;&gt;&lt;a href=&quot;#jQuery-拷贝对象&quot; class=&quot;headerlink&quot; title=&quot;jQuery 拷贝对象&quot;&gt;&lt;/a&gt;jQuery 拷贝对象&lt;/h1&gt;&lt;p&gt;如果想要把某个对象拷贝（合并）给另一个对象使用，此时可以使用$.ex</summary>
      
    
    
    
    <category term="Web前端学习" scheme="http://example.com/categories/Web%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="jQuery学习" scheme="http://example.com/tags/jQuery%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Web前端学习之jQuery学习（八）jQuery 事件</title>
    <link href="http://example.com/posts/ae82dbbc/"/>
    <id>http://example.com/posts/ae82dbbc/</id>
    <published>2022-04-22T09:30:01.000Z</published>
    <updated>2022-04-24T13:44:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单个事件注册"><a href="#单个事件注册" class="headerlink" title="单个事件注册"></a>单个事件注册</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.事件(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123; 事件处理程序 &#125;)</span><br></pre></td></tr></table></figure><p>其他事件和原生基本一致。</p><p>比如mouseover、mouseout、focus、blur等。</p><h1 id="事件处理-on-绑定事件"><a href="#事件处理-on-绑定事件" class="headerlink" title="事件处理 on() 绑定事件"></a>事件处理 on() 绑定事件</h1><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">on</span>(events,[selector],fn)</span><br></pre></td></tr></table></figure><ol><li>events：一个或多个用空格分隔的事件类型，如”click”或”keydown”。</li><li>selector：元素的子元素选择器</li><li>fn：回调函数，即绑定在元素身上的监听函数。</li></ol><h2 id="on-方法实现事件委派"><a href="#on-方法实现事件委派" class="headerlink" title="on() 方法实现事件委派"></a>on() 方法实现事件委派</h2><p>事件委派的定义就是，把原来嫁给子元素身上的事件绑定在父元素身上，就是把事件委派给父元素。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;ul&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;li&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;hello world!&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="on-给动态元素绑定事件"><a href="#on-给动态元素绑定事件" class="headerlink" title="on() 给动态元素绑定事件"></a>on() 给动态元素绑定事件</h2><p>动态创建的元素，click() 没有办法绑定事件，on() 可以给动态生成的元素绑定事件</p><h1 id="事件处理-off-解绑事件"><a href="#事件处理-off-解绑事件" class="headerlink" title="事件处理 off() 解绑事件"></a>事件处理 off() 解绑事件</h1><p>off() 方法可以移除通过 on() 方法添加的事件处理程序。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">off</span>();  <span class="comment">//解绑p元素所有事件处理程序</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">off</span>(<span class="string">&quot;click&quot;</span>);  <span class="comment">//解绑p元素上面的点击事件 后面的 foo 是监听函数名</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">off</span>(<span class="string">&quot;click&quot;</span>,<span class="string">&quot;li&quot;</span>);  <span class="comment">//解绑事件委托</span></span><br></pre></td></tr></table></figure><p>如果有的时间只想触发一次，可以使用 one() 来绑定事件。</p><h1 id="自动触发事件-trigger"><a href="#自动触发事件-trigger" class="headerlink" title="自动触发事件 trigger()"></a>自动触发事件 trigger()</h1><p>有些时间希望自动触发，比如轮播图自动播放功能跟点击右侧按钮一致。可以利用定时器自动触发右侧按钮点击事件，不必鼠标点击触发。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">click</span>() <span class="comment">//第一种简写形式</span></span><br><span class="line">element.<span class="title function_">trigger</span>(<span class="string">&quot;type&quot;</span>) <span class="comment">//第二种自动触发模式</span></span><br><span class="line">element.<span class="title function_">triggerHandler</span>(type) <span class="comment">//第三种自动触发模式，不会有元素默认行为</span></span><br></pre></td></tr></table></figure><h1 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h1><p>事件被触发，就会有事件对象的产生。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">on</span>(events,[selector],<span class="keyword">function</span>(<span class="params">event</span>) &#123;&#125;)</span><br></pre></td></tr></table></figure><p>阻止默认行为：<code>event.preventDefault()</code> 或者 <code>return false</code></p><p>阻止冒泡：<code>event.stopPropagation()</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;单个事件注册&quot;&gt;&lt;a href=&quot;#单个事件注册&quot; class=&quot;headerlink&quot; title=&quot;单个事件注册&quot;&gt;&lt;/a&gt;单个事件注册&lt;/h1&gt;&lt;h2 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Web前端学习" scheme="http://example.com/categories/Web%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="jQuery学习" scheme="http://example.com/tags/jQuery%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Web前端学习之jQuery学习（七）jQuery 的常用 API 之 jQuery 尺寸和位置方法</title>
    <link href="http://example.com/posts/654eb08d/"/>
    <id>http://example.com/posts/654eb08d/</id>
    <published>2022-04-22T03:32:18.000Z</published>
    <updated>2022-04-24T13:27:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jQuery-尺寸"><a href="#jQuery-尺寸" class="headerlink" title="jQuery 尺寸"></a>jQuery 尺寸</h1><ul><li>设置或者获取高度</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//带参数表示设置高度</span></span><br><span class="line">$(“img”).<span class="title function_">height</span>(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//不带参数获取高度</span></span><br><span class="line">$(“img”).<span class="title function_">height</span>();</span><br></pre></td></tr></table></figure><ul><li>获取网页的可视区宽高</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取可视区宽度</span></span><br><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">width</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取可视区高度</span></span><br><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">height</span>();</span><br></pre></td></tr></table></figure><h1 id="jQuery-位置"><a href="#jQuery-位置" class="headerlink" title="jQuery 位置"></a>jQuery 位置</h1><ul><li><code>offset</code>方法获取元素距离<code>document</code>的位置</li><li><code>position</code>方法获取的是元素距离<code>定位父元素</code>的位置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取元素距离document的位置,返回值为对象：&#123;left:100, top:100&#125;</span></span><br><span class="line">$(selector).<span class="title function_">offset</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取相对于其最近的有定位的父元素的位置。</span></span><br><span class="line">$(selector).<span class="title function_">position</span>();</span><br></pre></td></tr></table></figure><ul><li><code>scrollTop</code>与<code>scrollLeft</code> 方法,设置或者获取垂直滚动条的位置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取页面被卷曲的高度</span></span><br><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">scrollTop</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取页面被卷曲的宽度</span></span><br><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">scrollLeft</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置页面被卷曲的高度</span></span><br><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">scrollTop</span>(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置页面被卷曲的宽度</span></span><br><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">scrollLeft</span>(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;jQuery-尺寸&quot;&gt;&lt;a href=&quot;#jQuery-尺寸&quot; class=&quot;headerlink&quot; title=&quot;jQuery 尺寸&quot;&gt;&lt;/a&gt;jQuery 尺寸&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;设置或者获取高度&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;h</summary>
      
    
    
    
    <category term="Web前端学习" scheme="http://example.com/categories/Web%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="jQuery学习" scheme="http://example.com/tags/jQuery%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Web前端学习之jQuery学习（六）jQuery 的常用 API 之 jQuery 元素操作</title>
    <link href="http://example.com/posts/2b884c0c/"/>
    <id>http://example.com/posts/2b884c0c/</id>
    <published>2022-04-22T03:26:45.000Z</published>
    <updated>2022-04-24T13:27:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>主要是<strong>遍历</strong>、创建、添加、删除元素操作。</p><h1 id="遍历元素"><a href="#遍历元素" class="headerlink" title="遍历元素"></a>遍历元素</h1><p>jQuery 隐式迭代是对同一类元素做了同样的操作。</p><h2 id="语法1："><a href="#语法1：" class="headerlink" title="语法1："></a>语法1：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params">index, domEle</span>) &#123; xxx; &#125;)</span><br></pre></td></tr></table></figure><ol><li>each()方法遍历匹配到的每一个元素。主要用 DOM 处理。each 每一个</li><li>里面的回调函数有2个参数：index 是每个元素的索引号；demEle 是每个 DOM 元素对象，不是jQuery 对象</li><li>所以想要使用 jQuery 方法，需要给这个 DOM 元素转换为 jQuery 对象 $(domEle)</li></ol><h2 id="语法2："><a href="#语法2：" class="headerlink" title="语法2："></a>语法2：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">each</span>(object,<span class="keyword">function</span>(<span class="params">index, element</span>) &#123; xxx; &#125;)</span><br></pre></td></tr></table></figure><ol><li>$.each()方法可用于遍历任何对象。主要用于数据处理，比如数组，对象</li><li>里面有2个参数：index 是每个元素的索引号；element 是遍历内容</li></ol><h1 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h1><h2 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;&lt;li&gt;&lt;/li&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><p>动态创建了一个<code>&lt;li&gt;</code></p><h1 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h1><h2 id="内部添加"><a href="#内部添加" class="headerlink" title="内部添加"></a>内部添加</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">append</span>(<span class="string">&quot;内容&quot;</span>) <span class="comment">//添加到元素内部的最后面</span></span><br><span class="line">element.<span class="title function_">prepend</span>(<span class="string">&quot;内容&quot;</span>) <span class="comment">//添加到元素内部的最前面</span></span><br></pre></td></tr></table></figure><p>内部添加元素，生成之后，他们是父子关系。</p><h2 id="外部添加"><a href="#外部添加" class="headerlink" title="外部添加"></a>外部添加</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">after</span>(<span class="string">&quot;内容&quot;</span>)  <span class="comment">//把内容放入目标元素后面</span></span><br><span class="line">element.<span class="title function_">before</span>(<span class="string">&quot;内容&quot;</span>)  <span class="comment">//把内容放入目标元素前面</span></span><br></pre></td></tr></table></figure><p>外部添加元素，生成之后，他们是兄弟关系。</p><h1 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">remove</span>() <span class="comment">//删除元素本身</span></span><br><span class="line">element.<span class="title function_">empty</span>() <span class="comment">//删除元素集合中所有的子节点</span></span><br><span class="line">element.<span class="title function_">html</span>(<span class="string">&quot;&quot;</span>) <span class="comment">//清空匹配的元素内容</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;主要是&lt;strong&gt;遍历&lt;/strong&gt;、创建、添加、删除元素操作。&lt;/p&gt;
&lt;h1 id=&quot;遍历元素&quot;&gt;&lt;a href=&quot;#遍历元素&quot; class=&quot;headerlink&quot; title=&quot;遍历元素&quot;&gt;&lt;/a&gt;遍历元素&lt;/h1&gt;&lt;p&gt;jQuery 隐式迭代是对同一类元素</summary>
      
    
    
    
    <category term="Web前端学习" scheme="http://example.com/categories/Web%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="jQuery学习" scheme="http://example.com/tags/jQuery%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Web前端学习之jQuery学习（五）jQuery 的常用 API 之 jQuery 内容文本值</title>
    <link href="http://example.com/posts/38a3be14/"/>
    <id>http://example.com/posts/38a3be14/</id>
    <published>2022-04-22T02:59:01.000Z</published>
    <updated>2022-04-24T13:27:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>主要针对元素的<strong>内容</strong>还有<strong>表单的值</strong>操作</p><h1 id="普通元素内容-html-（相当于原生-inner-HTML）"><a href="#普通元素内容-html-（相当于原生-inner-HTML）" class="headerlink" title="普通元素内容 html() （相当于原生 inner HTML）"></a>普通元素内容 html() （相当于原生 inner HTML）</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">html</span>()  <span class="comment">//获取元素的内容</span></span><br><span class="line"><span class="title function_">html</span>(<span class="string">&quot;内容&quot;</span>) <span class="comment">//设置元素的内容</span></span><br></pre></td></tr></table></figure><h1 id="普通元素文本内容-text-（相当于原生-inner-Text）"><a href="#普通元素文本内容-text-（相当于原生-inner-Text）" class="headerlink" title="普通元素文本内容 text() （相当于原生 inner Text）"></a>普通元素文本内容 text() （相当于原生 inner Text）</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">text</span>()  <span class="comment">//获取元素的文本内容</span></span><br><span class="line"><span class="title function_">text</span>(<span class="string">&quot;文本内容&quot;</span>)  <span class="comment">//设置元素的文本内容</span></span><br></pre></td></tr></table></figure><h1 id="表单的值-val-（相当于原生-value）"><a href="#表单的值-val-（相当于原生-value）" class="headerlink" title="表单的值 val() （相当于原生 value）"></a>表单的值 val() （相当于原生 value）</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">val</span>()  <span class="comment">//获取表单的值</span></span><br><span class="line"><span class="title function_">val</span>(<span class="string">&quot;表单值&quot;</span>)  <span class="comment">//设置表单的值</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;主要针对元素的&lt;strong&gt;内容&lt;/strong&gt;还有&lt;strong&gt;表单的值&lt;/strong&gt;操作&lt;/p&gt;
&lt;h1 id=&quot;普通元素内容-html-（相当于原生-inner-HTML）&quot;&gt;&lt;a href=&quot;#普通元素内容-html-（相当于原生-inner-HTML）&quot;</summary>
      
    
    
    
    <category term="Web前端学习" scheme="http://example.com/categories/Web%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="jQuery学习" scheme="http://example.com/tags/jQuery%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Web前端学习之jQuery学习（四）jQuery 的常用 API 之 jQuery 属性操作</title>
    <link href="http://example.com/posts/25fb7f05/"/>
    <id>http://example.com/posts/25fb7f05/</id>
    <published>2022-04-21T13:11:06.000Z</published>
    <updated>2022-04-24T13:27:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设置或获取元素固有属性值-prop"><a href="#设置或获取元素固有属性值-prop" class="headerlink" title="设置或获取元素固有属性值 prop()"></a>设置或获取元素固有属性值 prop()</h1><p>所谓元素固有属性就是元素本身自带的属性，比如<a>元素里面的 href 。</p><h2 id="获取属性语法"><a href="#获取属性语法" class="headerlink" title="获取属性语法"></a>获取属性语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">prop</span>(<span class="string">&quot;属性&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="设置属性语法"><a href="#设置属性语法" class="headerlink" title="设置属性语法"></a>设置属性语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">prop</span>(<span class="string">&quot;属性&quot;</span>,<span class="string">&quot;属性值&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="设置或获取元素自定义属性值-attr"><a href="#设置或获取元素自定义属性值-attr" class="headerlink" title="设置或获取元素自定义属性值 attr()"></a>设置或获取元素自定义属性值 attr()</h1><p>用户自己给元素添加的属性成为自定义属性。</p><h2 id="获取属性语法-1"><a href="#获取属性语法-1" class="headerlink" title="获取属性语法"></a>获取属性语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">attr</span>(<span class="string">&quot;属性&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="设置属性语法-1"><a href="#设置属性语法-1" class="headerlink" title="设置属性语法"></a>设置属性语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">attr</span>(<span class="string">&quot;属性&quot;</span>,<span class="string">&quot;属性值&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="数据缓存"><a href="#数据缓存" class="headerlink" title="数据缓存"></a>数据缓存</h1><p>data() 方法可以在指定的元素上存取数据，并不会修改 DOM 元素结构。一旦页面刷新，之前存放的数据将被移除。</p><h2 id="附加数据算法"><a href="#附加数据算法" class="headerlink" title="附加数据算法"></a>附加数据算法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;value&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="获取数据语法"><a href="#获取数据语法" class="headerlink" title="获取数据语法"></a>获取数据语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="string">&quot;name&quot;</span>)</span><br></pre></td></tr></table></figure><p>还可以读取 HTML5 自定义属性 data-index ，得到的是数字型。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设置或获取元素固有属性值-prop&quot;&gt;&lt;a href=&quot;#设置或获取元素固有属性值-prop&quot; class=&quot;headerlink&quot; title=&quot;设置或获取元素固有属性值 prop()&quot;&gt;&lt;/a&gt;设置或获取元素固有属性值 prop()&lt;/h1&gt;&lt;p&gt;所谓元素固有</summary>
      
    
    
    
    <category term="Web前端学习" scheme="http://example.com/categories/Web%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="jQuery学习" scheme="http://example.com/tags/jQuery%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Web前端学习之jQuery学习（三）jQuery 的常用 API 之 jQuery 效果</title>
    <link href="http://example.com/posts/8a32779a/"/>
    <id>http://example.com/posts/8a32779a/</id>
    <published>2022-04-20T04:21:30.000Z</published>
    <updated>2022-04-24T13:27:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jQuery-常见效果"><a href="#jQuery-常见效果" class="headerlink" title="jQuery 常见效果"></a>jQuery 常见效果</h1><p>**jQuery **给我们封装了很多动画效果，最为常见的有：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 显示隐藏</span></span><br><span class="line"><span class="title function_">show</span>()</span><br><span class="line"><span class="title function_">hide</span>()</span><br><span class="line"><span class="title function_">toggle</span>()</span><br><span class="line"><span class="comment">// 滑动</span></span><br><span class="line"><span class="title function_">slideDown</span>()</span><br><span class="line"><span class="title function_">slideUp</span>()</span><br><span class="line"><span class="title function_">slideToggle</span>()</span><br><span class="line"><span class="comment">// 淡入淡出</span></span><br><span class="line"><span class="title function_">fadeIn</span>()</span><br><span class="line"><span class="title function_">fadeOut</span>()</span><br><span class="line"><span class="title function_">fadeToggle</span>()</span><br><span class="line"><span class="title function_">fadeTo</span>()</span><br><span class="line"><span class="comment">// 自定义动画</span></span><br><span class="line"><span class="title function_">animate</span>()</span><br></pre></td></tr></table></figure><h1 id="显示隐藏效果"><a href="#显示隐藏效果" class="headerlink" title="显示隐藏效果"></a>显示隐藏效果</h1><h2 id="显示语法规范"><a href="#显示语法规范" class="headerlink" title="显示语法规范"></a>显示语法规范</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">show</span>([speed,[easing],[fn]])</span><br></pre></td></tr></table></figure><h2 id="显示参数"><a href="#显示参数" class="headerlink" title="显示参数"></a>显示参数</h2><ol><li>参数可以省略，无动画直接显示。</li><li>speed：三种预定速度之一的字符串(“slow”,”nomal”,or “fast”)或表示动画时长的毫秒数值（如：100）。</li><li>easing：(Optional)用来指定切换效果，默认是”swing”,可用参数”linear”。</li><li>fn：回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ol><h2 id="隐藏语法规范"><a href="#隐藏语法规范" class="headerlink" title="隐藏语法规范"></a>隐藏语法规范</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">hide</span>([speed,[easing],[fn]])</span><br></pre></td></tr></table></figure><h2 id="隐藏参数"><a href="#隐藏参数" class="headerlink" title="隐藏参数"></a>隐藏参数</h2><ol><li>参数可以省略，无动画直接显示。</li><li>speed：三种预定速度之一的字符串(“slow”,”nomal”,or “fast”)或表示动画时长的毫秒数值（如：100）。</li><li>easing：(Optional)用来指定切换效果，默认是”swing”,可用参数”linear”。</li><li>fn：回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ol><h2 id="切换语法规范"><a href="#切换语法规范" class="headerlink" title="切换语法规范"></a>切换语法规范</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">toggle</span>([speed,[easing],[fn]])</span><br></pre></td></tr></table></figure><h2 id="切换参数"><a href="#切换参数" class="headerlink" title="切换参数"></a>切换参数</h2><ol><li>参数可以省略，无动画直接显示。</li><li>speed：三种预定速度之一的字符串(“slow”,”nomal”,or “fast”)或表示动画时长的毫秒数值（如：100）。</li><li>easing：(Optional)用来指定切换效果，默认是”swing”,可用参数”linear”。</li><li>fn：回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ol><h1 id="滑动效果"><a href="#滑动效果" class="headerlink" title="滑动效果"></a>滑动效果</h1><p>下滑：slideDown()<br>上滑：slideUp()<br>滑动切换：slideToggle()</p><p>语法以及参数与<em>显示隐藏效果</em>一致。</p><h1 id="事件切换"><a href="#事件切换" class="headerlink" title="事件切换"></a>事件切换</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">hover</span>(over. , out.)</span><br></pre></td></tr></table></figure><ol><li>over.鼠标移到元素上要触发的函数(相当于 mouseenter )</li><li>out.鼠标移出元素要触发的函数(相当于 mouseleave )</li></ol><h1 id="动画队列及其停止排队方法"><a href="#动画队列及其停止排队方法" class="headerlink" title="动画队列及其停止排队方法"></a>动画队列及其停止排队方法</h1><h2 id="动画或效果队列"><a href="#动画或效果队列" class="headerlink" title="动画或效果队列"></a>动画或效果队列</h2><p>动画或者效果一旦触发就会执行，如果多次触发，就造成多个动画或者效果排队执行。</p><h2 id="停止排队"><a href="#停止排队" class="headerlink" title="停止排队"></a>停止排队</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">stop</span>()</span><br></pre></td></tr></table></figure><ol><li>stop()方法用于停止动画或效果</li><li>注意：stop()写到动画或者效果的前面，相当于停止结束上一次的动画。</li></ol><h1 id="淡入淡出效果"><a href="#淡入淡出效果" class="headerlink" title="淡入淡出效果"></a>淡入淡出效果</h1><p>淡入：fadeIn()<br>淡出：fadeOut()<br>淡入淡出切换：fadeToggle()</p><p>语法以及参数也与<em>显示隐藏效果</em>一致。</p><h2 id="渐进方式调整到指定的不透明度"><a href="#渐进方式调整到指定的不透明度" class="headerlink" title="渐进方式调整到指定的不透明度"></a>渐进方式调整到指定的不透明度</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fadeTo</span>([speed],opacity,[easing],[fn]])</span><br></pre></td></tr></table></figure><h2 id="效果参数"><a href="#效果参数" class="headerlink" title="效果参数"></a>效果参数</h2><p><code>opacity</code>透明度必须写，取值 0~1 之间。</p><p>其余参数与<em>显示隐藏效果</em>一致。</p><h1 id="自定义动画-animate"><a href="#自定义动画-animate" class="headerlink" title="自定义动画 animate"></a>自定义动画 animate</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">animate</span>(params,[speed],[easing],[fn])</span><br></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p><code>params</code>:<strong>想要更改的样式属性，以对象形式传递，必须写。属性名可以不用带引号，如果是复合属性则需要采取驼峰命名法 borderLeft。</strong>其余参数可以省略，与<em>显示隐藏效果</em>一致。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">animate</span>(&#123;</span><br><span class="line"><span class="attr">left</span>: <span class="number">500</span>,</span><br><span class="line"><span class="attr">top</span>: <span class="number">300</span>,</span><br><span class="line"><span class="attr">opacity</span>: <span class="number">.4</span>,</span><br><span class="line">...</span><br><span class="line">&#125;, <span class="number">500</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;jQuery-常见效果&quot;&gt;&lt;a href=&quot;#jQuery-常见效果&quot; class=&quot;headerlink&quot; title=&quot;jQuery 常见效果&quot;&gt;&lt;/a&gt;jQuery 常见效果&lt;/h1&gt;&lt;p&gt;**jQuery **给我们封装了很多动画效果，最为常见的有：&lt;/p</summary>
      
    
    
    
    <category term="Web前端学习" scheme="http://example.com/categories/Web%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="jQuery学习" scheme="http://example.com/tags/jQuery%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Web前端学习之jQuery学习（二）jQuery 的常用 API 之 jQuery 选择器与样式操作</title>
    <link href="http://example.com/posts/8878a5d1/"/>
    <id>http://example.com/posts/8878a5d1/</id>
    <published>2022-04-19T13:12:44.000Z</published>
    <updated>2022-04-24T13:27:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jQuery-选择器"><a href="#jQuery-选择器" class="headerlink" title="jQuery 选择器"></a>jQuery 选择器</h1><ul><li>jQuery选择器是jQuery为我们提供的一组<code>方法</code>，让我们更加方便的获取到页面中的元素。<br>注意：jQuery选择器返回的是<code>jQuery对象</code>。</li><li>jQuery选择器有很多，基本兼容了CSS1到CSS3所有的选择器，并且jQuery还添加了很多扩展性的选择器。</li><li>jQuery选择器虽然很多，但是选择器之间可以相互替代，就是说获取一个元素，你会有很多种方法获取到。<br>所以我们平时真正能用到的只是少数的最常用的选择器。</li></ul><h2 id="jQuery-基础选择器"><a href="#jQuery-基础选择器" class="headerlink" title="jQuery 基础选择器"></a>jQuery 基础选择器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;选择器&quot;</span>) <span class="comment">// 里面选择器直接写CSS选择器即可，但是要加引号</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>ID选择器</td><td>$(“#id”);</td><td>获取指定ID的元素</td></tr><tr><td>全选选择器</td><td>$(“*”)</td><td>匹配所有元素</td></tr><tr><td>类选择器</td><td>$(“.class”);</td><td>获取同一类class的元素</td></tr><tr><td>标签选择器</td><td>$(“div”);</td><td>获取同一类标签的所有元素</td></tr><tr><td>并集选择器</td><td>$(“div,p,li”);</td><td>使用逗号分隔，只要符合条件之一就可。</td></tr><tr><td>交集选择器</td><td>$(“div.redClass”);</td><td>获取class为redClass的div元素</td></tr></tbody></table><h2 id="jQuery-层级选择器"><a href="#jQuery-层级选择器" class="headerlink" title="jQuery 层级选择器"></a>jQuery 层级选择器</h2><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>子代选择器</td><td>$(“ul&gt;li”);</td><td>使用&gt;号，获取儿子层级的元素，注意，并不会获取孙子层级的元素</td></tr><tr><td>后代选择器</td><td>$(“ul li”);</td><td>使用空格，代表后代选择器，获取ul下的所有li元素，包括孙子等</td></tr></tbody></table><h2 id="隐式迭代"><a href="#隐式迭代" class="headerlink" title="隐式迭代"></a>隐式迭代</h2><p>遍历内部 DOM 元素（伪数组形式存储）的过程就叫做<strong>隐式迭代</strong>。简单理解一下就是给匹配到的所有元素进行循环遍历，执行相应的方法，不需要我们进行循环，简化了我们的操作，方便调用。</p><h2 id="jQuery-筛选选择器"><a href="#jQuery-筛选选择器" class="headerlink" title="jQuery 筛选选择器"></a>jQuery 筛选选择器</h2><table><thead><tr><th>语法</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>:first</td><td>$(“li:first”)</td><td>获取第一个 li 元素</td></tr><tr><td>:last</td><td>$(“li:last”)</td><td>获取最后一个 li 元素</td></tr><tr><td>eq(index)</td><td>$(“li:eq(2)”)</td><td>获取到的 li 元素中，选择索引号为2的元素，索引号 index 从0开始</td></tr><tr><td>:odd</td><td>$(“li:odd”)</td><td>获取到的元素中，选择索引号为奇数的元素</td></tr><tr><td>:even</td><td>$(“li:even”)</td><td>获取到的元素中，选择索引号为偶数的元素</td></tr></tbody></table><p>想要查看更多选择器，请到<a href="https://www.jquery123.com/category/selectors/">这里</a>学习</p><h2 id="jQuery-筛选方法"><a href="#jQuery-筛选方法" class="headerlink" title="jQuery 筛选方法"></a>jQuery 筛选方法</h2><table><thead><tr><th>语法</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>children(selector)</td><td>$(“ul”).children(“li”)</td><td>相当于$(“ul&gt;li”)，子类选择器</td></tr><tr><td>find(selector)</td><td>$(“ul”).find(“li”);</td><td>相当于$(“ul li”),后代选择器</td></tr><tr><td>siblings(selector)</td><td>$(“#first”).siblings(“li”);</td><td>查找兄弟节点，不包括自己本身。</td></tr><tr><td>parent()</td><td>$(“#first”).parent();</td><td>查找父亲</td></tr><tr><td>eq(index)</td><td>$(“li”).eq(2);</td><td>相当于$(“li:eq(2)”),index从0开始</td></tr><tr><td>next()</td><td>$(“li”).next()</td><td>找下一个兄弟</td></tr><tr><td>prev()</td><td>$(“li”).prev()</td><td>找上一个兄弟</td></tr></tbody></table><h1 id="jQuery-样式操作"><a href="#jQuery-样式操作" class="headerlink" title="jQuery 样式操作"></a>jQuery 样式操作</h1><h2 id="操作-css-方法"><a href="#操作-css-方法" class="headerlink" title="操作 css 方法"></a>操作 css 方法</h2><p>jQuery 可以使用 css 方法来修改简单元素样式；也可以操作类，修改多个样式</p><ol><li><p>参数只写属性名，则是返回属性值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>参数是<strong>属性名，属性值，逗号分割，</strong>是设置一组样式，属性必须加引号。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>参数可以是对象形式，方便设置多组样式。格式为<em>属性名：属性值</em>，属性值之间用逗号隔开。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">css</span>(&#123;</span><br><span class="line"><span class="attr">color</span>: red,</span><br><span class="line">font-<span class="attr">size</span>: 20px</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h2 id="设置类样式方法"><a href="#设置类样式方法" class="headerlink" title="设置类样式方法"></a>设置类样式方法</h2><p>作用等同于以前的 classList ，可以操作类样式，注意操作类里面的参数不要加点。</p><ol><li><p>添加类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;current&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>移除类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">removeClass</span>(<span class="string">&quot;current&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>切换类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">toggleClass</span>(<span class="string">&quot;current&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="类操作与-className-的区别"><a href="#类操作与-className-的区别" class="headerlink" title="类操作与 className 的区别"></a>类操作与 className 的区别</h2><p>原生 JS 中 className 会覆盖元素里面的类名。</p><p>jQuery 里面类操作只是对指定类进行操作，不影响原先的类名。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;jQuery-选择器&quot;&gt;&lt;a href=&quot;#jQuery-选择器&quot; class=&quot;headerlink&quot; title=&quot;jQuery 选择器&quot;&gt;&lt;/a&gt;jQuery 选择器&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;jQuery选择器是jQuery为我们提供的一组&lt;code&gt;方法</summary>
      
    
    
    
    <category term="Web前端学习" scheme="http://example.com/categories/Web%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="jQuery学习" scheme="http://example.com/tags/jQuery%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Web前端学习之jQuery学习（一）jQuery的基本使用</title>
    <link href="http://example.com/posts/506feb88/"/>
    <id>http://example.com/posts/506feb88/</id>
    <published>2022-04-19T11:58:57.000Z</published>
    <updated>2022-04-24T13:27:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jQuery-的下载"><a href="#jQuery-的下载" class="headerlink" title="jQuery 的下载"></a>jQuery 的下载</h1><p>进入<a href="https://jquery.com/">jQuery官网</a>下载，旧版本可以在 Download 最底下找到。</p><p><strong>版本:</strong></p><ul><li>1x : 兼容 IE6、7、8等低版本的浏览器，但是官网不再更新维护</li><li>2x : 不兼容 IE6、7、8等低版本的浏览器，官网也不再更新维护</li><li>3x : 不兼容 IE6、7、8等低版本的浏览器，官网主要更新维护的版本</li></ul><h1 id="jQuery-的使用步骤"><a href="#jQuery-的使用步骤" class="headerlink" title="jQuery 的使用步骤"></a>jQuery 的使用步骤</h1><ol><li>引入 jQuery 文件（和一般 JS 文件 的引入方式一样）</li><li>就可以开始 jQuery 的使用</li></ol><h1 id="jQuery-的入口函数"><a href="#jQuery-的入口函数" class="headerlink" title="jQuery 的入口函数"></a>jQuery 的入口函数</h1><ul><li>页面 DOM 结构加载完成的入口。</li><li>相当于原生 JS 中的 DOMContentLoaded。</li></ul><p>有以下三种写法:</p><ol><li><p>文档加载完毕（不包含图片等非文字媒体文件），不等图片加载就可以执行这个函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种写法</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>同上，文档加载完毕（不包含图片等非文字媒体文件），不等图片加载就可以执行这个函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第二种写法</span></span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>文档加载完毕，且图片加载完毕的时候在执行这个函数，与原生js的onload的加载模式一样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第三种写法</span></span><br><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><ul><li>原生Js如果编写多个入口函数，后面编写的会覆盖前面编写的；</li><li>JQuery中编写多个入口函数，后面的不会覆盖前面的。</li></ul><h1 id="jQuery-对象"><a href="#jQuery-对象" class="headerlink" title="jQuery 对象"></a>jQuery 对象</h1><h2 id="jQuery-的顶级对象"><a href="#jQuery-的顶级对象" class="headerlink" title="jQuery 的顶级对象 $"></a>jQuery 的顶级对象 $</h2><ol><li>$ 是 jQuery 的别称，在代码中可以使用 jQuery 代替 $ ,但一般为了方便，通常直接使用 $ 。</li><li>$ 是 jQuery 的顶级对象，相当于原生 JavaScript 中的 window 。把元素利用 $ 包装成 jQuery 对象，就可以调用 jQuery 的方法。</li></ol><h2 id="jQuery-对象和-DOM-对象"><a href="#jQuery-对象和-DOM-对象" class="headerlink" title="jQuery 对象和 DOM 对象"></a>jQuery 对象和 DOM 对象</h2><ul><li>DOM 对象 ：用原生 JS 获取来的对象就是 DOM 对象</li><li>jQuery 对象 ：用 jQuery 方法获取的元素就是 jQuery 对象</li><li>jQuery 对象只能使用 jQuery 方法，DOM 对象则使用原生的 JavaScript 属性和方法</li><li>DOM对象与jQuery对象的方法不能混用。</li></ul><h2 id="jQuery-对象和-DOM-对象的相互转换"><a href="#jQuery-对象和-DOM-对象的相互转换" class="headerlink" title="jQuery 对象和 DOM 对象的相互转换"></a>jQuery 对象和 DOM 对象的相互转换</h2><p>因为原生 js 比 jQuery 更大，原生的一些属性和方法 jQuery 没有给我们封装，要想使用这些属性和方法需要把 jQuery 对象转换为 DOM 对象才能使用。</p><ol><li><p>DOM 对象转换成 jQuery 对象 ：$(DOM 对象)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;div&#x27;);</span><br><span class="line">//</span><br><span class="line">var $obj = $(&#x27;&#x27;div&#x27;&#x27;);</span><br></pre></td></tr></table></figure></li><li><p>jQuery对象转换成DOM对象：(两种方法)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种方法</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>)[index]</span><br><span class="line"><span class="comment">//第二种方法</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="property">get</span>[index]</span><br><span class="line"><span class="comment">// index 是索引号</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;jQuery-的下载&quot;&gt;&lt;a href=&quot;#jQuery-的下载&quot; class=&quot;headerlink&quot; title=&quot;jQuery 的下载&quot;&gt;&lt;/a&gt;jQuery 的下载&lt;/h1&gt;&lt;p&gt;进入&lt;a href=&quot;https://jquery.com/&quot;&gt;jQuery</summary>
      
    
    
    
    <category term="Web前端学习" scheme="http://example.com/categories/Web%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="jQuery学习" scheme="http://example.com/tags/jQuery%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Web前端学习之Less学习(一) Less入门</title>
    <link href="http://example.com/posts/3c8cb91f/"/>
    <id>http://example.com/posts/3c8cb91f/</id>
    <published>2022-04-18T12:58:24.000Z</published>
    <updated>2022-04-24T13:27:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VS-code-中安装less插件并配置使用"><a href="#VS-code-中安装less插件并配置使用" class="headerlink" title="VS code 中安装less插件并配置使用"></a>VS code 中安装less插件并配置使用</h1><ol><li><p>在扩展中安装easy less 这个插件</p></li><li><p>进入easy less扩展设置中，编辑setting.json</p></li><li><p>找到”less.compile”加入下面代码进行配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;less.compile&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;compress&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span><span class="comment">//是否压缩</span></span><br><span class="line">     <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span><span class="comment">//是否生成map文件，有了这个可以在调试台看到less行数</span></span><br><span class="line">     <span class="attr">&quot;out&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 是否输出css文件，false为不输出</span></span><br><span class="line">     <span class="attr">&quot;outExt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.css&quot;</span><span class="punctuation">,</span> <span class="comment">// 输出文件的后缀</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>之后写完less文件保存后会在同级目录下自动生成一个同名css文件</p></li></ol><h1 id="Less-介绍"><a href="#Less-介绍" class="headerlink" title="Less 介绍"></a>Less 介绍</h1><p>Less 是一门向后兼容的 CSS 扩展语言。Less对CSS语言增加了许多方便的扩展，学习Less能加快开发的速度。</p><h1 id="Less-学习"><a href="#Less-学习" class="headerlink" title="Less 学习"></a>Less 学习</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li><code>@</code>声明变量，作为普通属性值使用</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@width:</span> <span class="number">10px</span>;</span><br><span class="line"><span class="variable">@height:</span> <span class="variable">@width</span> + <span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">@height</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>变量用于<code>选择器名</code>、<code>属性名</code>、<code>URL</code>、<code>@import语句</code></li><li>需要添加<code>&#123;&#125;</code></li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@my-selector:</span> banner;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.@&#123;my-selector&#125;</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="variable">@property:</span> color;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.widget</span> &#123;</span><br><span class="line">  @&#123;property&#125;: <span class="selector-id">#0ee</span>;</span><br><span class="line">  <span class="selector-tag">background-</span><span class="variable">@&#123;property&#125;</span>: <span class="selector-id">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">@<span class="selector-tag">images</span>: &#x27;../<span class="selector-tag">img</span>&#x27;;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#444</span>;</span><br><span class="line">  <span class="attribute">background</span>: url(<span class="string">&#x27;@&#123;images&#125;/white-sand.png&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="variable">@themes:</span> <span class="string">&#x27;../../src/themes&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;@&#123;themes&#125;/tidal-wave.less&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>当一个变量被声明多次，会取<code>最后一次</code>的值，并从当前作用域往外寻找变量。</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@var:</span> <span class="number">0</span>;</span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="variable">@var:</span> <span class="number">1</span>;</span><br><span class="line">  <span class="selector-class">.brass</span> &#123;</span><br><span class="line">    <span class="variable">@var:</span> <span class="number">2</span>;</span><br><span class="line">    three: @var;</span><br><span class="line">    <span class="variable">@var:</span> <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  one: @var;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  one: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.class</span> <span class="selector-class">.brass</span> &#123;</span><br><span class="line">  three: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="混合"><a href="#混合" class="headerlink" title="混合"></a>混合</h2><ul><li>混合（Mixin）是一种将一组属性从一个规则集包含（或混入）到另一个规则集的方法。假设我们定义了一个类（class）如下：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bordered</span> &#123;</span><br><span class="line">  <span class="attribute">border-top</span>: dotted <span class="number">1px</span> black;</span><br><span class="line">  <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们希望在其它规则集中使用这些属性呢？没问题，我们只需像下面这样输入所需属性的类（class）名称即可，如下所示：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#menu</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#111</span>;</span><br><span class="line">  <span class="selector-class">.bordered</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.post</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="selector-class">.bordered</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>.bordered</code> 类所包含的属性就将同时出现在 <code>#menu a</code> 和 <code>.post a</code> 中了。（注意，你也可以使用 <code>#ids</code> 作为 mixin 使用。）</p><h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><ul><li>Less 提供了使用嵌套(nesting)代替层叠或与层叠结合使用的能力</li></ul><p>CSS 代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#header</span> <span class="selector-class">.navigation</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#header</span> <span class="selector-class">.logo</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> Less 语言我们可以这样书写代码：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">  <span class="selector-class">.navigation</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><ul><li>算术运算符 <code>+</code>、<code>-</code>、<code>*</code>、<code>/</code> 可以对任何数字、颜色或变量进行运算。如果可能的话，算术运算符在加、减或比较之前会进行单位换算。计算的结果以最左侧操作数的单位类型为准。如果单位换算无效或失去意义，则忽略单位。无效的单位换算例如：px 到 cm 或 rad 到 % 的转换。</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有操作数被转换成相同的单位</span></span><br><span class="line"><span class="variable">@conversion-1:</span> <span class="number">5cm</span> + <span class="number">10mm</span>; <span class="comment">// 结果是 6cm</span></span><br><span class="line"><span class="variable">@conversion-2:</span> <span class="number">2</span> - <span class="number">3cm</span> - <span class="number">5mm</span>; <span class="comment">// 结果是 -1.5cm</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// conversion is impossible</span></span><br><span class="line"><span class="variable">@incompatible-units:</span> <span class="number">2</span> + <span class="number">5px</span> - <span class="number">3cm</span>; <span class="comment">// 结果是 4px</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// example with variables</span></span><br><span class="line"><span class="variable">@base:</span> <span class="number">5%</span>;</span><br><span class="line"><span class="variable">@filler:</span> <span class="variable">@base</span> * <span class="number">2</span>; <span class="comment">// 结果是 10%</span></span><br><span class="line"><span class="variable">@other:</span> <span class="variable">@base</span> + <span class="variable">@filler</span>; <span class="comment">// 结果是 15%</span></span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li>Less 内置了多种函数用于转换颜色、处理字符串、算术运算等。</li></ul><p>下面这个例子利用 percentage 函数将 0.5 转换为 50%，将颜色饱和度增加 5%，以及颜色亮度降低 25% 并且色相值增加 8 等用法：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@base:</span> <span class="number">#f04615</span>;</span><br><span class="line"><span class="variable">@width:</span> <span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">percentage</span>(<span class="variable">@width</span>); <span class="comment">// returns `50%`</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">saturate</span>(<span class="variable">@base</span>, <span class="number">5%</span>);</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">spin</span>(<span class="built_in">lighten</span>(<span class="variable">@base</span>, <span class="number">25%</span>), <span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><ul><li>可以将混合（mixins）和规则集（rulesets）作为一组值的映射（map）使用</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#colors</span>() &#123;</span><br><span class="line">  primary: blue;</span><br><span class="line">  secondary: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: #colors[primary];</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid #colors[secondary];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出css</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>块注释和行注释都可以使用：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 一个块注释</span></span><br><span class="line"><span class="comment"> * style comment! */</span></span><br><span class="line"><span class="variable">@var:</span> red;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这一行被注释掉了！</span></span><br><span class="line"><span class="variable">@var:</span> white;</span><br></pre></td></tr></table></figure><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>Less 中的作用域与 CSS 中的作用域非常类似。首先在本地查找变量和混合（mixins），如果找不到，则从“父”级作用域继承。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@var:</span> red;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#page</span> &#123;</span><br><span class="line">  <span class="variable">@var:</span> white;</span><br><span class="line">  <span class="selector-id">#header</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@var</span>; <span class="comment">// white</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>​参考自<a href="https://less.bootcss.com/#%E6%98%A0%E5%B0%84%EF%BC%88maps%EF%BC%89">Less中文文档快速入门</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;VS-code-中安装less插件并配置使用&quot;&gt;&lt;a href=&quot;#VS-code-中安装less插件并配置使用&quot; class=&quot;headerlink&quot; title=&quot;VS code 中安装less插件并配置使用&quot;&gt;&lt;/a&gt;VS code 中安装less插件并配置</summary>
      
    
    
    
    <category term="Web前端学习" scheme="http://example.com/categories/Web%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Less学习" scheme="http://example.com/tags/Less%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Web前端学习之JavaScript学习（十一）认识闭包</title>
    <link href="http://example.com/posts/a70bd8a8/"/>
    <id>http://example.com/posts/a70bd8a8/</id>
    <published>2022-04-18T08:36:26.000Z</published>
    <updated>2022-04-24T13:27:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="闭包和作用域链"><a href="#闭包和作用域链" class="headerlink" title="闭包和作用域链"></a>闭包和作用域链</h1><blockquote><p>闭包是指有权访问另一个函数作用域中的变量的函数。（《JavaScript高级程序设计》7.2闭包）</p></blockquote><blockquote><p>所有的JavaScript函数都是闭包：它们都是对象，它们都关联到作用域链。和其他大多数现代编程语言一样，JavaScript也采用词法作用域（lexical scoping），也就是说，函数的执行依赖于变量作用域， 这个作用域是在函数定义时决定的，而不是函数调用时决定的。（《JavaScript权威指南》8.6闭包）</p></blockquote><p>当JavaScript需要查找变量的x的值的时候，它会从作用域链中的第一个对象开始查找， 如果这个对象没有名为x的属性，就会继续查找链上下一个对象，最后到全局作用域，如果全都没有找到就会抛出一个引用错误（ReferenceError）异常。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">closure</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> count += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="title function_">closure</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f</span>()) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f</span>()) <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count) <span class="comment">// error: count is not defined</span></span><br></pre></td></tr></table></figure><p>closure函数返回了一个匿名函数，将其赋值给f，多次调用f，发现closure函数内的count累计增加。</p><p>当我们想打印全局作用域中的count时，报错了。由于作用域是在函数定义时决定而不是函数调用时决定的，f return的变量是closure函数作用域内的count，而不是全局作用域的count。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>作用:<ul><li>延长局部变量的生命周期</li><li>让函数外部能操作内部的局部变量</li></ul></li><li>闭包的应用场景:<ul><li>模块化</li><li>循环遍历加监听</li><li>柯里化</li><li>JS框架(jQuery)大量使用了闭包</li></ul></li><li>缺点:<ul><li>变量占用内存的时间可能会过长</li><li>可能导致内存泄露</li><li>解决:及时释放 : f &#x3D; null; &#x2F;&#x2F;让内部函数对象成为垃圾对象</li></ul></li></ul><p>想要通过更多实例来理解闭包，可以看大佬的这篇文章<a href="https://jiuto.github.io/jiuto_blog/guide/js/apply_call.html">理解js闭包</a>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;闭包和作用域链&quot;&gt;&lt;a href=&quot;#闭包和作用域链&quot; class=&quot;headerlink&quot; title=&quot;闭包和作用域链&quot;&gt;&lt;/a&gt;闭包和作用域链&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;闭包是指有权访问另一个函数作用域中的变量的函数。（《JavaScript高</summary>
      
    
    
    
    <category term="Web前端学习" scheme="http://example.com/categories/Web%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaScript学习" scheme="http://example.com/tags/JavaScript%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Web前端学习之JavaScript学习（十）原型与继承</title>
    <link href="http://example.com/posts/8e77418e/"/>
    <id>http://example.com/posts/8e77418e/</id>
    <published>2022-04-18T02:31:50.000Z</published>
    <updated>2022-04-24T13:27:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h1><h2 id="认识原型"><a href="#认识原型" class="headerlink" title="认识原型"></a>认识原型</h2><p>在JavaScript中，<strong>原型也是一个对象，通过原型可以实现对象的属性继承，</strong>JavaScript的对象中都包含了一个” [[Prototype]]”内部属性，这个属性所对应的就是该对象的原型。</p><p>“[[Prototype]]”作为对象的内部属性，是不能被直接访问的。所以为了方便查看一个对象的原型，Firefox和Chrome中提供了”<code>__proto__</code>“这个<strong>非标准</strong>（不是所有浏览器都支持）的访问器（ECMA引入了标准对象原型访问器”Object.getPrototype(object)”）。</p><h2 id="prototype-和-proto"><a href="#prototype-和-proto" class="headerlink" title="prototype 和 __proto__"></a><code>prototype</code> 和 <code>__proto__</code></h2><ul><li>对于所有的对象，都有<code>__proto__</code>属性，这个属性对应该对象的原型</li><li>对于函数对象，除了<code>__proto__</code>属性之外，还有<code>prototype</code>属性，<strong>当一个函数被用作构造函数来创建实例时，该函数的prototype属性值将被作为原型赋值给所有对象实例（也就是设置实例的<code>__proto__</code>属性）</strong></li></ul><p><img src="/img/Web/prototype.png"></p><h2 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a><code>constructor</code></h2><p>从上面的图我们可以注意到，每个原型对象还有一个属性:<code>constructor</code>,constructor是对象才有的属性。<strong>原型对象的constructor属性</strong>指向的是我们自己定义的构造函数，或者是内置的构造函数。</p><p><strong>构造函数</strong></p><ul><li>构造函数是专门用来创建对象的函数</li><li><strong>一个构造函数我们也可以称为一个类</strong></li><li>通过一个构造函数创建的对象，我们称该对象时这个构造函数的实例</li><li>通过同一个构造函数创建的对象，我们称为一类对象</li><li>构造函数就是一个普通的函数，只是他的调用方式不同<ul><li>如果直接调用，它就是一个普通函数</li><li>如果使用<code>new</code>来调用，则它就是一个构造函数</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">fName,lName,age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = fName + lName;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">show</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;f&quot;</span>,<span class="string">&quot;z&quot;</span>,<span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">instanceof</span> p1) <span class="comment">// Person</span></span><br></pre></td></tr></table></figure><p>为了避免创建对象时方法的重复创建导致浪费内存，可以将方法放入构造函数的原型中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">fName,lName,age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = fName + lName;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">show</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;f&quot;</span>,<span class="string">&quot;z&quot;</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;z&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="number">21</span>);</span><br><span class="line">p1.<span class="title function_">show</span>();</span><br><span class="line">p2.<span class="title function_">show</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">show</span> == p2.<span class="property">show</span>)</span><br></pre></td></tr></table></figure><h1 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h1><h2 id="什么是原型链"><a href="#什么是原型链" class="headerlink" title="什么是原型链"></a>什么是原型链</h2><p>因为每个对象和原型都有原型，对象的原型指向对象的父，而父的原型又指向父的父，这种原型层层连接起来的就构成了原型链。</p><h2 id="属性查找"><a href="#属性查找" class="headerlink" title="属性查找"></a>属性查找</h2><p>当查找一个对象的属性时，JavaScript 会向上遍历原型链，直到找到给定名称的属性为止，到查找到达原型链的顶部，如果仍然没有找到指定的属性，就会返回 undefined。比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;fff&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">School</span>);<span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">School</span> = <span class="string">&quot;SZU&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">School</span>);<span class="comment">// SZU</span></span><br></pre></td></tr></table></figure><h2 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty()"></a><code>hasOwnProperty()</code></h2><ul><li>这个方法可以用来检查对象<strong>自身</strong>是否含有某个属性</li><li>不会向上查找原型链</li><li>语法：<code>对象.hasOwnProperty(“属性名”)</code></li></ul><h1 id="原型和原型链的总结"><a href="#原型和原型链的总结" class="headerlink" title="原型和原型链的总结"></a>原型和原型链的总结</h1><ul><li>原型: 可以理解为是对象的<code>__proto__</code>属性或者是函数的<code>prototype</code>属性所指向的对象</li><li>原型对象: 构造函数的<code>prototype</code>属性所指的对象</li><li>原型链: 对象的<code>__proto__</code>访问器属性，或者[Prototype]内部属性指向的逐级向上最终为null的链式路径，大概的意思就是object.<code>__proto__</code>(父级).<code>__proto__</code>(祖父级).null(最后的<code>__proto__</code>)</li></ul><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">User</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="comment">//给父类型的原型上增加一个show方法</span></span><br><span class="line"><span class="title class_">User</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">show</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;user.name&quot;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Admin</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类型的原型为父类型的一个实例对象</span></span><br><span class="line"><span class="title class_">Admin</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">User</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="comment">// 让子类型的原型的constructor指向子类型</span></span><br><span class="line"><span class="title class_">Admin</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Admin</span>;</span><br><span class="line"><span class="comment">//给子类型的原型上增加一个[showSubProp]方法,打印自身subProp</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> u1 = <span class="keyword">new</span> <span class="title class_">Admin</span>();</span><br><span class="line">u1.<span class="title function_">show</span>();<span class="comment">// output: &quot;user.name&quot;</span></span><br></pre></td></tr></table></figure><h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2><p>使用<code>call()</code>使用父类构造函数初始属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">User</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">User</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">show</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;user.name&quot;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Admin</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="title class_">User</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类型的原型为父类型的一个实例对象</span></span><br><span class="line"><span class="title class_">Admin</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">User</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> u2 = <span class="keyword">new</span> <span class="title class_">Admin</span>(<span class="string">&quot;fmou&quot;</span>, <span class="number">20</span>);</span><br><span class="line">u2.<span class="title function_">show</span>(); <span class="comment">// output: &quot;user.name&quot;</span></span><br></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">User</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">User</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">show</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="title function_">description</span>());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Admin</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Admin</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">User</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="title class_">Admin</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Admin</span>;</span><br><span class="line"><span class="title class_">Admin</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">description</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;我是管理员&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Member</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Member</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">User</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="title class_">Member</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Admin</span>;</span><br><span class="line"><span class="title class_">Member</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">description</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;我是会员&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Enterprise</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Enterprise</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">User</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="title class_">Enterprise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Admin</span>;</span><br><span class="line"><span class="title class_">Enterprise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">description</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;企业账号&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> obj <span class="keyword">of</span> [<span class="keyword">new</span> <span class="title class_">Admin</span>, <span class="keyword">new</span> <span class="title class_">Member</span>, <span class="keyword">new</span> <span class="title class_">Enterprise</span>]) &#123;</span><br><span class="line">    obj.<span class="title function_">show</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">//        我是管理员</span></span><br><span class="line"><span class="comment">//        我是会员</span></span><br><span class="line"><span class="comment">//        企业账号</span></span><br></pre></td></tr></table></figure><h2 id="使用mixin实现多继承"><a href="#使用mixin实现多继承" class="headerlink" title="使用mixin实现多继承"></a>使用mixin实现多继承</h2><p>mixin 可以理解为一个混合功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">extend</span>(<span class="params">sub, sup</span>) &#123;</span><br><span class="line">    sub.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(sup.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(sub.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&quot;constructor&quot;</span>,&#123;</span><br><span class="line">       <span class="attr">value</span>: sub,</span><br><span class="line">       <span class="attr">enumerable</span>: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Address</span> = &#123;</span><br><span class="line">   <span class="title function_">getAddress</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;获取收货地址&quot;</span>);</span><br><span class="line">   &#125; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Credit</span> = &#123;</span><br><span class="line">   <span class="title function_">total</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;积分统计&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Request</span> = &#123;</span><br><span class="line">    <span class="title function_">ajax</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求后台&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">User</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">User</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">show</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;user.name&quot;</span>)</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Admin</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="title class_">User</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">extend</span>(<span class="title class_">Admin</span>, <span class="title class_">User</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Admin</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">Admin</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="title class_">Address</span>, <span class="title class_">Credit</span>, <span class="title class_">Request</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> admin = <span class="keyword">new</span> <span class="title class_">Admin</span>(<span class="string">&quot;zz&quot;</span>, <span class="number">20</span>);</span><br><span class="line">admin.<span class="title function_">show</span>();<span class="comment">// &quot;user.name&quot;</span></span><br><span class="line">admin.<span class="title function_">ajax</span>();<span class="comment">// &quot;请求后台&quot;</span></span><br><span class="line">admin.<span class="title function_">total</span>();<span class="comment">// &quot;积分统计&quot;</span></span><br><span class="line">admin.<span class="title function_">getAddress</span>();<span class="comment">// &quot;获取收货地址&quot;</span></span><br></pre></td></tr></table></figure><h2 id="内部继承和super关键字"><a href="#内部继承和super关键字" class="headerlink" title="内部继承和super关键字"></a>内部继承和<code>super</code>关键字</h2><p><code>super</code>指向的是当前对象的原型对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">extend</span>(<span class="params">sub, sup</span>) &#123;</span><br><span class="line">    sub.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(sup.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(sub.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&quot;constructor&quot;</span>,&#123;</span><br><span class="line">       <span class="attr">value</span>: sub,</span><br><span class="line">       <span class="attr">enumerable</span>: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Request</span> = &#123;</span><br><span class="line">    <span class="title function_">ajax</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;请求后台&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Credit</span> = &#123;</span><br><span class="line">   <span class="attr">__proto__</span>: <span class="title class_">Request</span>,</span><br><span class="line">   <span class="title function_">total</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">super</span>.<span class="title function_">ajax</span>() + <span class="string">&quot;: 积分统计&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">User</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">User</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">show</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;user.name&quot;</span>)</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Admin</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="title class_">User</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">extend</span>(<span class="title class_">Admin</span>, <span class="title class_">User</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Admin</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">Admin</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="title class_">Credit</span>, <span class="title class_">Request</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> admin = <span class="keyword">new</span> <span class="title class_">Admin</span>(<span class="string">&quot;zz&quot;</span>, <span class="number">20</span>);</span><br><span class="line">admin.<span class="title function_">show</span>();<span class="comment">// &quot;user.name&quot;</span></span><br><span class="line">admin.<span class="title function_">total</span>();<span class="comment">// &quot;请求后台: 积分统计&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;原型&quot;&gt;&lt;a href=&quot;#原型&quot; class=&quot;headerlink&quot; title=&quot;原型&quot;&gt;&lt;/a&gt;原型&lt;/h1&gt;&lt;h2 id=&quot;认识原型&quot;&gt;&lt;a href=&quot;#认识原型&quot; class=&quot;headerlink&quot; title=&quot;认识原型&quot;&gt;&lt;/a&gt;认识原型&lt;/h</summary>
      
    
    
    
    <category term="Web前端学习" scheme="http://example.com/categories/Web%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaScript学习" scheme="http://example.com/tags/JavaScript%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Web前端学习之JavaScript学习（九）对象</title>
    <link href="http://example.com/posts/c3328cdb/"/>
    <id>http://example.com/posts/c3328cdb/</id>
    <published>2022-04-13T07:19:53.000Z</published>
    <updated>2022-04-24T13:27:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对象基础"><a href="#对象基础" class="headerlink" title="对象基础"></a>对象基础</h1><p>对象是一个包含相关数据和方法的集合（通常由一些变量和函数组成，我们称之为对象里面的属性和方法）。</p><p>在 javascript 中，一个对象可以是一个单独的拥有属性和类型的实体。我们拿它和一个杯子做下类比。一个杯子是一个对象(物体)，拥有属性。杯子有颜色，图案，重量，由什么材质构成等等。同样， javascript 对象也有属性来定义它的特征。</p><h2 id="对象的分类"><a href="#对象的分类" class="headerlink" title="对象的分类"></a>对象的分类</h2><p><strong>1. 内建对象</strong></p><ul><li>由ES标准中定义的对象，在任何的ES的实现中都可以使用</li><li>比如：<code>Math</code> <code>String</code> <code>Number</code> <code>Function</code> <code>Object</code>…</li></ul><p><strong>2. 宿主对象</strong></p><ul><li>由JS的运行环境提供的对象，目前来讲主要指由浏览器提供的对象</li><li>比如 <code>BOM</code> <code>DOM</code></li></ul><p><strong>3. 自定义对象</strong></p><ul><li>由开发人员自己创建的对象</li></ul><h2 id="对象和属性"><a href="#对象和属性" class="headerlink" title="对象和属性"></a>对象和属性</h2><p>一个 javascript 对象有很多属性。一个对象的属性可以被解释成一个附加到对象上的变量。属性定义了对象的特征。</p><h2 id="点表示法"><a href="#点表示法" class="headerlink" title="点表示法"></a>点表示法</h2><p>可以用点表示法来访问对象的属性和方法。比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person.<span class="property">age</span></span><br><span class="line">person.<span class="property">name</span>.<span class="property">first</span></span><br></pre></td></tr></table></figure><h2 id="括号表示法"><a href="#括号表示法" class="headerlink" title="括号表示法"></a>括号表示法</h2><p>另外一种访问属性的方式是使用括号表示法。比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person[&#x27;age&#x27;]</span><br><span class="line">person[&#x27;name&#x27;][&#x27;first&#x27;]</span><br></pre></td></tr></table></figure><h2 id="创建新对象"><a href="#创建新对象" class="headerlink" title="创建新对象"></a>创建新对象</h2><p>可以通过对象初始化器创建对象。或者可以创建一个构造函数并使用该函数和 <code>new</code> 操作符初始化对象。  </p><h3 id="使用对象初始化器"><a href="#使用对象初始化器" class="headerlink" title="使用对象初始化器"></a>使用对象初始化器</h3><p>通过对象初始化器创建对象的语法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">property_1</span>:   value_1,   <span class="comment">// property_# 可以是一个标识符...</span></span><br><span class="line">            <span class="number">2</span>:            value_2,   <span class="comment">// 或一个数字...</span></span><br><span class="line">           [<span class="string">&quot;property&quot;</span> +<span class="number">3</span>]: value_3,  <span class="comment">//  或一个可计算的key名...</span></span><br><span class="line">            <span class="comment">// ...,</span></span><br><span class="line">            <span class="string">&quot;property n&quot;</span>: value_n &#125;; <span class="comment">// 或一个字符串</span></span><br></pre></td></tr></table></figure><h3 id="使用构造函数"><a href="#使用构造函数" class="headerlink" title="使用构造函数"></a>使用构造函数</h3><p>作为另一种方式，你可以通过两步来创建对象：</p><ol><li>通过创建一个构造函数来定义对象的类型。首字母大写是非常普遍而且很恰当的惯用法。</li><li>通过 <code>new</code> 创建对象实例。</li></ol><p>为了定义对象类型，为对象类型创建一个函数以声明类型的名称、属性和方法。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params">make, model, year</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">make</span> = make;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">model</span> = model;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">year</span> = year;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是通过使用 this 将传入函数的值赋给对象的属性。（ this 在后面会讲到）</p><p>现在可以像这样创建一个 <code>mycar</code> 对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mycar = <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;Eagle&quot;</span>, <span class="string">&quot;Talon TSi&quot;</span>, <span class="number">1993</span>);</span><br></pre></td></tr></table></figure><p>可以通过调用 <code>new</code> 创建任意数量的 <code>car</code> 对象。</p><h3 id="使用-Object-create-方法"><a href="#使用-Object-create-方法" class="headerlink" title="使用 Object.create 方法"></a>使用 Object.create 方法</h3><p>对象也可以用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create"><code>Object.create()</code></a> 方法创建。该方法非常有用，因为它允许你为创建的对象选择一个原型对象，而不用定义构造函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Car</span> = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;Sedan&quot;</span>, <span class="comment">// 属性默认值</span></span><br><span class="line">  displayType : <span class="keyword">function</span>(<span class="params"></span>) &#123;  <span class="comment">// 用于显示type属性的方法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">type</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一辆新的车——car1</span></span><br><span class="line"><span class="keyword">var</span> car1 = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Car</span>);</span><br><span class="line">car1.<span class="title function_">displayType</span>(); <span class="comment">// Output:Sedan</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一种新的动物——Fishes</span></span><br><span class="line"><span class="keyword">var</span> car2 = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Car</span>);</span><br><span class="line">car2.<span class="property">type</span> = <span class="string">&quot;Coupe&quot;</span>;</span><br><span class="line">car2.<span class="title function_">displayType</span>(); <span class="comment">// Output:Coupe</span></span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>所有的 JavaScript 对象至少继承于一个对象。被继承的对象被称作原型，并且继承的属性可通过构造函数的 <code>prototype</code> 对象找到。</p><h2 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h2><p>一个<em>方法</em> 是关联到某个对象的函数，或者说，一个方法是一个值为某个函数的对象属性。定义方法就像定义普通的函数，除了它们必须被赋给对象的某个属性。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// objectName.methodname = function_name;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myObj = &#123;</span><br><span class="line">  <span class="attr">myMethod</span>: <span class="keyword">function</span>(<span class="params">params</span>) &#123;</span><br><span class="line">    <span class="comment">// ...do something</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者这样写</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">myOtherMethod</span>(<span class="params">params</span>) &#123;</span><br><span class="line">    <span class="comment">// ...do something else</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="通过-this-引用对象"><a href="#通过-this-引用对象" class="headerlink" title="通过 this 引用对象"></a>通过 <code>this</code> 引用对象</h2><p>JavaScript 有一个特殊的关键字 <code>this</code>，它可以在方法中使用以指代当前对象。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  name : <span class="string">&#x27;Chris&#x27;</span>,</span><br><span class="line">  <span class="attr">greeting</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;Hi! I\&#x27;m &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = &#123;</span><br><span class="line">  name : <span class="string">&#x27;Brian&#x27;</span>,</span><br><span class="line">  <span class="attr">greeting</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;Hi! I\&#x27;m &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，person1.greeting() 会输出：”Hi! I’m Chris.”；person2.greeting() 会输出：”Hi! I’m Brain.”</p><h1 id="定义-getters-与-setters"><a href="#定义-getters-与-setters" class="headerlink" title="定义 getters 与 setters"></a>定义 getters 与 setters</h1><p>一个 getter 是一个获取某个特定属性的值的方法。一个 setter 是一个设定某个属性的值的方法。你可以为预定义的或用户定义的对象定义 getter 和 setter 以支持新增的属性。定义 getter 和 setter 的语法采用对象字面量语法。</p><p>下面例子描述了getters 和 setters 是如何为用户定义的对象<code> o</code> 工作的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">7</span>,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">b</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span> + <span class="number">1</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">c</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = x / <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o.<span class="property">a</span>); <span class="comment">// 7</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o.<span class="property">b</span>); <span class="comment">// 8</span></span><br><span class="line">o.<span class="property">c</span> = <span class="number">50</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o.<span class="property">a</span>); <span class="comment">// 25</span></span><br></pre></td></tr></table></figure><ul><li>对象的属性如下：<ul><li><code>o.a</code> — 数字</li><li><code>o.b</code> — 返回 <code>o.a</code> + 1 的 getter</li><li><code>o.c</code> — 由 <code>o.c 的值所设置 o.a 值的</code> setter</li></ul></li></ul><h1 id="删除对象的属性"><a href="#删除对象的属性" class="headerlink" title="删除对象的属性"></a>删除对象的属性</h1><p>你可以用 <code>delete</code> 操作符删除一个<strong>不是继承而来</strong>的属性。下面的例子说明如何删除一个属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var myobj = new Object;</span><br><span class="line">myobj.a = 5;</span><br><span class="line">myobj.b = 12;</span><br><span class="line"></span><br><span class="line">delete myobj.a;</span><br></pre></td></tr></table></figure><h1 id="对象的比较"><a href="#对象的比较" class="headerlink" title="对象的比较"></a>对象的比较</h1><p>在 JavaScript 中 objects 是一种引用类型。两个独立声明的对象永远也不会相等，即使他们有相同的属性，只有在比较一个对象和这个对象的引用时，才会返回true.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 两个变量, 两个具有同样的属性、但不相同的对象</span></span><br><span class="line"><span class="keyword">var</span> fruit = &#123;<span class="attr">name</span>: <span class="string">&quot;apple&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> fruitbear = &#123;<span class="attr">name</span>: <span class="string">&quot;apple&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">fruit == fruitbear <span class="comment">// return false</span></span><br><span class="line">fruit === fruitbear <span class="comment">// return false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个变量，同一个对象</span></span><br><span class="line"><span class="keyword">var</span> fruit = &#123;<span class="attr">name</span>: <span class="string">&quot;apple&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> fruitbear = fruit;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// fruit与fruitbear都指向同样的对象</span></span><br><span class="line">fruit == fruitbear <span class="comment">// return true</span></span><br><span class="line">fruit === fruitbear <span class="comment">// return true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;对象基础&quot;&gt;&lt;a href=&quot;#对象基础&quot; class=&quot;headerlink&quot; title=&quot;对象基础&quot;&gt;&lt;/a&gt;对象基础&lt;/h1&gt;&lt;p&gt;对象是一个包含相关数据和方法的集合（通常由一些变量和函数组成，我们称之为对象里面的属性和方法）。&lt;/p&gt;
&lt;p&gt;在 java</summary>
      
    
    
    
    <category term="Web前端学习" scheme="http://example.com/categories/Web%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaScript学习" scheme="http://example.com/tags/JavaScript%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Web前端学习之JavaScript学习（八） 事件</title>
    <link href="http://example.com/posts/a27b9d85/"/>
    <id>http://example.com/posts/a27b9d85/</id>
    <published>2022-04-09T12:41:57.000Z</published>
    <updated>2022-04-24T13:27:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事件是什么"><a href="#事件是什么" class="headerlink" title="事件是什么"></a>事件是什么</h1><p><strong>事件</strong>是您在编程时系统内发生的动作或者发生的事情——系统会在事件出现时产生或触发某种信号，并且会提供一个自动加载某种动作（例如：如果用户在网页上单击一个按钮，您可能想通过显示一个信息框来响应这个动作。）的机制。</p><p>在 Web 中, 事件在浏览器窗口中被触发并且通常被绑定到窗口内部的特定部分 — 可能是一个元素、一系列元素、被加载到这个窗口的 HTML 代码或者是整个浏览器窗口。</p><p>举几个可能发生的不同事件：</p><ul><li>用户在某个元素上点击鼠标或悬停光标。</li><li>用户在键盘中按下某个按键。</li><li>用户调整浏览器的大小或者关闭浏览器窗口。</li><li>一个网页停止加载。</li><li>提交表单。</li></ul><p>每个可用的事件都会有一个<strong>事件处理器</strong>，也就是事件触发时会运行的代码块。当我们定义了一个用来回应事件被激发的代码块的时候，我们说我们<strong>注册了一个事件处理器</strong>。事件处理器有时候被叫做<strong>事件监听器</strong></p><h1 id="使用网页事件的方式"><a href="#使用网页事件的方式" class="headerlink" title="使用网页事件的方式"></a>使用网页事件的方式</h1><p>可以通过多种不同的方法将事件监听器代码添加到网页，以便在关联的事件被触发时运行它。</p><h2 id="事件处理器属性"><a href="#事件处理器属性" class="headerlink" title="事件处理器属性"></a>事件处理器属性</h2><p>我们来通过一个例子了解一下事件处理器的属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"></span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> rndCol = <span class="string">&#x27;rgb(&#x27;</span> + <span class="title function_">random</span>(<span class="number">255</span>) + <span class="string">&#x27;,&#x27;</span> + <span class="title function_">random</span>(<span class="number">255</span>) + <span class="string">&#x27;,&#x27;</span> + <span class="title function_">random</span>(<span class="number">255</span>) + <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = rndCol;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个 <code>onclick</code> 是被用在这个情景下的事件处理器的属性，它就像 button 其他的属性（如 <code>btn.textContent</code>, or <code>btn.style</code>), 但是有一个特别的地方——当您将一些代码赋值给它的时候，只要事件触发代码就会运行。</p><p>也可以将一个已存在的函数赋值给事件处理参数，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bgChange</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> rndCol = <span class="string">&#x27;rgb(&#x27;</span> + <span class="title function_">random</span>(<span class="number">255</span>) + <span class="string">&#x27;,&#x27;</span> + <span class="title function_">random</span>(<span class="number">255</span>) + <span class="string">&#x27;,&#x27;</span> + <span class="title function_">random</span>(<span class="number">255</span>) + <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = rndCol;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btn.<span class="property">onclick</span> = bgChange;</span><br></pre></td></tr></table></figure><p>还有很多事件处理参数可以选择，用上面例子来举例：</p><ul><li><code>btn.onfocus</code>及<code>btn.onblur</code> — 颜色将于按钮被置于焦点或解除焦点时改变（尝试使用Tab移动至按钮上，然后再移开）。这些通常用于显示有关如何在置于焦点时填写表单字段的信息，或者如果表单字段刚刚填入不正确的值，则显示错误消息。</li><li><code>btn.ondblclick</code> — 颜色将仅于按钮被双击时改变。</li><li><code>window.onkeypress</code>, <code>window.onkeydown</code>, <code>window.onkeyup</code> — 当按钮被按下时颜色会发生改变. <code>keypress</code> 指的是通俗意义上的按下按钮 (按下并松开), 而 <code>keydown</code> 和 <code>keyup</code> 指的是按键动作的一部分,分别指按下和松开. 注意如果你将事件处理器添加到按钮本身，它将不会工作 — 我们只能将它添加到代表整个浏览器窗口的 window 对象中。</li><li><code>btn.onmouseover</code> 和 <code>btn.onmouseout</code> — 颜色将会在鼠标移入按钮上方时发生改变, 或者当它从按钮移出时.</li></ul><p>可以拿下面这份完整的代码进行学习：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Random color example — event handler property<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Change color<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">random</span>(<span class="params">number</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*number);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">bgChange</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> rndCol = <span class="string">&#x27;rgb(&#x27;</span> + <span class="title function_">random</span>(<span class="number">255</span>) + <span class="string">&#x27;,&#x27;</span> + <span class="title function_">random</span>(<span class="number">255</span>) + <span class="string">&#x27;,&#x27;</span> + <span class="title function_">random</span>(<span class="number">255</span>) + <span class="string">&#x27;)&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = rndCol;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      btn.<span class="property">onblur</span> = bgChange;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="addEventListener-和-removeEventListener"><a href="#addEventListener-和-removeEventListener" class="headerlink" title="addEventListener() 和 removeEventListener()"></a>addEventListener() 和 removeEventListener()</h2><p>这是一种新的事件触发机制，定义在DOM Level 2 Events 中。它给浏览器提供了一个事件处理属性类似的函数—<code>addEventListener()</code>。用这个函数重写上面的例子如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bgChange</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> rndCol = <span class="string">&#x27;rgb(&#x27;</span> + <span class="title function_">random</span>(<span class="number">255</span>) + <span class="string">&#x27;,&#x27;</span> + <span class="title function_">random</span>(<span class="number">255</span>) + <span class="string">&#x27;,&#x27;</span> + <span class="title function_">random</span>(<span class="number">255</span>) + <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = rndCol;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, bgChange);</span><br></pre></td></tr></table></figure><p>在<code>addEventListener()</code> 函数中, 我们具体化了两个参数——我们想要将处理器应用上去的事件名称，还有我们用来回应事件的函数的代码。</p><p>这个机制带来了一些相较于旧方式的优点。还有一个相对应的方法，<code>removeEventListener()，</code>这个方法移除事件监听器。例如，下面的代码将会移除上个代码块中的事件监听器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">btn.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, bgChange);</span><br></pre></td></tr></table></figure><p>这两个函数在大型的、复杂的项目中是非常有用的，可以让开发变得更加高效，比如你想要清除不需要的事件处理器，不需要去找那一行代码，只需要 <code>removeEventListener()</code> 即可；再比如你想要给同一个监听器注册多个处理器，用事件处理程序属性就不太方便，而使用 <code>addEventListener()</code> J就可以这样做：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myElement.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, functionA);</span><br><span class="line">myElement.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, functionB);</span><br></pre></td></tr></table></figure><p>当元素被点击时两个函数都会工作。这个事件机制还有很多待学习的强大功能特性。</p><h1 id="事件相关高级概念"><a href="#事件相关高级概念" class="headerlink" title="事件相关高级概念"></a>事件相关高级概念</h1><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>有时候在事件处理函数内部，您可能会看到一个固定指定名称的参数，例如<code>event</code>，<code>evt</code>或简单的<code>e</code>。 这被称为<strong>事件对象</strong>，它被自动传递给事件处理函数，以提供额外的功能和信息。 再次重写上面的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bgChange</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> rndCol = <span class="string">&#x27;rgb(&#x27;</span> + <span class="title function_">random</span>(<span class="number">255</span>) + <span class="string">&#x27;,&#x27;</span> + <span class="title function_">random</span>(<span class="number">255</span>) + <span class="string">&#x27;,&#x27;</span> + <span class="title function_">random</span>(<span class="number">255</span>) + <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">  e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = rndCol;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, bgChange);</span><br></pre></td></tr></table></figure><p>在函数中包括一个事件对象<code>e</code>，并在函数中设置背景颜色样式在<code>e.target上</code> - 它指的是按钮本身。 事件对象 <code>e</code> 的<code>target</code>属性始终是事件刚刚发生的元素的引用。 所以在这个例子中，我们在按钮上设置一个随机的背景颜色，而不是页面。</p><p>在多个元素上设置相同的事件处理程序时，<code>e.target</code>非常有用，并且在发生事件时对所有元素执行某些操作。</p><h2 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h2><p>有时，会遇到一些情况，你希望事件不执行它的默认行为。 最常见的例子是Web表单，例如自定义注册表单。 当你填写详细信息并按提交按钮时，自然行为是将数据提交到服务器上的指定页面进行处理，并将浏览器重定向到某种“成功消息”页面。</p><p>当用户没有正确提交数据时，作为开发人员，你希望停止提交信息给服务器，并给他们一个错误提示，告诉他们什么做错了，以及需要做些什么来修正错误。所以我们就需要阻止默认行为的操作。</p><p>比如，现在有一个简单的HTML表单，需要输入名和姓</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;fname&quot;</span>&gt;</span>First name: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;fname&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;lname&quot;</span>&gt;</span>Last name: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;lname&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里我们用一个<code>onsubmit</code>事件处理程序（在提交的时候，在一个表单上发起<code>submit</code>事件）来实现一个非常简单的检查，用于测试文本字段是否为空。 如果是，我们在事件对象上调用<code>preventDefault()</code>函数，这样就停止了表单提交，然后在我们表单下面的段落中显示一条错误消息，告诉用户什么是错误的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> form = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;form&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fname = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;fname&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> lname = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;lname&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> submit = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;submit&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> para = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line"></span><br><span class="line">form.<span class="property">onsubmit</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (fname.<span class="property">value</span> === <span class="string">&#x27;&#x27;</span> || lname.<span class="property">value</span> === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    para.<span class="property">textContent</span> = <span class="string">&#x27;姓和名你都需要填写&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，这是一种非常弱的表单验证——例如，用户输入空格或数字提交表单，表单验证并不会阻止用户提交——这不是我们例子想要达到的目的。</p><h2 id="事件冒泡及捕获"><a href="#事件冒泡及捕获" class="headerlink" title="事件冒泡及捕获"></a>事件冒泡及捕获</h2><p>事件冒泡和捕捉是两种机制，主要描述当在一个元素上有两个相同类型的事件处理器被激活会发生什么。</p><h4 id="对事件冒泡和捕捉的解释"><a href="#对事件冒泡和捕捉的解释" class="headerlink" title="对事件冒泡和捕捉的解释"></a>对事件冒泡和捕捉的解释</h4><p>当一个事件发生在具有父元素的元素上时，现代浏览器运行两个不同的阶段 - 捕获阶段和冒泡阶段。 在捕获阶段：</p><ul><li>浏览器检查元素的最外层祖先<code>&lt;html&gt;</code>，是否在捕获阶段中注册了一个<code>onclick</code>事件处理程序，如果是，则运行它。</li><li>然后，它移动到<code>&lt;html&gt;</code>中单击元素的下一个祖先元素，并执行相同的操作，然后是单击元素再下一个祖先元素，依此类推，直到到达实际点击的元素。</li></ul><p>在冒泡阶段，恰恰相反:</p><ul><li>浏览器检查实际点击的元素是否在冒泡阶段中注册了一个<code>onclick</code>事件处理程序，如果是，则运行它</li><li>然后它移动到下一个直接的祖先元素，并做同样的事情，然后是下一个，等等，直到它到达<code>&lt;html&gt;</code>元素。</li></ul><p>在现代浏览器中，默认情况下，所有事件处理程序都在冒泡阶段进行注册。因此，在我们当前的示例中，当您单击视频时，这个单击事件从 <code>&lt;video&gt;</code>元素向外冒泡直到<code>&lt;html&gt;</code>元素。沿着这个事件冒泡线路：</p><ul><li>它发现了<code>video.onclick...</code>事件处理器并且运行它，因此这个视频<code>&lt;video&gt;</code>第一次开始播放。</li><li>接着它发现了（往外冒泡找到的） <code>videoBox.onclick...</code>事件处理器并且运行它，因此这个视频<code>&lt;video&gt;</code>也隐藏起来了。</li></ul><h4 id="用-stopPropagation-修复问题"><a href="#用-stopPropagation-修复问题" class="headerlink" title="用 stopPropagation() 修复问题"></a>用 stopPropagation() 修复问题</h4><p>这是令人讨厌的行为，但有一种方法来解决它！标准事件对象具有可用的名为 <code>stopPropagation()</code>的函数, 当在事件对象上调用该函数时，它只会让当前事件处理程序运行，但事件不会在<strong>冒泡</strong>链上进一步扩大，因此将不会有更多事件处理器被运行(不会向上冒泡)。所以，我们可以通过改变前面代码块中的第二个处理函数来解决当前的问题:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">video.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="title function_">stopPropagation</span>();</span><br><span class="line">  video.<span class="title function_">play</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h4><p>冒泡还允许我们利用事件委托——这个概念依赖于这样一个事实,如果你想要在大量子元素中单击任何一个都可以运行一段代码，您可以将事件监听器设置在其父节点上，并让子节点上发生的事件冒泡到父节点上，而不是每个子节点单独设置事件监听器。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;事件是什么&quot;&gt;&lt;a href=&quot;#事件是什么&quot; class=&quot;headerlink&quot; title=&quot;事件是什么&quot;&gt;&lt;/a&gt;事件是什么&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;事件&lt;/strong&gt;是您在编程时系统内发生的动作或者发生的事情——系统会在事件出现时产生或触发某种</summary>
      
    
    
    
    <category term="Web前端学习" scheme="http://example.com/categories/Web%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaScript学习" scheme="http://example.com/tags/JavaScript%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
