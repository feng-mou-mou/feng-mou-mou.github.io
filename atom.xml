<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>山泽君的小站</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-03-18T10:36:49.585Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>山泽君</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Data Analysis</title>
    <link href="http://example.com/posts/afff2b4b/"/>
    <id>http://example.com/posts/afff2b4b/</id>
    <published>2025-03-18T10:34:36.000Z</published>
    <updated>2025-03-18T10:36:49.585Z</updated>
    
    
    
    
    <category term="offer" scheme="http://example.com/categories/offer/"/>
    
    
    <category term="DA" scheme="http://example.com/tags/DA/"/>
    
  </entry>
  
  <entry>
    <title>迁移hexo博客到Mac</title>
    <link href="http://example.com/posts/5a84bf91/"/>
    <id>http://example.com/posts/5a84bf91/</id>
    <published>2024-08-25T04:46:29.000Z</published>
    <updated>2024-08-25T05:13:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mac环境配置"><a href="#Mac环境配置" class="headerlink" title="Mac环境配置"></a>Mac环境配置</h1><h2 id="在Mac安装git和node-js"><a href="#在Mac安装git和node-js" class="headerlink" title="在Mac安装git和node.js"></a>在Mac安装git和node.js</h2><pre class="language-zsh" data-language="zsh"><code class="language-zsh">brew install gitbrew install node</code></pre><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><pre class="language-zsh" data-language="zsh"><code class="language-zsh">npm install hexo g</code></pre><p>如果出错，改为下面这条：</p><pre class="language-zsh" data-language="zsh"><code class="language-zsh">npm install hexo-cli -g</code></pre><h2 id="初始化hexo目录"><a href="#初始化hexo目录" class="headerlink" title="初始化hexo目录"></a>初始化hexo目录</h2><pre class="language-zsh" data-language="zsh"><code class="language-zsh">mkdir blogcd bloghexo inithexo s</code></pre><p>打开 localhost:4000 查看是否成功</p><h2 id="使用ssh连接或者token（我这里选择了token）"><a href="#使用ssh连接或者token（我这里选择了token）" class="headerlink" title="使用ssh连接或者token（我这里选择了token）"></a>使用ssh连接或者token（我这里选择了token）</h2><p>去对应的github生成personal token，在 Setting -&gt; Developer Setting 下<br>然后将token复制到_config.yml中的对应位置，打码处为token</p><p><img src="/img/blogissue/1.jpg" loading="lazy"></p><h1 id="配置文件转移"><a href="#配置文件转移" class="headerlink" title="配置文件转移"></a>配置文件转移</h1><p>将原电脑的blog文件下的文件转移到Mac的blog文件夹</p><h1 id="尝试发布文章"><a href="#尝试发布文章" class="headerlink" title="尝试发布文章"></a>尝试发布文章</h1><pre class="language-zsh" data-language="zsh"><code class="language-zsh">hexo d</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Mac环境配置&quot;&gt;&lt;a href=&quot;#Mac环境配置&quot; class=&quot;headerlink&quot; title=&quot;Mac环境配置&quot;&gt;&lt;/a&gt;Mac环境配置&lt;/h1&gt;&lt;h2 id=&quot;在Mac安装git和node-js&quot;&gt;&lt;a href=&quot;#在Mac安装git和node-j</summary>
      
    
    
    
    <category term="博客" scheme="http://example.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="杂谈" scheme="http://example.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>数据结构刷题推荐（1）线性表</title>
    <link href="http://example.com/posts/5d651eb9/"/>
    <id>http://example.com/posts/5d651eb9/</id>
    <published>2024-08-25T04:14:42.000Z</published>
    <updated>2024-08-25T04:44:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode（按分类排序，推荐刷题列表-★★★）"><a href="#LeetCode（按分类排序，推荐刷题列表-★★★）" class="headerlink" title="LeetCode（按分类排序，推荐刷题列表 ★★★）"></a>LeetCode（按分类排序，推荐刷题列表 ★★★）</h1><h2 id="01-数组"><a href="#01-数组" class="headerlink" title="01. 数组"></a>01. 数组</h2><h3 id="数组基础题目"><a href="#数组基础题目" class="headerlink" title="数组基础题目"></a>数组基础题目</h3><h4 id="数组操作题目"><a href="#数组操作题目" class="headerlink" title="数组操作题目"></a>数组操作题目</h4><table><thead><tr><th align="left">题号</th><th align="left">标题</th><th align="left">标签</th><th align="left">难度</th></tr></thead><tbody><tr><td align="left">0189</td><td align="left"><a href="https://leetcode.cn/problems/rotate-array/">轮转数组</a></td><td align="left">数组、数学、双指针</td><td align="left">中等</td></tr><tr><td align="left">0066</td><td align="left"><a href="https://leetcode.cn/problems/plus-one/">加一</a></td><td align="left">数组、数学</td><td align="left">简单</td></tr><tr><td align="left">0724</td><td align="left"><a href="https://leetcode.cn/problems/find-pivot-index/">寻找数组的中心下标</a></td><td align="left">数组、前缀和</td><td align="left">简单</td></tr><tr><td align="left">0485</td><td align="left"><a href="https://leetcode.cn/problems/max-consecutive-ones/">最大连续 1 的个数</a></td><td align="left">数组</td><td align="left">简单</td></tr><tr><td align="left">0238</td><td align="left"><a href="https://leetcode.cn/problems/product-of-array-except-self/">除自身以外数组的乘积</a></td><td align="left">数组、前缀和</td><td align="left">中等</td></tr></tbody></table><h4 id="二维数组题目"><a href="#二维数组题目" class="headerlink" title="二维数组题目"></a>二维数组题目</h4><table><thead><tr><th align="left">题号</th><th align="left">标题</th><th align="left">标签</th><th align="left">难度</th></tr></thead><tbody><tr><td align="left">0498</td><td align="left"><a href="https://leetcode.cn/problems/diagonal-traverse/">对角线遍历</a></td><td align="left">数组、矩阵、模拟</td><td align="left">中等</td></tr><tr><td align="left">0048</td><td align="left"><a href="https://leetcode.cn/problems/rotate-image/">旋转图像</a></td><td align="left">数组、数学、矩阵</td><td align="left">中等</td></tr><tr><td align="left">0073</td><td align="left"><a href="https://leetcode.cn/problems/set-matrix-zeroes/">矩阵置零</a></td><td align="left">数组、哈希表、矩阵</td><td align="left">中等</td></tr><tr><td align="left">0054</td><td align="left"><a href="https://leetcode.cn/problems/spiral-matrix/">螺旋矩阵</a></td><td align="left">数组、矩阵、模拟</td><td align="left">中等</td></tr><tr><td align="left">0059</td><td align="left"><a href="https://leetcode.cn/problems/spiral-matrix-ii/">螺旋矩阵 II</a></td><td align="left">数组、矩阵、模拟</td><td align="left">中等</td></tr><tr><td align="left">0289</td><td align="left"><a href="https://leetcode.cn/problems/game-of-life/">生命游戏</a></td><td align="left">数组、矩阵、模拟</td><td align="left">中等</td></tr></tbody></table><h2 id="02-链表"><a href="#02-链表" class="headerlink" title="02. 链表"></a>02. 链表</h2><h3 id="链表经典题目"><a href="#链表经典题目" class="headerlink" title="链表经典题目"></a>链表经典题目</h3><table><thead><tr><th align="left">题号</th><th align="left">标题</th><th align="left">标签</th><th align="left">难度</th></tr></thead><tbody><tr><td align="left">0707</td><td align="left"><a href="https://leetcode.cn/problems/design-linked-list/">设计链表</a></td><td align="left">设计、链表</td><td align="left">中等</td></tr><tr><td align="left">0083</td><td align="left"><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-list/">删除排序链表中的重复元素</a></td><td align="left">链表</td><td align="left">简单</td></tr><tr><td align="left">0082</td><td align="left"><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii/">删除排序链表中的重复元素 II</a></td><td align="left">链表、双指针</td><td align="left">中等</td></tr><tr><td align="left">0206</td><td align="left"><a href="https://leetcode.cn/problems/reverse-linked-list/">反转链表</a></td><td align="left">递归、链表</td><td align="left">简单</td></tr><tr><td align="left">0203</td><td align="left"><a href="https://leetcode.cn/problems/remove-linked-list-elements/">移除链表元素</a></td><td align="left">递归、链表</td><td align="left">简单</td></tr><tr><td align="left">0234</td><td align="left"><a href="https://leetcode.cn/problems/palindrome-linked-list/">回文链表</a></td><td align="left">栈、递归、链表、双指针</td><td align="left">简单</td></tr><tr><td align="left">0061</td><td align="left"><a href="https://leetcode.cn/problems/rotate-list/">旋转链表</a></td><td align="left">链表、双指针</td><td align="left">中等</td></tr></tbody></table><h2 id="03-栈"><a href="#03-栈" class="headerlink" title="03. 栈"></a>03. 栈</h2><h3 id="栈基础题目"><a href="#栈基础题目" class="headerlink" title="栈基础题目"></a>栈基础题目</h3><table><thead><tr><th align="left">题号</th><th align="left">标题</th><th align="left">标签</th><th align="left">难度</th></tr></thead><tbody><tr><td align="left">1047</td><td align="left"><a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/">删除字符串中的所有相邻重复项</a></td><td align="left">栈、字符串</td><td align="left">简单</td></tr><tr><td align="left">0155</td><td align="left"><a href="https://leetcode.cn/problems/min-stack/">最小栈</a></td><td align="left">栈、设计</td><td align="left">中等</td></tr><tr><td align="left">0020</td><td align="left"><a href="https://leetcode.cn/problems/valid-parentheses/">有效的括号</a></td><td align="left">栈、字符串</td><td align="left">简单</td></tr><tr><td align="left">0227</td><td align="left"><a href="https://leetcode.cn/problems/basic-calculator-ii/">基本计算器 II</a></td><td align="left">栈、数学、字符串</td><td align="left">中等</td></tr><tr><td align="left">0232</td><td align="left"><a href="https://leetcode.cn/problems/implement-queue-using-stacks/">用栈实现队列</a></td><td align="left">栈、设计、队列</td><td align="left">简单</td></tr><tr><td align="left">0394</td><td align="left"><a href="https://leetcode.cn/problems/decode-string/">字符串解码</a></td><td align="left"><a href="https://github.com/itcharge/LeetCode-Py/blob/main/Solutions/0394.%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E7%A0%81.md">Python</a></td><td align="left">栈、递归、字符串</td></tr><tr><td align="left">0032</td><td align="left"><a href="https://leetcode.cn/problems/longest-valid-parentheses/">最长有效括号</a></td><td align="left"><a href="https://github.com/itcharge/LeetCode-Py/blob/main/Solutions/0032.%20%E6%9C%80%E9%95%BF%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7.md">Python</a></td><td align="left">栈、字符串、动态规划</td></tr><tr><td align="left">0946</td><td align="left"><a href="https://leetcode.cn/problems/validate-stack-sequences/">验证栈序列</a></td><td align="left">栈、数组、模拟</td><td align="left">中等</td></tr><tr><td align="left">剑指 Offer 06</td><td align="left"><a href="https://leetcode.cn/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/">从尾到头打印链表</a></td><td align="left">栈、递归、链表、双指针</td><td align="left">简单</td></tr><tr><td align="left">0071</td><td align="left"><a href="https://leetcode.cn/problems/simplify-path/">简化路径</a></td><td align="left"></td><td align="left">栈、字符串</td></tr></tbody></table><h2 id="04-队列"><a href="#04-队列" class="headerlink" title="04. 队列"></a>04. 队列</h2><h3 id="队列基础题目"><a href="#队列基础题目" class="headerlink" title="队列基础题目"></a>队列基础题目</h3><table><thead><tr><th align="left">题号</th><th align="left">标题</th><th align="left">标签</th><th align="left">难度</th></tr></thead><tbody><tr><td align="left">0622</td><td align="left"><a href="https://leetcode.cn/problems/design-circular-queue/">设计循环队列</a></td><td align="left">设计、队列、数组、链表</td><td align="left">中等</td></tr><tr><td align="left">0346</td><td align="left"><a href="https://leetcode.cn/problems/moving-average-from-data-stream/">数据流中的移动平均值</a></td><td align="left">设计、队列、数组、数据流</td><td align="left">简单</td></tr><tr><td align="left">0225</td><td align="left"><a href="https://leetcode.cn/problems/implement-stack-using-queues/">用队列实现栈</a></td><td align="left">栈、设计、队列</td><td align="left">简单</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LeetCode（按分类排序，推荐刷题列表-★★★）&quot;&gt;&lt;a href=&quot;#LeetCode（按分类排序，推荐刷题列表-★★★）&quot; class=&quot;headerlink&quot; title=&quot;LeetCode（按分类排序，推荐刷题列表 ★★★）&quot;&gt;&lt;/a&gt;LeetCode</summary>
      
    
    
    
    <category term="数据结构和算法" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构刷题" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Lua快速入门</title>
    <link href="http://example.com/posts/71a33465/"/>
    <id>http://example.com/posts/71a33465/</id>
    <published>2023-04-16T15:48:46.000Z</published>
    <updated>2023-04-16T16:04:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h1><p><a href="https://wiki.luatos.com/_static/luatos-emulator/lua.html">luatOS在线测试</a></p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>变量声明：直接赋值（全局），加local只能在当前作用域里用； </p><p>没有被声明过的变量类型都是nil，值也是nil；</p><p>可以同时给多个变量赋值，比如 a,b &#x3D; 1,2</p><p>如果 a,b,c &#x3D; 1,2   则c&#x3D;nil</p><p>数值型：只有number，支持进制和科学计数法，支持乘幂符号，如2^5</p><h1 id="字符串的使用"><a href="#字符串的使用" class="headerlink" title="字符串的使用"></a>字符串的使用</h1><p>字符串：用双引号或者单引号表示，支持换行符\n</p><p>多行文本：[[……]]</p><p>字符串连接符号：”..”,如 a..b</p><p>tostring：数字转成字符串</p><p>tonumber：字符串转成数字</p><p>查看字符串长度:”#”,如 #a</p><h1 id="函数的使用"><a href="#函数的使用" class="headerlink" title="函数的使用"></a>函数的使用</h1><p>函数：</p><pre><code>function f(a,b)    print(a,b)end</code></pre><p>返回可以用return，可以返回多个值</p><h1 id="table的基本用途"><a href="#table的基本用途" class="headerlink" title="table的基本用途"></a>table的基本用途</h1><p>table：什么都可以存，a &#x3D; {1,”ac”,{},function() end};下标从1开始；</p><p>用#也可以获得table的长度</p><p>insert: 插入 ，如table.insert(a,”d”)；table.insert(a,2,”d”)</p><p>remove: 移除 ， 如 table.remove(a,2),并且返回移除的值</p><p>可以构造以字符串作为下标的table：如</p><pre><code>a = &#123;a=1,b=&quot;123&quot;,c=function()end&#125;a[&quot;a&quot;] = 1;</code></pre><p>全局表_G:所有元素都在全局表中</p><h1 id="逻辑判断"><a href="#逻辑判断" class="headerlink" title="逻辑判断"></a>逻辑判断</h1><p>逻辑判断：不等于是~&#x3D;;其他与C类似</p><p>支持 and 、or 、not</p><p>lua里数字0也代表真，nil代表假</p><p>三目运算： 如 b &gt; 10 and “yes” or “no”</p><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><pre><code>if a&gt;10 then    print(1)elseif a&gt;5 then    print(2)else     print(0)end</code></pre><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><pre><code>for i = 1,10,2 do//从1到10 步长为2    print(i)end</code></pre><p>注：在for循环里不能对i进行修改，可以break</p><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><pre><code>local n = 10while n &gt; 1 do    print(n)    n = n - 1 //lua里面不支持自减自加end</code></pre><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>string.char：可以把ascll码变为字符串</p><p>string.byte: 可以直接取出一位，如 n &#x3D; string.byte(s,2)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;运行环境&quot;&gt;&lt;a href=&quot;#运行环境&quot; class=&quot;headerlink&quot; title=&quot;运行环境&quot;&gt;&lt;/a&gt;运行环境&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://wiki.luatos.com/_static/luatos-emulator/lua.h</summary>
      
    
    
    
    <category term="游戏开发" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Lua" scheme="http://example.com/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>Unity+Vuforia识别3D物体</title>
    <link href="http://example.com/posts/1cd0ef1f/"/>
    <id>http://example.com/posts/1cd0ef1f/</id>
    <published>2023-04-03T17:28:14.000Z</published>
    <updated>2023-04-03T18:43:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h1><p>Unity2020.3.46 + Vuforia Engine 9.8.13<br>UnityAndroid设置：Project Settings–&gt;Player–&gt;<br><img src="/img/Graduation/1.png" loading="lazy"></p><p>注：导入Vuforia要耐心等待，需要一段时间。</p><h1 id="3D物体数据扫描"><a href="#3D物体数据扫描" class="headerlink" title="3D物体数据扫描"></a>3D物体数据扫描</h1><p>需要在安卓手机上安装一个Vuforia Object Scanner应用，用于3D物体的数据扫描。 <a href="https://developer.vuforia.com/downloads/tool">Scanner</a><br>下载的压缩包中不止有程序的apk文件，还有两张.pdf文件，这就是扫描物体时所必须要用的扫描基准图,打印其中的A4，并用手机安装软件。<br>将物体摆好用手机扫描：<br><img src="/img/Graduation/2.jpg" alt="扫描1" loading="lazy"><br>录制尽量多的识别点：<br><img src="/img/Graduation/3.jpg" alt="扫描2" loading="lazy"><br><img src="/img/Graduation/4.jpg" alt="扫描3" loading="lazy"></p><p>最后将得到的od文件上传到电脑。<br>来到<a href="https://developer.vuforia.com/vui/develop/licenses">官网</a>申请一个license。<br>然后来到Target Manager添加Database<br><img src="/img/Graduation/5.png" alt="Database" loading="lazy"><br>Add Target:<br><img src="/img/Graduation/6.png" alt="Target" loading="lazy"><br>然后全部选中生成unitypackage。<br><img src="/img/Graduation/7.png" alt="unitypackage" loading="lazy"></p><h1 id="Unity操作"><a href="#Unity操作" class="headerlink" title="Unity操作"></a>Unity操作</h1><p>将生成的文件导入项目中。</p><h2 id="创建场景"><a href="#创建场景" class="headerlink" title="创建场景"></a>创建场景</h2><p>创建Vuforia插件中的ARCamera和ObjectTarget，并删除原场景的MainCamera。GameObject–&gt;Vuforia Engine–&gt;<br><img src="/img/Graduation/8.png" alt="scene" loading="lazy"><br>在ARCamera下的Vuforia Behaviour中添加许可证书。<br><img src="/img/Graduation/9.png" alt="licence" loading="lazy"><br>选择ObjectTarget–&gt;Inspector界面进行设置。<br><img src="/img/Graduation/10.png" alt="obtarget" loading="lazy"><br>最后可以在下面创建想对应的模型。<br><img src="/img/Graduation/11.png" alt="model" loading="lazy"><br>（如果有多个物体对应关系，就多创建几个ObjectTarget，使用同一个事件脚本，不同target。）</p><h2 id="生成应用"><a href="#生成应用" class="headerlink" title="生成应用"></a>生成应用</h2><p>要先转换成Android平台，然后build。<br><img src="/img/Graduation/12.png" alt="build" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;版本&quot;&gt;&lt;a href=&quot;#版本&quot; class=&quot;headerlink&quot; title=&quot;版本&quot;&gt;&lt;/a&gt;版本&lt;/h1&gt;&lt;p&gt;Unity2020.3.46 + Vuforia Engine 9.8.13&lt;br&gt;UnityAndroid设置：Project Setti</summary>
      
    
    
    
    <category term="毕设" scheme="http://example.com/categories/%E6%AF%95%E8%AE%BE/"/>
    
    
    <category term="AR增强现实" scheme="http://example.com/tags/AR%E5%A2%9E%E5%BC%BA%E7%8E%B0%E5%AE%9E/"/>
    
  </entry>
  
  <entry>
    <title>勇士传说(一)</title>
    <link href="http://example.com/posts/96e04cc8/"/>
    <id>http://example.com/posts/96e04cc8/</id>
    <published>2023-03-24T14:08:44.000Z</published>
    <updated>2023-03-24T14:20:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h1><p>《勇士传说》是一款横版卷轴动作类游戏，是来自M_Studio老师的教程，在这里会记录一个零基础小白的学习历程和学习过程中的思考。</p><h1 id="学习历程（已完成）"><a href="#学习历程（已完成）" class="headerlink" title="学习历程（已完成）"></a>学习历程（已完成）</h1><ul><li>导入素材（人物和场景）</li><li>了解编辑器窗口布局设定</li><li>了解熟悉 Tilemap 瓦片地图功能</li><li>素材图片切割方法</li><li>叠层概念</li><li>创建 Rule Tile 实现快速场景绘制</li><li>创建 Animated Tile 实现动态瀑布效果</li></ul><h1 id="学习中遇到的问题"><a href="#学习中遇到的问题" class="headerlink" title="学习中遇到的问题"></a>学习中遇到的问题</h1><ul><li>矩形工具选中删除（已解决）：按住shift</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h1&gt;&lt;p&gt;《勇士传说》是一款横版卷轴动作类游戏，是来自M_Studio老师的教程，在这里会记录一个零基础小白的学习历程和学习过程中的思</summary>
      
    
    
    
    <category term="游戏开发" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="勇士传说" scheme="http://example.com/tags/%E5%8B%87%E5%A3%AB%E4%BC%A0%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>百奥春招笔试题</title>
    <link href="http://example.com/posts/fc1d6a7/"/>
    <id>http://example.com/posts/fc1d6a7/</id>
    <published>2023-03-05T07:36:17.000Z</published>
    <updated>2023-03-05T08:00:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目情况"><a href="#题目情况" class="headerlink" title="题目情况"></a>题目情况</h1><p>前两题都算是送分题，第一题求和，第二题是最大对角线和。第三题是求包含0~max的最短子串长度，第四题是三角形最小路径和。</p><h1 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h1><p>给你一串数字nums和它的最大值maxnum，求得包含0~maxnum所有值的最短子串长度，并返回该长度，若不存在，则返回-1。</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>我是用哈希表结合双指针来做的，从前往后依次读入，并更新哈希表，若该数在哈希表中value&#x3D;0，则将r指针指向该位置，同时去判断l指针所指的树在哈希表中的value值是否大于1，若是，则l指针右移，value值减一。遍历完数组可以得到包含该数组所有不重复元素的最小子串，再进行判断是否包含0~maxnum。若是则返回r-l+1，否则返回-1。</p><h1 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h1><p>给出一个三角形（数据数组），找出从上往下的最小路径和。每一步只能移动到下一行中的相邻结点上。</p><h2 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h2><p>因为我在宿舍做题并不是很专注，所以花了一段时间想动态规划并没有想出来，就用深搜去暴力了。答题结束后，这个动规方程就不难想出来了hhh。</p><p>dp[i][j]表示从第一行的顶点走到坐标为(i,j)位置的最短路径。dp[i][j]&#x3D;min(dp[i-1][j], dp[i-1][j-1])+triangle[i][j];<br>注意边界情况即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目情况&quot;&gt;&lt;a href=&quot;#题目情况&quot; class=&quot;headerlink&quot; title=&quot;题目情况&quot;&gt;&lt;/a&gt;题目情况&lt;/h1&gt;&lt;p&gt;前两题都算是送分题，第一题求和，第二题是最大对角线和。第三题是求包含0~max的最短子串长度，第四题是三角形最小路径和。&lt;/</summary>
      
    
    
    
    <category term="数据结构和算法" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="笔试题" scheme="http://example.com/tags/%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题第一天</title>
    <link href="http://example.com/posts/ff055d60/"/>
    <id>http://example.com/posts/ff055d60/</id>
    <published>2023-03-05T02:16:49.000Z</published>
    <updated>2023-03-05T04:41:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="（热题HOT-100）1-两数之和"><a href="#（热题HOT-100）1-两数之和" class="headerlink" title="（热题HOT 100）1.两数之和"></a>（热题HOT 100）1.两数之和</h1><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><h2 id="思路和时间复杂度"><a href="#思路和时间复杂度" class="headerlink" title="思路和时间复杂度"></a>思路和时间复杂度</h2><p>思路：用双指针，先排序并记录原来对应位置，设置头指针和尾指针if(sum &lt; target) left++；反之 right++；直到sum与target相等。<br>时间复杂度： 排序为O(nlogn)，指针移动为O(n)，所以时间复杂度为O(nlogn)。</p><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><pre><code>class Solution &#123;public:    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123;        int n = nums.size();        vector&lt;int&gt; id;        for(int i = 0;i &lt; n;i++) id.push_back(i);        sort(id.begin(),id.end(),[nums, id](int i, int j)&#123;            return nums[id[i]] &lt; nums[id[j]];        &#125;);        int l = 0,r = n-1;        vector&lt;int&gt; ret;        while(l &lt; r)&#123;            int sum = nums[id[l]] + nums[id[r]];            if(sum == target)&#123;                ret.push_back(id[l]);                ret.push_back(id[r]);                break;            &#125;else if(sum &lt; target)&#123;                l++;            &#125;else if(sum &gt; target)&#123;                r--;            &#125;        &#125;        return ret;    &#125;&#125;;</code></pre><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>也可以用哈希表来做，空间换时间。</p><h1 id="（热题HOT-100）2-两数相加"><a href="#（热题HOT-100）2-两数相加" class="headerlink" title="（热题HOT 100）2.两数相加"></a>（热题HOT 100）2.两数相加</h1><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><h2 id="思路和时间复杂度-1"><a href="#思路和时间复杂度-1" class="headerlink" title="思路和时间复杂度"></a>思路和时间复杂度</h2><p>思路：竖式加法，考虑进位。<br>时间复杂度： O(n)</p><h2 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h2><pre><code>/** * Definition for singly-linked list. * struct ListNode &#123; *     int val; *     ListNode *next; *     ListNode() : val(0), next(nullptr) &#123;&#125; *     ListNode(int x) : val(x), next(nullptr) &#123;&#125; *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125; * &#125;; */class Solution &#123;public:    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) &#123;        ListNode* H = new ListNode();        ListNode* p = H;        int carry = 0;        while(l1 || l2 || carry)&#123;            int val = 0;            if(l1) &#123;                val += l1-&gt;val;                l1 = l1-&gt;next;            &#125;            if(l2) &#123;                val += l2-&gt;val;                l2 = l2-&gt;next;            &#125;            val += carry;            carry = val/10;            ListNode* node = new ListNode(val % 10);            p-&gt;next = node;            p = node;        &#125;        return(H-&gt;next);                                              &#125;&#125;;</code></pre><h1 id="（热题HOT-100）3-无重复字符的最长子串"><a href="#（热题HOT-100）3-无重复字符的最长子串" class="headerlink" title="（热题HOT 100）3.无重复字符的最长子串"></a>（热题HOT 100）3.无重复字符的最长子串</h1><p>给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。</p><h2 id="思路和时间复杂度-2"><a href="#思路和时间复杂度-2" class="headerlink" title="思路和时间复杂度"></a>思路和时间复杂度</h2><p>思路：哈希表记录出现次数，通过前后指针移动遍历。<br>时间复杂度： O(n)</p><h2 id="核心代码-2"><a href="#核心代码-2" class="headerlink" title="核心代码"></a>核心代码</h2><pre><code>class Solution &#123;public:    int lengthOfLongestSubstring(string s) &#123;        int n = s.length();        int ret = 0;        int l = 0;        unordered_map&lt;char,int&gt; count;        for(int r = 0;r &lt; n;r++)&#123;            count[s[r]]++;            while(count[s[r]] &gt; 1)&#123;                count[s[l++]]--;            &#125;            ret = max(ret, r-l+1);        &#125;        return ret;    &#125;&#125;;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;（热题HOT-100）1-两数之和&quot;&gt;&lt;a href=&quot;#（热题HOT-100）1-两数之和&quot; class=&quot;headerlink&quot; title=&quot;（热题HOT 100）1.两数之和&quot;&gt;&lt;/a&gt;（热题HOT 100）1.两数之和&lt;/h1&gt;&lt;p&gt;给定一个整数数组 n</summary>
      
    
    
    
    <category term="数据结构和算法" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode 刷题" scheme="http://example.com/tags/LeetCode-%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>基于增强现实的智慧校园交互平台</title>
    <link href="http://example.com/posts/1d4fcfd4/"/>
    <id>http://example.com/posts/1d4fcfd4/</id>
    <published>2023-02-13T08:56:11.000Z</published>
    <updated>2023-02-16T03:42:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本内容与要求"><a href="#基本内容与要求" class="headerlink" title="基本内容与要求"></a>基本内容与要求</h1><p>利用增强现实技术，实现智慧校园信息可视化及交互</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本内容与要求&quot;&gt;&lt;a href=&quot;#基本内容与要求&quot; class=&quot;headerlink&quot; title=&quot;基本内容与要求&quot;&gt;&lt;/a&gt;基本内容与要求&lt;/h1&gt;&lt;p&gt;利用增强现实技术，实现智慧校园信息可视化及交互&lt;/p&gt;
</summary>
      
    
    
    
    <category term="毕设" scheme="http://example.com/categories/%E6%AF%95%E8%AE%BE/"/>
    
    
    <category term="AR增强现实" scheme="http://example.com/tags/AR%E5%A2%9E%E5%BC%BA%E7%8E%B0%E5%AE%9E/"/>
    
  </entry>
  
  <entry>
    <title>Web前端学习之jQuery学习（九）jQuery 其他方法</title>
    <link href="http://example.com/posts/d81dec03/"/>
    <id>http://example.com/posts/d81dec03/</id>
    <published>2022-04-22T09:30:17.000Z</published>
    <updated>2022-04-24T13:36:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jQuery-拷贝对象"><a href="#jQuery-拷贝对象" class="headerlink" title="jQuery 拷贝对象"></a>jQuery 拷贝对象</h1><p>如果想要把某个对象拷贝（合并）给另一个对象使用，此时可以使用$.extend() 方法。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><pre class="language-js" data-language="js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">[</span>deep<span class="token punctuation">]</span><span class="token punctuation">,</span>target<span class="token punctuation">,</span>object1<span class="token punctuation">,</span><span class="token punctuation">[</span>objectN<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><ol><li>deep: 如果设为true为深拷贝，默认为false 浅拷贝</li><li>target: 要拷贝的目标对象</li><li>object1: 待拷贝到第一个对象的对象</li><li>objectN: 待拷贝到第N个对象的对象</li><li>浅拷贝是把被拷贝的对象<strong>复杂数据类型中的地址</strong>拷贝给目标对象，修改目标对象会影响被拷贝对象</li><li>深拷贝，前面加 true ,完全克隆（拷贝的对象，而不是地址），修改目标对象不会影响被拷贝对象。</li></ol><h1 id="jQuery-多库共存"><a href="#jQuery-多库共存" class="headerlink" title="jQuery 多库共存"></a>jQuery 多库共存</h1><h2 id="问题概述"><a href="#问题概述" class="headerlink" title="问题概述"></a>问题概述</h2><p>jQuery 使用$作为标识符，随着jQuery的流行，其他js库也会用$作为标识符，这样一起使用会引起冲突。</p><h2 id="客观需求"><a href="#客观需求" class="headerlink" title="客观需求"></a>客观需求</h2><p>需要一个解决方案，让jQuery和其他的js库不存在冲突，可以同时存在，这就叫做多库共存。</p><h2 id="jQuery-解决方案"><a href="#jQuery-解决方案" class="headerlink" title="jQuery 解决方案"></a>jQuery 解决方案</h2><ol><li>把里面的 $ 符号 统一改为 jQuery。比如 jQuery(“div”)</li><li>jQuery 变量规定新的名称：$.noConflict()     var xx &#x3D; $.noConflict();</li></ol><h1 id="jQuery-插件"><a href="#jQuery-插件" class="headerlink" title="jQuery 插件"></a>jQuery 插件</h1><p>jQuery 功能比较有限，想要更复杂的特效效果，可以借助 jQuery 插件完成</p><p>注意：这些插件也是依赖于 jQuery 来完成的，所以必须先引入 jQuery 文件，因此也称为 jQuery 插件。</p><h2 id="jQuery-插件常用网站"><a href="#jQuery-插件常用网站" class="headerlink" title="jQuery 插件常用网站"></a>jQuery 插件常用网站</h2><ol><li><a href="http://www.jq22.com/">jQuery插件库</a></li><li><a href="http://www.htmleaf.com/">jQuery之家</a></li></ol><h2 id="jQuery-插件使用步骤"><a href="#jQuery-插件使用步骤" class="headerlink" title="jQuery 插件使用步骤"></a>jQuery 插件使用步骤</h2><ol><li>引入相关文件。（jQuery 文件和插件文件）</li><li>复制相关html、css、js（调用插件）。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;jQuery-拷贝对象&quot;&gt;&lt;a href=&quot;#jQuery-拷贝对象&quot; class=&quot;headerlink&quot; title=&quot;jQuery 拷贝对象&quot;&gt;&lt;/a&gt;jQuery 拷贝对象&lt;/h1&gt;&lt;p&gt;如果想要把某个对象拷贝（合并）给另一个对象使用，此时可以使用$.ex</summary>
      
    
    
    
    <category term="Web前端学习" scheme="http://example.com/categories/Web%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="jQuery学习" scheme="http://example.com/tags/jQuery%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Web前端学习之jQuery学习（八）jQuery 事件</title>
    <link href="http://example.com/posts/ae82dbbc/"/>
    <id>http://example.com/posts/ae82dbbc/</id>
    <published>2022-04-22T09:30:01.000Z</published>
    <updated>2022-04-24T13:44:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单个事件注册"><a href="#单个事件注册" class="headerlink" title="单个事件注册"></a>单个事件注册</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><pre class="language-js" data-language="js"><code class="language-js">element<span class="token punctuation">.</span><span class="token function">事件</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> 事件处理程序 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>其他事件和原生基本一致。</p><p>比如mouseover、mouseout、focus、blur等。</p><h1 id="事件处理-on-绑定事件"><a href="#事件处理-on-绑定事件" class="headerlink" title="事件处理 on() 绑定事件"></a>事件处理 on() 绑定事件</h1><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><pre class="language-js" data-language="js"><code class="language-js">element<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>events<span class="token punctuation">,</span><span class="token punctuation">[</span>selector<span class="token punctuation">]</span><span class="token punctuation">,</span>fn<span class="token punctuation">)</span></code></pre><ol><li>events：一个或多个用空格分隔的事件类型，如”click”或”keydown”。</li><li>selector：元素的子元素选择器</li><li>fn：回调函数，即绑定在元素身上的监听函数。</li></ol><h2 id="on-方法实现事件委派"><a href="#on-方法实现事件委派" class="headerlink" title="on() 方法实现事件委派"></a>on() 方法实现事件委派</h2><p>事件委派的定义就是，把原来嫁给子元素身上的事件绑定在父元素身上，就是把事件委派给父元素。</p><p>例如：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hello world!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="on-给动态元素绑定事件"><a href="#on-给动态元素绑定事件" class="headerlink" title="on() 给动态元素绑定事件"></a>on() 给动态元素绑定事件</h2><p>动态创建的元素，click() 没有办法绑定事件，on() 可以给动态生成的元素绑定事件</p><h1 id="事件处理-off-解绑事件"><a href="#事件处理-off-解绑事件" class="headerlink" title="事件处理 off() 解绑事件"></a>事件处理 off() 解绑事件</h1><p>off() 方法可以移除通过 on() 方法添加的事件处理程序。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//解绑p元素所有事件处理程序</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//解绑p元素上面的点击事件 后面的 foo 是监听函数名</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//解绑事件委托</span></code></pre><p>如果有的时间只想触发一次，可以使用 one() 来绑定事件。</p><h1 id="自动触发事件-trigger"><a href="#自动触发事件-trigger" class="headerlink" title="自动触发事件 trigger()"></a>自动触发事件 trigger()</h1><p>有些时间希望自动触发，比如轮播图自动播放功能跟点击右侧按钮一致。可以利用定时器自动触发右侧按钮点击事件，不必鼠标点击触发。</p><pre class="language-js" data-language="js"><code class="language-js">element<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//第一种简写形式</span>element<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">)</span> <span class="token comment">//第二种自动触发模式</span>element<span class="token punctuation">.</span><span class="token function">triggerHandler</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token comment">//第三种自动触发模式，不会有元素默认行为</span></code></pre><h1 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h1><p>事件被触发，就会有事件对象的产生。</p><pre class="language-js" data-language="js"><code class="language-js">element<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>events<span class="token punctuation">,</span><span class="token punctuation">[</span>selector<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>阻止默认行为：<code>event.preventDefault()</code> 或者 <code>return false</code></p><p>阻止冒泡：<code>event.stopPropagation()</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;单个事件注册&quot;&gt;&lt;a href=&quot;#单个事件注册&quot; class=&quot;headerlink&quot; title=&quot;单个事件注册&quot;&gt;&lt;/a&gt;单个事件注册&lt;/h1&gt;&lt;h2 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Web前端学习" scheme="http://example.com/categories/Web%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="jQuery学习" scheme="http://example.com/tags/jQuery%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Web前端学习之jQuery学习（七）jQuery 的常用 API 之 jQuery 尺寸和位置方法</title>
    <link href="http://example.com/posts/654eb08d/"/>
    <id>http://example.com/posts/654eb08d/</id>
    <published>2022-04-22T03:32:18.000Z</published>
    <updated>2022-04-24T13:27:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jQuery-尺寸"><a href="#jQuery-尺寸" class="headerlink" title="jQuery 尺寸"></a>jQuery 尺寸</h1><ul><li>设置或者获取高度</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//带参数表示设置高度</span><span class="token function">$</span><span class="token punctuation">(</span>“img”<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不带参数获取高度</span><span class="token function">$</span><span class="token punctuation">(</span>“img”<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>获取网页的可视区宽高</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//获取可视区宽度</span><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取可视区高度</span><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="jQuery-位置"><a href="#jQuery-位置" class="headerlink" title="jQuery 位置"></a>jQuery 位置</h1><ul><li><code>offset</code>方法获取元素距离<code>document</code>的位置</li><li><code>position</code>方法获取的是元素距离<code>定位父元素</code>的位置</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//获取元素距离document的位置,返回值为对象：&#123;left:100, top:100&#125;</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取相对于其最近的有定位的父元素的位置。</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><code>scrollTop</code>与<code>scrollLeft</code> 方法,设置或者获取垂直滚动条的位置</li></ul><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//获取页面被卷曲的高度</span><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取页面被卷曲的宽度</span><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置页面被卷曲的高度</span><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置页面被卷曲的宽度</span><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollLeft</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;jQuery-尺寸&quot;&gt;&lt;a href=&quot;#jQuery-尺寸&quot; class=&quot;headerlink&quot; title=&quot;jQuery 尺寸&quot;&gt;&lt;/a&gt;jQuery 尺寸&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;设置或者获取高度&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;lang</summary>
      
    
    
    
    <category term="Web前端学习" scheme="http://example.com/categories/Web%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="jQuery学习" scheme="http://example.com/tags/jQuery%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Web前端学习之jQuery学习（六）jQuery 的常用 API 之 jQuery 元素操作</title>
    <link href="http://example.com/posts/2b884c0c/"/>
    <id>http://example.com/posts/2b884c0c/</id>
    <published>2022-04-22T03:26:45.000Z</published>
    <updated>2022-04-24T13:27:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>主要是<strong>遍历</strong>、创建、添加、删除元素操作。</p><h1 id="遍历元素"><a href="#遍历元素" class="headerlink" title="遍历元素"></a>遍历元素</h1><p>jQuery 隐式迭代是对同一类元素做了同样的操作。</p><h2 id="语法1："><a href="#语法1：" class="headerlink" title="语法1："></a>语法1：</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> domEle</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> xxx<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><ol><li>each()方法遍历匹配到的每一个元素。主要用 DOM 处理。each 每一个</li><li>里面的回调函数有2个参数：index 是每个元素的索引号；demEle 是每个 DOM 元素对象，不是jQuery 对象</li><li>所以想要使用 jQuery 方法，需要给这个 DOM 元素转换为 jQuery 对象 $(domEle)</li></ol><h2 id="语法2："><a href="#语法2：" class="headerlink" title="语法2："></a>语法2：</h2><pre class="language-js" data-language="js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> xxx<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><ol><li>$.each()方法可用于遍历任何对象。主要用于数据处理，比如数组，对象</li><li>里面有2个参数：index 是每个元素的索引号；element 是遍历内容</li></ol><h1 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h1><h2 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;li>&lt;/li>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>动态创建了一个<code>&lt;li&gt;</code></p><h1 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h1><h2 id="内部添加"><a href="#内部添加" class="headerlink" title="内部添加"></a>内部添加</h2><pre class="language-js" data-language="js"><code class="language-js">element<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"内容"</span><span class="token punctuation">)</span> <span class="token comment">//添加到元素内部的最后面</span>element<span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span><span class="token string">"内容"</span><span class="token punctuation">)</span> <span class="token comment">//添加到元素内部的最前面</span></code></pre><p>内部添加元素，生成之后，他们是父子关系。</p><h2 id="外部添加"><a href="#外部添加" class="headerlink" title="外部添加"></a>外部添加</h2><pre class="language-js" data-language="js"><code class="language-js">element<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token string">"内容"</span><span class="token punctuation">)</span>  <span class="token comment">//把内容放入目标元素后面</span>element<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token string">"内容"</span><span class="token punctuation">)</span>  <span class="token comment">//把内容放入目标元素前面</span></code></pre><p>外部添加元素，生成之后，他们是兄弟关系。</p><h1 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h1><pre class="language-js" data-language="js"><code class="language-js">element<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//删除元素本身</span>element<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//删除元素集合中所有的子节点</span>element<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token comment">//清空匹配的元素内容</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;主要是&lt;strong&gt;遍历&lt;/strong&gt;、创建、添加、删除元素操作。&lt;/p&gt;
&lt;h1 id=&quot;遍历元素&quot;&gt;&lt;a href=&quot;#遍历元素&quot; class=&quot;headerlink&quot; title=&quot;遍历元素&quot;&gt;&lt;/a&gt;遍历元素&lt;/h1&gt;&lt;p&gt;jQuery 隐式迭代是对同一类元素</summary>
      
    
    
    
    <category term="Web前端学习" scheme="http://example.com/categories/Web%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="jQuery学习" scheme="http://example.com/tags/jQuery%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Web前端学习之jQuery学习（五）jQuery 的常用 API 之 jQuery 内容文本值</title>
    <link href="http://example.com/posts/38a3be14/"/>
    <id>http://example.com/posts/38a3be14/</id>
    <published>2022-04-22T02:59:01.000Z</published>
    <updated>2022-04-24T13:27:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>主要针对元素的<strong>内容</strong>还有<strong>表单的值</strong>操作</p><h1 id="普通元素内容-html-（相当于原生-inner-HTML）"><a href="#普通元素内容-html-（相当于原生-inner-HTML）" class="headerlink" title="普通元素内容 html() （相当于原生 inner HTML）"></a>普通元素内容 html() （相当于原生 inner HTML）</h1><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//获取元素的内容</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">"内容"</span><span class="token punctuation">)</span> <span class="token comment">//设置元素的内容</span></code></pre><h1 id="普通元素文本内容-text-（相当于原生-inner-Text）"><a href="#普通元素文本内容-text-（相当于原生-inner-Text）" class="headerlink" title="普通元素文本内容 text() （相当于原生 inner Text）"></a>普通元素文本内容 text() （相当于原生 inner Text）</h1><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//获取元素的文本内容</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"文本内容"</span><span class="token punctuation">)</span>  <span class="token comment">//设置元素的文本内容</span></code></pre><h1 id="表单的值-val-（相当于原生-value）"><a href="#表单的值-val-（相当于原生-value）" class="headerlink" title="表单的值 val() （相当于原生 value）"></a>表单的值 val() （相当于原生 value）</h1><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//获取表单的值</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">"表单值"</span><span class="token punctuation">)</span>  <span class="token comment">//设置表单的值</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;主要针对元素的&lt;strong&gt;内容&lt;/strong&gt;还有&lt;strong&gt;表单的值&lt;/strong&gt;操作&lt;/p&gt;
&lt;h1 id=&quot;普通元素内容-html-（相当于原生-inner-HTML）&quot;&gt;&lt;a href=&quot;#普通元素内容-html-（相当于原生-inner-HTML）&quot;</summary>
      
    
    
    
    <category term="Web前端学习" scheme="http://example.com/categories/Web%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="jQuery学习" scheme="http://example.com/tags/jQuery%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Web前端学习之jQuery学习（四）jQuery 的常用 API 之 jQuery 属性操作</title>
    <link href="http://example.com/posts/25fb7f05/"/>
    <id>http://example.com/posts/25fb7f05/</id>
    <published>2022-04-21T13:11:06.000Z</published>
    <updated>2022-04-24T13:27:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设置或获取元素固有属性值-prop"><a href="#设置或获取元素固有属性值-prop" class="headerlink" title="设置或获取元素固有属性值 prop()"></a>设置或获取元素固有属性值 prop()</h1><p>所谓元素固有属性就是元素本身自带的属性，比如<a>元素里面的 href 。</p><h2 id="获取属性语法"><a href="#获取属性语法" class="headerlink" title="获取属性语法"></a>获取属性语法</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"属性"</span><span class="token punctuation">)</span></code></pre><h2 id="设置属性语法"><a href="#设置属性语法" class="headerlink" title="设置属性语法"></a>设置属性语法</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"属性"</span><span class="token punctuation">,</span><span class="token string">"属性值"</span><span class="token punctuation">)</span></code></pre><h1 id="设置或获取元素自定义属性值-attr"><a href="#设置或获取元素自定义属性值-attr" class="headerlink" title="设置或获取元素自定义属性值 attr()"></a>设置或获取元素自定义属性值 attr()</h1><p>用户自己给元素添加的属性成为自定义属性。</p><h2 id="获取属性语法-1"><a href="#获取属性语法-1" class="headerlink" title="获取属性语法"></a>获取属性语法</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"属性"</span><span class="token punctuation">)</span></code></pre><h2 id="设置属性语法-1"><a href="#设置属性语法-1" class="headerlink" title="设置属性语法"></a>设置属性语法</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"属性"</span><span class="token punctuation">,</span><span class="token string">"属性值"</span><span class="token punctuation">)</span></code></pre><h1 id="数据缓存"><a href="#数据缓存" class="headerlink" title="数据缓存"></a>数据缓存</h1><p>data() 方法可以在指定的元素上存取数据，并不会修改 DOM 元素结构。一旦页面刷新，之前存放的数据将被移除。</p><h2 id="附加数据算法"><a href="#附加数据算法" class="headerlink" title="附加数据算法"></a>附加数据算法</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">)</span></code></pre><h2 id="获取数据语法"><a href="#获取数据语法" class="headerlink" title="获取数据语法"></a>获取数据语法</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span></code></pre><p>还可以读取 HTML5 自定义属性 data-index ，得到的是数字型。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设置或获取元素固有属性值-prop&quot;&gt;&lt;a href=&quot;#设置或获取元素固有属性值-prop&quot; class=&quot;headerlink&quot; title=&quot;设置或获取元素固有属性值 prop()&quot;&gt;&lt;/a&gt;设置或获取元素固有属性值 prop()&lt;/h1&gt;&lt;p&gt;所谓元素固有</summary>
      
    
    
    
    <category term="Web前端学习" scheme="http://example.com/categories/Web%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="jQuery学习" scheme="http://example.com/tags/jQuery%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Web前端学习之jQuery学习（三）jQuery 的常用 API 之 jQuery 效果</title>
    <link href="http://example.com/posts/8a32779a/"/>
    <id>http://example.com/posts/8a32779a/</id>
    <published>2022-04-20T04:21:30.000Z</published>
    <updated>2022-04-24T13:27:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jQuery-常见效果"><a href="#jQuery-常见效果" class="headerlink" title="jQuery 常见效果"></a>jQuery 常见效果</h1><p>**jQuery **给我们封装了很多动画效果，最为常见的有：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 显示隐藏</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 滑动</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">slideToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 淡入淡出</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">fadeOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">fadeToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">fadeTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 自定义动画</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="显示隐藏效果"><a href="#显示隐藏效果" class="headerlink" title="显示隐藏效果"></a>显示隐藏效果</h1><h2 id="显示语法规范"><a href="#显示语法规范" class="headerlink" title="显示语法规范"></a>显示语法规范</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">[</span>speed<span class="token punctuation">,</span><span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="显示参数"><a href="#显示参数" class="headerlink" title="显示参数"></a>显示参数</h2><ol><li>参数可以省略，无动画直接显示。</li><li>speed：三种预定速度之一的字符串(“slow”,”nomal”,or “fast”)或表示动画时长的毫秒数值（如：100）。</li><li>easing：(Optional)用来指定切换效果，默认是”swing”,可用参数”linear”。</li><li>fn：回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ol><h2 id="隐藏语法规范"><a href="#隐藏语法规范" class="headerlink" title="隐藏语法规范"></a>隐藏语法规范</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">[</span>speed<span class="token punctuation">,</span><span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="隐藏参数"><a href="#隐藏参数" class="headerlink" title="隐藏参数"></a>隐藏参数</h2><ol><li>参数可以省略，无动画直接显示。</li><li>speed：三种预定速度之一的字符串(“slow”,”nomal”,or “fast”)或表示动画时长的毫秒数值（如：100）。</li><li>easing：(Optional)用来指定切换效果，默认是”swing”,可用参数”linear”。</li><li>fn：回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ol><h2 id="切换语法规范"><a href="#切换语法规范" class="headerlink" title="切换语法规范"></a>切换语法规范</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">[</span>speed<span class="token punctuation">,</span><span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="切换参数"><a href="#切换参数" class="headerlink" title="切换参数"></a>切换参数</h2><ol><li>参数可以省略，无动画直接显示。</li><li>speed：三种预定速度之一的字符串(“slow”,”nomal”,or “fast”)或表示动画时长的毫秒数值（如：100）。</li><li>easing：(Optional)用来指定切换效果，默认是”swing”,可用参数”linear”。</li><li>fn：回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ol><h1 id="滑动效果"><a href="#滑动效果" class="headerlink" title="滑动效果"></a>滑动效果</h1><p>下滑：slideDown()<br>上滑：slideUp()<br>滑动切换：slideToggle()</p><p>语法以及参数与<em>显示隐藏效果</em>一致。</p><h1 id="事件切换"><a href="#事件切换" class="headerlink" title="事件切换"></a>事件切换</h1><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">hover</span><span class="token punctuation">(</span>over<span class="token punctuation">.</span> <span class="token punctuation">,</span> out<span class="token punctuation">.</span><span class="token punctuation">)</span></code></pre><ol><li>over.鼠标移到元素上要触发的函数(相当于 mouseenter )</li><li>out.鼠标移出元素要触发的函数(相当于 mouseleave )</li></ol><h1 id="动画队列及其停止排队方法"><a href="#动画队列及其停止排队方法" class="headerlink" title="动画队列及其停止排队方法"></a>动画队列及其停止排队方法</h1><h2 id="动画或效果队列"><a href="#动画或效果队列" class="headerlink" title="动画或效果队列"></a>动画或效果队列</h2><p>动画或者效果一旦触发就会执行，如果多次触发，就造成多个动画或者效果排队执行。</p><h2 id="停止排队"><a href="#停止排队" class="headerlink" title="停止排队"></a>停止排队</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ol><li>stop()方法用于停止动画或效果</li><li>注意：stop()写到动画或者效果的前面，相当于停止结束上一次的动画。</li></ol><h1 id="淡入淡出效果"><a href="#淡入淡出效果" class="headerlink" title="淡入淡出效果"></a>淡入淡出效果</h1><p>淡入：fadeIn()<br>淡出：fadeOut()<br>淡入淡出切换：fadeToggle()</p><p>语法以及参数也与<em>显示隐藏效果</em>一致。</p><h2 id="渐进方式调整到指定的不透明度"><a href="#渐进方式调整到指定的不透明度" class="headerlink" title="渐进方式调整到指定的不透明度"></a>渐进方式调整到指定的不透明度</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">fadeTo</span><span class="token punctuation">(</span><span class="token punctuation">[</span>speed<span class="token punctuation">]</span><span class="token punctuation">,</span>opacity<span class="token punctuation">,</span><span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="效果参数"><a href="#效果参数" class="headerlink" title="效果参数"></a>效果参数</h2><p><code>opacity</code>透明度必须写，取值 0~1 之间。</p><p>其余参数与<em>显示隐藏效果</em>一致。</p><h1 id="自定义动画-animate"><a href="#自定义动画-animate" class="headerlink" title="自定义动画 animate"></a>自定义动画 animate</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">animate</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span><span class="token punctuation">[</span>speed<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p><code>params</code>:<strong>想要更改的样式属性，以对象形式传递，必须写。属性名可以不用带引号，如果是复合属性则需要采取驼峰命名法 borderLeft。</strong>其余参数可以省略，与<em>显示隐藏效果</em>一致。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>left<span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>top<span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>opacity<span class="token operator">:</span> <span class="token number">.4</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;jQuery-常见效果&quot;&gt;&lt;a href=&quot;#jQuery-常见效果&quot; class=&quot;headerlink&quot; title=&quot;jQuery 常见效果&quot;&gt;&lt;/a&gt;jQuery 常见效果&lt;/h1&gt;&lt;p&gt;**jQuery **给我们封装了很多动画效果，最为常见的有：&lt;/p</summary>
      
    
    
    
    <category term="Web前端学习" scheme="http://example.com/categories/Web%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="jQuery学习" scheme="http://example.com/tags/jQuery%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Web前端学习之jQuery学习（二）jQuery 的常用 API 之 jQuery 选择器与样式操作</title>
    <link href="http://example.com/posts/8878a5d1/"/>
    <id>http://example.com/posts/8878a5d1/</id>
    <published>2022-04-19T13:12:44.000Z</published>
    <updated>2022-04-24T13:27:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jQuery-选择器"><a href="#jQuery-选择器" class="headerlink" title="jQuery 选择器"></a>jQuery 选择器</h1><ul><li>jQuery选择器是jQuery为我们提供的一组<code>方法</code>，让我们更加方便的获取到页面中的元素。<br>注意：jQuery选择器返回的是<code>jQuery对象</code>。</li><li>jQuery选择器有很多，基本兼容了CSS1到CSS3所有的选择器，并且jQuery还添加了很多扩展性的选择器。</li><li>jQuery选择器虽然很多，但是选择器之间可以相互替代，就是说获取一个元素，你会有很多种方法获取到。<br>所以我们平时真正能用到的只是少数的最常用的选择器。</li></ul><h2 id="jQuery-基础选择器"><a href="#jQuery-基础选择器" class="headerlink" title="jQuery 基础选择器"></a>jQuery 基础选择器</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"选择器"</span><span class="token punctuation">)</span> <span class="token comment">// 里面选择器直接写CSS选择器即可，但是要加引号</span></code></pre><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>ID选择器</td><td>$(“#id”);</td><td>获取指定ID的元素</td></tr><tr><td>全选选择器</td><td>$(“*”)</td><td>匹配所有元素</td></tr><tr><td>类选择器</td><td>$(“.class”);</td><td>获取同一类class的元素</td></tr><tr><td>标签选择器</td><td>$(“div”);</td><td>获取同一类标签的所有元素</td></tr><tr><td>并集选择器</td><td>$(“div,p,li”);</td><td>使用逗号分隔，只要符合条件之一就可。</td></tr><tr><td>交集选择器</td><td>$(“div.redClass”);</td><td>获取class为redClass的div元素</td></tr></tbody></table><h2 id="jQuery-层级选择器"><a href="#jQuery-层级选择器" class="headerlink" title="jQuery 层级选择器"></a>jQuery 层级选择器</h2><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>子代选择器</td><td>$(“ul&gt;li”);</td><td>使用&gt;号，获取儿子层级的元素，注意，并不会获取孙子层级的元素</td></tr><tr><td>后代选择器</td><td>$(“ul li”);</td><td>使用空格，代表后代选择器，获取ul下的所有li元素，包括孙子等</td></tr></tbody></table><h2 id="隐式迭代"><a href="#隐式迭代" class="headerlink" title="隐式迭代"></a>隐式迭代</h2><p>遍历内部 DOM 元素（伪数组形式存储）的过程就叫做<strong>隐式迭代</strong>。简单理解一下就是给匹配到的所有元素进行循环遍历，执行相应的方法，不需要我们进行循环，简化了我们的操作，方便调用。</p><h2 id="jQuery-筛选选择器"><a href="#jQuery-筛选选择器" class="headerlink" title="jQuery 筛选选择器"></a>jQuery 筛选选择器</h2><table><thead><tr><th>语法</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>:first</td><td>$(“li:first”)</td><td>获取第一个 li 元素</td></tr><tr><td>:last</td><td>$(“li:last”)</td><td>获取最后一个 li 元素</td></tr><tr><td>eq(index)</td><td>$(“li:eq(2)”)</td><td>获取到的 li 元素中，选择索引号为2的元素，索引号 index 从0开始</td></tr><tr><td>:odd</td><td>$(“li:odd”)</td><td>获取到的元素中，选择索引号为奇数的元素</td></tr><tr><td>:even</td><td>$(“li:even”)</td><td>获取到的元素中，选择索引号为偶数的元素</td></tr></tbody></table><p>想要查看更多选择器，请到<a href="https://www.jquery123.com/category/selectors/">这里</a>学习</p><h2 id="jQuery-筛选方法"><a href="#jQuery-筛选方法" class="headerlink" title="jQuery 筛选方法"></a>jQuery 筛选方法</h2><table><thead><tr><th>语法</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>children(selector)</td><td>$(“ul”).children(“li”)</td><td>相当于$(“ul&gt;li”)，子类选择器</td></tr><tr><td>find(selector)</td><td>$(“ul”).find(“li”);</td><td>相当于$(“ul li”),后代选择器</td></tr><tr><td>siblings(selector)</td><td>$(“#first”).siblings(“li”);</td><td>查找兄弟节点，不包括自己本身。</td></tr><tr><td>parent()</td><td>$(“#first”).parent();</td><td>查找父亲</td></tr><tr><td>eq(index)</td><td>$(“li”).eq(2);</td><td>相当于$(“li:eq(2)”),index从0开始</td></tr><tr><td>next()</td><td>$(“li”).next()</td><td>找下一个兄弟</td></tr><tr><td>prev()</td><td>$(“li”).prev()</td><td>找上一个兄弟</td></tr></tbody></table><h1 id="jQuery-样式操作"><a href="#jQuery-样式操作" class="headerlink" title="jQuery 样式操作"></a>jQuery 样式操作</h1><h2 id="操作-css-方法"><a href="#操作-css-方法" class="headerlink" title="操作 css 方法"></a>操作 css 方法</h2><p>jQuery 可以使用 css 方法来修改简单元素样式；也可以操作类，修改多个样式</p><ol><li><p>参数只写属性名，则是返回属性值</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>参数是<strong>属性名，属性值，逗号分割，</strong>是设置一组样式，属性必须加引号。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>参数可以是对象形式，方便设置多组样式。格式为<em>属性名：属性值</em>，属性值之间用逗号隔开。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>color<span class="token operator">:</span> red<span class="token punctuation">,</span>font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">20</span>px<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h2 id="设置类样式方法"><a href="#设置类样式方法" class="headerlink" title="设置类样式方法"></a>设置类样式方法</h2><p>作用等同于以前的 classList ，可以操作类样式，注意操作类里面的参数不要加点。</p><ol><li><p>添加类</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"current"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>移除类</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">"current"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>切换类</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">"current"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h2 id="类操作与-className-的区别"><a href="#类操作与-className-的区别" class="headerlink" title="类操作与 className 的区别"></a>类操作与 className 的区别</h2><p>原生 JS 中 className 会覆盖元素里面的类名。</p><p>jQuery 里面类操作只是对指定类进行操作，不影响原先的类名。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;jQuery-选择器&quot;&gt;&lt;a href=&quot;#jQuery-选择器&quot; class=&quot;headerlink&quot; title=&quot;jQuery 选择器&quot;&gt;&lt;/a&gt;jQuery 选择器&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;jQuery选择器是jQuery为我们提供的一组&lt;code&gt;方法</summary>
      
    
    
    
    <category term="Web前端学习" scheme="http://example.com/categories/Web%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="jQuery学习" scheme="http://example.com/tags/jQuery%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Web前端学习之jQuery学习（一）jQuery的基本使用</title>
    <link href="http://example.com/posts/506feb88/"/>
    <id>http://example.com/posts/506feb88/</id>
    <published>2022-04-19T11:58:57.000Z</published>
    <updated>2022-04-24T13:27:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jQuery-的下载"><a href="#jQuery-的下载" class="headerlink" title="jQuery 的下载"></a>jQuery 的下载</h1><p>进入<a href="https://jquery.com/">jQuery官网</a>下载，旧版本可以在 Download 最底下找到。</p><p><strong>版本:</strong></p><ul><li>1x : 兼容 IE6、7、8等低版本的浏览器，但是官网不再更新维护</li><li>2x : 不兼容 IE6、7、8等低版本的浏览器，官网也不再更新维护</li><li>3x : 不兼容 IE6、7、8等低版本的浏览器，官网主要更新维护的版本</li></ul><h1 id="jQuery-的使用步骤"><a href="#jQuery-的使用步骤" class="headerlink" title="jQuery 的使用步骤"></a>jQuery 的使用步骤</h1><ol><li>引入 jQuery 文件（和一般 JS 文件 的引入方式一样）</li><li>就可以开始 jQuery 的使用</li></ol><h1 id="jQuery-的入口函数"><a href="#jQuery-的入口函数" class="headerlink" title="jQuery 的入口函数"></a>jQuery 的入口函数</h1><ul><li>页面 DOM 结构加载完成的入口。</li><li>相当于原生 JS 中的 DOMContentLoaded。</li></ul><p>有以下三种写法:</p><ol><li><p>文档加载完毕（不包含图片等非文字媒体文件），不等图片加载就可以执行这个函数。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//第一种写法</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>同上，文档加载完毕（不包含图片等非文字媒体文件），不等图片加载就可以执行这个函数。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//第二种写法</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>文档加载完毕，且图片加载完毕的时候在执行这个函数，与原生js的onload的加载模式一样。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//第三种写法</span><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre></li></ol><ul><li>原生Js如果编写多个入口函数，后面编写的会覆盖前面编写的；</li><li>JQuery中编写多个入口函数，后面的不会覆盖前面的。</li></ul><h1 id="jQuery-对象"><a href="#jQuery-对象" class="headerlink" title="jQuery 对象"></a>jQuery 对象</h1><h2 id="jQuery-的顶级对象"><a href="#jQuery-的顶级对象" class="headerlink" title="jQuery 的顶级对象 $"></a>jQuery 的顶级对象 $</h2><ol><li>$ 是 jQuery 的别称，在代码中可以使用 jQuery 代替 $ ,但一般为了方便，通常直接使用 $ 。</li><li>$ 是 jQuery 的顶级对象，相当于原生 JavaScript 中的 window 。把元素利用 $ 包装成 jQuery 对象，就可以调用 jQuery 的方法。</li></ol><h2 id="jQuery-对象和-DOM-对象"><a href="#jQuery-对象和-DOM-对象" class="headerlink" title="jQuery 对象和 DOM 对象"></a>jQuery 对象和 DOM 对象</h2><ul><li>DOM 对象 ：用原生 JS 获取来的对象就是 DOM 对象</li><li>jQuery 对象 ：用 jQuery 方法获取的元素就是 jQuery 对象</li><li>jQuery 对象只能使用 jQuery 方法，DOM 对象则使用原生的 JavaScript 属性和方法</li><li>DOM对象与jQuery对象的方法不能混用。</li></ul><h2 id="jQuery-对象和-DOM-对象的相互转换"><a href="#jQuery-对象和-DOM-对象的相互转换" class="headerlink" title="jQuery 对象和 DOM 对象的相互转换"></a>jQuery 对象和 DOM 对象的相互转换</h2><p>因为原生 js 比 jQuery 更大，原生的一些属性和方法 jQuery 没有给我们封装，要想使用这些属性和方法需要把 jQuery 对象转换为 DOM 对象才能使用。</p><ol><li><p>DOM 对象转换成 jQuery 对象 ：$(DOM 对象)</p><pre class="language-none"><code class="language-none">$(&#39;div&#39;);&#x2F;&#x2F;var $obj &#x3D; $(&#39;&#39;div&#39;&#39;);</code></pre></li><li><p>jQuery对象转换成DOM对象：(两种方法)</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//第一种方法</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token comment">//第二种方法</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token comment">// index 是索引号</span></code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;jQuery-的下载&quot;&gt;&lt;a href=&quot;#jQuery-的下载&quot; class=&quot;headerlink&quot; title=&quot;jQuery 的下载&quot;&gt;&lt;/a&gt;jQuery 的下载&lt;/h1&gt;&lt;p&gt;进入&lt;a href=&quot;https://jquery.com/&quot;&gt;jQuery</summary>
      
    
    
    
    <category term="Web前端学习" scheme="http://example.com/categories/Web%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="jQuery学习" scheme="http://example.com/tags/jQuery%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Web前端学习之Less学习(一) Less入门</title>
    <link href="http://example.com/posts/3c8cb91f/"/>
    <id>http://example.com/posts/3c8cb91f/</id>
    <published>2022-04-18T12:58:24.000Z</published>
    <updated>2022-04-24T13:27:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VS-code-中安装less插件并配置使用"><a href="#VS-code-中安装less插件并配置使用" class="headerlink" title="VS code 中安装less插件并配置使用"></a>VS code 中安装less插件并配置使用</h1><ol><li><p>在扩展中安装easy less 这个插件</p></li><li><p>进入easy less扩展设置中，编辑setting.json</p></li><li><p>找到”less.compile”加入下面代码进行配置</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"less.compile"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>     <span class="token property">"compress"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//是否压缩</span>     <span class="token property">"sourceMap"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//是否生成map文件，有了这个可以在调试台看到less行数</span>     <span class="token property">"out"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否输出css文件，false为不输出</span>     <span class="token property">"outExt"</span><span class="token operator">:</span> <span class="token string">".css"</span><span class="token punctuation">,</span> <span class="token comment">// 输出文件的后缀</span>    <span class="token punctuation">&#125;</span></code></pre></li><li><p>之后写完less文件保存后会在同级目录下自动生成一个同名css文件</p></li></ol><h1 id="Less-介绍"><a href="#Less-介绍" class="headerlink" title="Less 介绍"></a>Less 介绍</h1><p>Less 是一门向后兼容的 CSS 扩展语言。Less对CSS语言增加了许多方便的扩展，学习Less能加快开发的速度。</p><h1 id="Less-学习"><a href="#Less-学习" class="headerlink" title="Less 学习"></a>Less 学习</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li><code>@</code>声明变量，作为普通属性值使用</li></ul><pre class="language-less" data-language="less"><code class="language-less"><span class="token variable">@width<span class="token punctuation">:</span></span> 10px<span class="token punctuation">;</span><span class="token variable">@height<span class="token punctuation">:</span></span> <span class="token variable">@width</span> <span class="token operator">+</span> 10px<span class="token punctuation">;</span><span class="token selector">#header</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">@width</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token variable">@height</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>变量用于<code>选择器名</code>、<code>属性名</code>、<code>URL</code>、<code>@import语句</code></li><li>需要添加<code>&#123;&#125;</code></li></ul><pre class="language-less" data-language="less"><code class="language-less"><span class="token variable">@my-selector<span class="token punctuation">:</span></span> banner<span class="token punctuation">;</span><span class="token selector">.@&#123;my-selector&#125;</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token variable">@property<span class="token punctuation">:</span></span> color<span class="token punctuation">;</span><span class="token selector">.widget</span> <span class="token punctuation">&#123;</span>  <span class="token property">@&#123;property&#125;</span><span class="token punctuation">:</span> #0ee<span class="token punctuation">;</span>  <span class="token property">background-@&#123;property&#125;</span><span class="token punctuation">:</span> #999<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token variable">@images<span class="token punctuation">:</span></span> <span class="token string">'../img'</span><span class="token punctuation">;</span><span class="token selector">body</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #444<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'@&#123;images&#125;/white-sand.png'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token variable">@themes<span class="token punctuation">:</span></span> <span class="token string">'../../src/themes'</span><span class="token punctuation">;</span><span class="token atrule">@import '@</span><span class="token punctuation">&#123;</span>themes<span class="token punctuation">&#125;</span><span class="token operator">/</span>tidal<span class="token operator">-</span>wave.less'<span class="token punctuation">;</span></code></pre><ul><li>当一个变量被声明多次，会取<code>最后一次</code>的值，并从当前作用域往外寻找变量。</li></ul><pre class="language-less" data-language="less"><code class="language-less"><span class="token variable">@var<span class="token punctuation">:</span></span> 0<span class="token punctuation">;</span><span class="token selector">.class</span> <span class="token punctuation">&#123;</span>  <span class="token variable">@var<span class="token punctuation">:</span></span> 1<span class="token punctuation">;</span>  <span class="token selector">.brass</span> <span class="token punctuation">&#123;</span>    <span class="token variable">@var<span class="token punctuation">:</span></span> 2<span class="token punctuation">;</span>    <span class="token property">three</span><span class="token punctuation">:</span> <span class="token variable">@var</span><span class="token punctuation">;</span>    <span class="token variable">@var<span class="token punctuation">:</span></span> 3<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token property">one</span><span class="token punctuation">:</span> <span class="token variable">@var</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.class</span> <span class="token punctuation">&#123;</span>  <span class="token property">one</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.class .brass</span> <span class="token punctuation">&#123;</span>  <span class="token property">three</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="混合"><a href="#混合" class="headerlink" title="混合"></a>混合</h2><ul><li>混合（Mixin）是一种将一组属性从一个规则集包含（或混入）到另一个规则集的方法。假设我们定义了一个类（class）如下：</li></ul><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.bordered</span> <span class="token punctuation">&#123;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> dotted 1px black<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> solid 2px black<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>如果我们希望在其它规则集中使用这些属性呢？没问题，我们只需像下面这样输入所需属性的类（class）名称即可，如下所示：</p><pre class="language-less" data-language="less"><code class="language-less"><span class="token selector">#menu a</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #111<span class="token punctuation">;</span>  <span class="token mixin-usage function">.bordered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.post a</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token mixin-usage function">.bordered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><code>.bordered</code> 类所包含的属性就将同时出现在 <code>#menu a</code> 和 <code>.post a</code> 中了。（注意，你也可以使用 <code>#ids</code> 作为 mixin 使用。）</p><h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><ul><li>Less 提供了使用嵌套(nesting)代替层叠或与层叠结合使用的能力</li></ul><p>CSS 代码：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">#header</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#header .navigation</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#header .logo</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p> Less 语言我们可以这样书写代码：</p><pre class="language-less" data-language="less"><code class="language-less"><span class="token selector">#header</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>  <span class="token selector">.navigation</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.logo</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><ul><li>算术运算符 <code>+</code>、<code>-</code>、<code>*</code>、<code>/</code> 可以对任何数字、颜色或变量进行运算。如果可能的话，算术运算符在加、减或比较之前会进行单位换算。计算的结果以最左侧操作数的单位类型为准。如果单位换算无效或失去意义，则忽略单位。无效的单位换算例如：px 到 cm 或 rad 到 % 的转换。</li></ul><pre class="language-less" data-language="less"><code class="language-less"><span class="token comment">// 所有操作数被转换成相同的单位</span><span class="token variable">@conversion-1<span class="token punctuation">:</span></span> 5cm <span class="token operator">+</span> 10mm<span class="token punctuation">;</span> <span class="token comment">// 结果是 6cm</span><span class="token variable">@conversion-2<span class="token punctuation">:</span></span> 2 <span class="token operator">-</span> 3cm <span class="token operator">-</span> 5mm<span class="token punctuation">;</span> <span class="token comment">// 结果是 -1.5cm</span><span class="token comment">// conversion is impossible</span><span class="token variable">@incompatible-units<span class="token punctuation">:</span></span> 2 <span class="token operator">+</span> 5px <span class="token operator">-</span> 3cm<span class="token punctuation">;</span> <span class="token comment">// 结果是 4px</span><span class="token comment">// example with variables</span><span class="token variable">@base<span class="token punctuation">:</span></span> 5%<span class="token punctuation">;</span><span class="token variable">@filler<span class="token punctuation">:</span></span> <span class="token variable">@base</span> <span class="token operator">*</span> 2<span class="token punctuation">;</span> <span class="token comment">// 结果是 10%</span><span class="token variable">@other<span class="token punctuation">:</span></span> <span class="token variable">@base</span> <span class="token operator">+</span> <span class="token variable">@filler</span><span class="token punctuation">;</span> <span class="token comment">// 结果是 15%</span></code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li>Less 内置了多种函数用于转换颜色、处理字符串、算术运算等。</li></ul><p>下面这个例子利用 percentage 函数将 0.5 转换为 50%，将颜色饱和度增加 5%，以及颜色亮度降低 25% 并且色相值增加 8 等用法：</p><pre class="language-less" data-language="less"><code class="language-less"><span class="token variable">@base<span class="token punctuation">:</span></span> #f04615<span class="token punctuation">;</span><span class="token variable">@width<span class="token punctuation">:</span></span> 0.5<span class="token punctuation">;</span><span class="token selector">.class</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">percentage</span><span class="token punctuation">(</span><span class="token variable">@width</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns `50%`</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">saturate</span><span class="token punctuation">(</span><span class="token variable">@base</span><span class="token punctuation">,</span> 5%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">spin</span><span class="token punctuation">(</span><span class="token function">lighten</span><span class="token punctuation">(</span><span class="token variable">@base</span><span class="token punctuation">,</span> 25%<span class="token punctuation">)</span><span class="token punctuation">,</span> 8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><ul><li>可以将混合（mixins）和规则集（rulesets）作为一组值的映射（map）使用</li></ul><pre class="language-less" data-language="less"><code class="language-less"><span class="token selector">#colors()</span> <span class="token punctuation">&#123;</span>  <span class="token property">primary</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>  <span class="token property">secondary</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.button</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #colors[primary]<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #colors[secondary]<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出css</span><span class="token selector">.button</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>块注释和行注释都可以使用：</p><pre class="language-less" data-language="less"><code class="language-less"><span class="token comment">/* 一个块注释 * style comment! */</span><span class="token variable">@var<span class="token punctuation">:</span></span> red<span class="token punctuation">;</span><span class="token comment">// 这一行被注释掉了！</span><span class="token variable">@var<span class="token punctuation">:</span></span> white<span class="token punctuation">;</span></code></pre><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>Less 中的作用域与 CSS 中的作用域非常类似。首先在本地查找变量和混合（mixins），如果找不到，则从“父”级作用域继承。</p><pre class="language-less" data-language="less"><code class="language-less"><span class="token variable">@var<span class="token punctuation">:</span></span> red<span class="token punctuation">;</span><span class="token selector">#page</span> <span class="token punctuation">&#123;</span>  <span class="token variable">@var<span class="token punctuation">:</span></span> white<span class="token punctuation">;</span>  <span class="token selector">#header</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">@var</span><span class="token punctuation">;</span> <span class="token comment">// white</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>​参考自<a href="https://less.bootcss.com/#%E6%98%A0%E5%B0%84%EF%BC%88maps%EF%BC%89">Less中文文档快速入门</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;VS-code-中安装less插件并配置使用&quot;&gt;&lt;a href=&quot;#VS-code-中安装less插件并配置使用&quot; class=&quot;headerlink&quot; title=&quot;VS code 中安装less插件并配置使用&quot;&gt;&lt;/a&gt;VS code 中安装less插件并配置</summary>
      
    
    
    
    <category term="Web前端学习" scheme="http://example.com/categories/Web%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Less学习" scheme="http://example.com/tags/Less%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Web前端学习之JavaScript学习（十一）认识闭包</title>
    <link href="http://example.com/posts/a70bd8a8/"/>
    <id>http://example.com/posts/a70bd8a8/</id>
    <published>2022-04-18T08:36:26.000Z</published>
    <updated>2022-04-24T13:27:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="闭包和作用域链"><a href="#闭包和作用域链" class="headerlink" title="闭包和作用域链"></a>闭包和作用域链</h1><blockquote><p>闭包是指有权访问另一个函数作用域中的变量的函数。（《JavaScript高级程序设计》7.2闭包）</p></blockquote><blockquote><p>所有的JavaScript函数都是闭包：它们都是对象，它们都关联到作用域链。和其他大多数现代编程语言一样，JavaScript也采用词法作用域（lexical scoping），也就是说，函数的执行依赖于变量作用域， 这个作用域是在函数定义时决定的，而不是函数调用时决定的。（《JavaScript权威指南》8.6闭包）</p></blockquote><p>当JavaScript需要查找变量的x的值的时候，它会从作用域链中的第一个对象开始查找， 如果这个对象没有名为x的属性，就会继续查找链上下一个对象，最后到全局作用域，如果全都没有找到就会抛出一个引用错误（ReferenceError）异常。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">closure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">closure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token comment">// error: count is not defined</span></code></pre><p>closure函数返回了一个匿名函数，将其赋值给f，多次调用f，发现closure函数内的count累计增加。</p><p>当我们想打印全局作用域中的count时，报错了。由于作用域是在函数定义时决定而不是函数调用时决定的，f return的变量是closure函数作用域内的count，而不是全局作用域的count。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>作用:<ul><li>延长局部变量的生命周期</li><li>让函数外部能操作内部的局部变量</li></ul></li><li>闭包的应用场景:<ul><li>模块化</li><li>循环遍历加监听</li><li>柯里化</li><li>JS框架(jQuery)大量使用了闭包</li></ul></li><li>缺点:<ul><li>变量占用内存的时间可能会过长</li><li>可能导致内存泄露</li><li>解决:及时释放 : f &#x3D; null; &#x2F;&#x2F;让内部函数对象成为垃圾对象</li></ul></li></ul><p>想要通过更多实例来理解闭包，可以看大佬的这篇文章<a href="https://jiuto.github.io/jiuto_blog/guide/js/apply_call.html">理解js闭包</a>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;闭包和作用域链&quot;&gt;&lt;a href=&quot;#闭包和作用域链&quot; class=&quot;headerlink&quot; title=&quot;闭包和作用域链&quot;&gt;&lt;/a&gt;闭包和作用域链&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;闭包是指有权访问另一个函数作用域中的变量的函数。（《JavaScript高</summary>
      
    
    
    
    <category term="Web前端学习" scheme="http://example.com/categories/Web%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaScript学习" scheme="http://example.com/tags/JavaScript%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
