<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Technical Guide_Greenride+</title>
      <link href="/posts/3ec129ee/"/>
      <url>/posts/3ec129ee/</url>
      
        <content type="html"><![CDATA[<h1 id="Greenride-Navigation-App-Technical-Documentation"><a href="#Greenride-Navigation-App-Technical-Documentation" class="headerlink" title="Greenride+ Navigation App Technical Documentation"></a>Greenride+ Navigation App Technical Documentation</h1><h2 id="1-Application-Overview"><a href="#1-Application-Overview" class="headerlink" title="1. Application Overview"></a>1. Application Overview</h2><p>Greenride+ is a navigation application focused on green travel, supporting route planning for various transportation modes including walking, PMD (Personal Mobility Device), and car. The main features include route planning, carbon emission calculation, PMD station display, and trip recording, aiming to encourage users to choose low-carbon travel methods to reduce carbon emissions.</p><h2 id="2-Application-Usage"><a href="#2-Application-Usage" class="headerlink" title="2. Application Usage"></a>2. Application Usage</h2><h3 id="2-1-Main-Interface"><a href="#2-1-Main-Interface" class="headerlink" title="2.1 Main Interface"></a>2.1 Main Interface</h3><p>Users can select the start and end points on the main interface to plan routes.</p><h3 id="2-2-Transportation-Mode-Selection"><a href="#2-2-Transportation-Mode-Selection" class="headerlink" title="2.2 Transportation Mode Selection"></a>2.2 Transportation Mode Selection</h3><ul><li>The app supports three transportation modes: walking, PMD, and car</li><li>Users can view routes, time, distance, and carbon emissions for each transportation mode in the selection interface</li><li>Clicking on different transportation mode cards switches the view to the corresponding route</li></ul><h3 id="2-3-PMD-Station-Features"><a href="#2-3-PMD-Station-Features" class="headerlink" title="2.3 PMD Station Features"></a>2.3 PMD Station Features</h3><ul><li>PMD stations are displayed as markers on the map</li><li>Clicking on a station marker shows station details</li><li>Stations can be set as start or end points</li></ul><h3 id="2-4-Trip-Recording"><a href="#2-4-Trip-Recording" class="headerlink" title="2.4 Trip Recording"></a>2.4 Trip Recording</h3><ul><li>Trip records are generated after completing navigation</li><li>Records include start point, end point, transportation mode, distance, and carbon emission savings</li><li>The app calculates cumulative carbon emission savings</li></ul><h2 id="3-Development-Steps"><a href="#3-Development-Steps" class="headerlink" title="3. Development Steps"></a>3. Development Steps</h2><h3 id="3-1-Project-Initialization"><a href="#3-1-Project-Initialization" class="headerlink" title="3.1 Project Initialization"></a>3.1 Project Initialization</h3><ul><li>Create Android project</li><li>Configure basic development environment</li><li>Add required dependencies</li></ul><h3 id="3-2-Amap-Integration"><a href="#3-2-Amap-Integration" class="headerlink" title="3.2 Amap Integration"></a>3.2 Amap Integration</h3><ul><li>Apply for Amap API key</li><li>Add map SDK dependencies</li><li>Initialize map components</li></ul><h3 id="3-3-Route-Planning-Implementation"><a href="#3-3-Route-Planning-Implementation" class="headerlink" title="3.3 Route Planning Implementation"></a>3.3 Route Planning Implementation</h3><ul><li>Integrate Amap route planning service</li><li>Implement walking, riding, and driving route calculations</li><li>Design interaction methods for route selection</li></ul><h3 id="3-4-PMD-Station-Feature-Development"><a href="#3-4-PMD-Station-Feature-Development" class="headerlink" title="3.4 PMD Station Feature Development"></a>3.4 PMD Station Feature Development</h3><ul><li>Design PMD station data structure</li><li>Load station data from CSV file</li><li>Implement station markers and info windows</li></ul><h3 id="3-5-Carbon-Emission-Calculation"><a href="#3-5-Carbon-Emission-Calculation" class="headerlink" title="3.5 Carbon Emission Calculation"></a>3.5 Carbon Emission Calculation</h3><ul><li>Define carbon emission coefficients for each transportation mode</li><li>Implement carbon emission calculation based on distance</li><li>Calculate carbon emission differences between transportation modes</li></ul><h3 id="3-6-Database-Design-and-Implementation"><a href="#3-6-Database-Design-and-Implementation" class="headerlink" title="3.6 Database Design and Implementation"></a>3.6 Database Design and Implementation</h3><ul><li>Design TripRecord model class</li><li>Implement SQLite database helper class</li><li>Develop data storage and query functions</li></ul><h3 id="3-7-User-Interface-Development"><a href="#3-7-User-Interface-Development" class="headerlink" title="3.7 User Interface Development"></a>3.7 User Interface Development</h3><ul><li>Design main interface, transportation mode selection interface, report interface, etc.</li><li>Implement interface interaction logic</li><li>Optimize visual effects</li></ul><h2 id="4-Functional-Modules-in-Detail"><a href="#4-Functional-Modules-in-Detail" class="headerlink" title="4. Functional Modules in Detail"></a>4. Functional Modules in Detail</h2><h3 id="4-1-Map-and-Navigation-Module"><a href="#4-1-Map-and-Navigation-Module" class="headerlink" title="4.1 Map and Navigation Module"></a>4.1 Map and Navigation Module</h3><h4 id="4-1-1-Map-Display"><a href="#4-1-1-Map-Display" class="headerlink" title="4.1.1 Map Display"></a>4.1.1 Map Display</h4><ul><li>Use the <code>AMap</code> class to implement map display</li><li>Configure basic map settings (traffic display, zoom controls, compass, etc.)</li><li>Implement map view adjustment features</li></ul><pre class="language-java" data-language="java"><code class="language-java">aMap <span class="token operator">=</span> mapView<span class="token punctuation">.</span><span class="token function">getMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>aMap<span class="token punctuation">.</span><span class="token function">setTrafficEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>aMap<span class="token punctuation">.</span><span class="token function">getUiSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setZoomControlsEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>aMap<span class="token punctuation">.</span><span class="token function">getUiSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCompassEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="4-1-2-Route-Planning"><a href="#4-1-2-Route-Planning" class="headerlink" title="4.1.2 Route Planning"></a>4.1.2 Route Planning</h4><ul><li>Use the <code>RouteSearch</code> class to implement route search</li><li>Implement walking route calculation with <code>calculateWalkRouteAsyn</code></li><li>Implement riding route calculation with <code>calculateRideRouteAsyn</code> (for PMD)</li><li>Implement driving route calculation with <code>calculateDriveRouteAsyn</code></li></ul><h4 id="4-1-3-Route-Display"><a href="#4-1-3-Route-Display" class="headerlink" title="4.1.3 Route Display"></a>4.1.3 Route Display</h4><ul><li>Use the <code>Polyline</code> class to draw routes on the map</li><li>Set different colors based on transportation mode (walking: green, PMD: red, car: blue)</li><li>Implement automatic route view adjustment</li></ul><h3 id="4-2-PMD-Station-Module"><a href="#4-2-PMD-Station-Module" class="headerlink" title="4.2 PMD Station Module"></a>4.2 PMD Station Module</h3><h4 id="4-2-1-Station-Data-Management"><a href="#4-2-1-Station-Data-Management" class="headerlink" title="4.2.1 Station Data Management"></a>4.2.1 Station Data Management</h4><ul><li>Custom <code>PMDStationMarker</code> class to store station information</li><li>Read station data from CSV file</li><li>Manage station data loading and updates</li></ul><h4 id="4-2-2-Station-Marker-Display"><a href="#4-2-2-Station-Marker-Display" class="headerlink" title="4.2.2 Station Marker Display"></a>4.2.2 Station Marker Display</h4><ul><li>Use custom icons to mark PMD stations</li><li>Implement marker click interaction</li><li>Design info windows to display station details</li></ul><h4 id="4-2-3-Station-Interaction-Features"><a href="#4-2-3-Station-Interaction-Features" class="headerlink" title="4.2.3 Station Interaction Features"></a>4.2.3 Station Interaction Features</h4><ul><li>Implement station information dialog</li><li>Support setting stations as start or end points</li><li>Update route planning to reflect station selection</li></ul><h3 id="4-3-Carbon-Emission-Calculation-Module"><a href="#4-3-Carbon-Emission-Calculation-Module" class="headerlink" title="4.3 Carbon Emission Calculation Module"></a>4.3 Carbon Emission Calculation Module</h3><h4 id="4-3-1-Emission-Coefficient-Definition"><a href="#4-3-1-Emission-Coefficient-Definition" class="headerlink" title="4.3.1 Emission Coefficient Definition"></a>4.3.1 Emission Coefficient Definition</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> EMISSION_WALKING <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>       <span class="token comment">// No carbon emissions for walking</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> EMISSION_PMD <span class="token operator">=</span> <span class="token number">0.0135</span><span class="token punctuation">;</span>        <span class="token comment">// PMD: 0.0135kg per kilometer</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> EMISSION_CAR <span class="token operator">=</span> <span class="token number">0.1848</span><span class="token punctuation">;</span>        <span class="token comment">// Car: 0.1848kg per kilometer</span></code></pre><h4 id="4-3-2-Emission-Calculation-Logic"><a href="#4-3-2-Emission-Calculation-Logic" class="headerlink" title="4.3.2 Emission Calculation Logic"></a>4.3.2 Emission Calculation Logic</h4><ul><li>Walking emissions: 0 kg CO₂&#x2F;km</li><li>PMD emissions: 0.0135 kg CO₂&#x2F;km</li><li>Car emissions: 0.1848 kg CO₂&#x2F;km</li><li>Saved emissions calculated as the difference compared to car emissions</li></ul><h4 id="4-3-3-Interface-Display"><a href="#4-3-3-Interface-Display" class="headerlink" title="4.3.3 Interface Display"></a>4.3.3 Interface Display</h4><ul><li>Show carbon emissions for each transportation mode</li><li>Calculate and display saved carbon emissions</li><li>Show cumulative savings on the report page</li></ul><h3 id="4-4-Data-Storage-Module"><a href="#4-4-Data-Storage-Module" class="headerlink" title="4.4 Data Storage Module"></a>4.4 Data Storage Module</h3><h4 id="4-4-1-Data-Model-Design"><a href="#4-4-1-Data-Model-Design" class="headerlink" title="4.4.1 Data Model Design"></a>4.4.1 Data Model Design</h4><ul><li><code>TripRecord</code> class: records trip information<ul><li>Start point: <code>startPoint</code></li><li>End point: <code>endPoint</code></li><li>Transportation mode: <code>transportMode</code></li><li>Distance: <code>distance</code></li><li>Carbon emission savings: <code>carbonSaved</code></li><li>Trip date: <code>tripDate</code></li></ul></li></ul><h4 id="4-4-2-Database-Design"><a href="#4-4-2-Database-Design" class="headerlink" title="4.4.2 Database Design"></a>4.4.2 Database Design</h4><ul><li>Use SQLite database</li><li><code>TripRecordDbHelper</code> class manages database operations</li><li>Table design: trips table contains all trip fields</li></ul><h4 id="4-4-3-Data-Operations"><a href="#4-4-3-Data-Operations" class="headerlink" title="4.4.3 Data Operations"></a>4.4.3 Data Operations</h4><ul><li>Save trip records: <code>saveTripRecord</code> method</li><li>Query trip records: <code>getAllTripRecords</code> method</li><li>Calculate total carbon savings: <code>getTotalCarbonSaved</code> method</li></ul><h3 id="4-5-User-Interface-Module"><a href="#4-5-User-Interface-Module" class="headerlink" title="4.5 User Interface Module"></a>4.5 User Interface Module</h3><h4 id="4-5-1-Main-Interfaces"><a href="#4-5-1-Main-Interfaces" class="headerlink" title="4.5.1 Main Interfaces"></a>4.5.1 Main Interfaces</h4><ul><li><code>MainActivity</code>: Application main interface</li><li><code>TransportModeActivity</code>: Transportation mode selection interface</li><li><code>ReportActivity</code>: Trip report interface</li></ul><h4 id="4-5-2-UI-Component-Design"><a href="#4-5-2-UI-Component-Design" class="headerlink" title="4.5.2 UI Component Design"></a>4.5.2 UI Component Design</h4><ul><li>Use CardView to display transportation mode options</li><li>Custom map markers and info windows</li><li>Dynamic display of routes and information</li></ul><h4 id="4-5-3-Visual-Effect-Optimization"><a href="#4-5-3-Visual-Effect-Optimization" class="headerlink" title="4.5.3 Visual Effect Optimization"></a>4.5.3 Visual Effect Optimization</h4><ul><li>Custom color scheme: primary color <code>#075E54</code></li><li>Use Glide to load GIF animations</li><li>Adaptive interface layout</li></ul><h2 id="5-Libraries-and-Versions"><a href="#5-Libraries-and-Versions" class="headerlink" title="5. Libraries and Versions"></a>5. Libraries and Versions</h2><h3 id="5-1-Core-Android-Libraries"><a href="#5-1-Core-Android-Libraries" class="headerlink" title="5.1 Core Android Libraries"></a>5.1 Core Android Libraries</h3><ul><li>AndroidX Core: For basic component support</li><li>AppCompat: Backward compatibility support</li><li>ConstraintLayout: Build flexible UI layouts</li><li>CardView: Implement card-style UI components</li><li>RecyclerView: Display list data</li></ul><h3 id="5-2-Map-related-Libraries"><a href="#5-2-Map-related-Libraries" class="headerlink" title="5.2 Map-related Libraries"></a>5.2 Map-related Libraries</h3><ul><li>Amap SDK: For map display and navigation functions<ul><li>Map SDK: Provides basic map functionality</li><li>Search SDK: Implements location search and route planning</li></ul></li></ul><h3 id="5-3-Image-Processing-Libraries"><a href="#5-3-Image-Processing-Libraries" class="headerlink" title="5.3 Image Processing Libraries"></a>5.3 Image Processing Libraries</h3><ul><li>Glide: For loading and displaying images and GIFs<ul><li>Version: Latest stable version</li><li>Function: Load dynamic GIF images</li></ul></li></ul><h3 id="5-4-Database-Related"><a href="#5-4-Database-Related" class="headerlink" title="5.4 Database Related"></a>5.4 Database Related</h3><ul><li>Android SQLite: Built-in database support<ul><li>Purpose: Store trip records</li><li>Implementation: Custom <code>TripRecordDbHelper</code> class</li></ul></li></ul><h3 id="5-5-Other-Utility-Libraries"><a href="#5-5-Other-Utility-Libraries" class="headerlink" title="5.5 Other Utility Libraries"></a>5.5 Other Utility Libraries</h3><ul><li>ViewBinding: Simplify View access</li><li>SharedPreferences: Store simple key-value data</li><li>Android Logging: Development debugging logs</li></ul><h2 id="6-Development-Considerations"><a href="#6-Development-Considerations" class="headerlink" title="6. Development Considerations"></a>6. Development Considerations</h2><h3 id="6-1-Amap-API-Related"><a href="#6-1-Amap-API-Related" class="headerlink" title="6.1 Amap API Related"></a>6.1 Amap API Related</h3><ul><li>Ensure correct API Key configuration</li><li>Properly handle map lifecycle methods</li><li>Set timeout handling for route planning requests</li></ul><h3 id="6-2-Data-Type-Conversion"><a href="#6-2-Data-Type-Conversion" class="headerlink" title="6.2 Data Type Conversion"></a>6.2 Data Type Conversion</h3><ul><li>Pay attention to float and double type conversions, especially when calculating and passing distances</li><li>Ensure distance values are correctly saved in trip records</li></ul><h3 id="6-3-Performance-Optimization"><a href="#6-3-Performance-Optimization" class="headerlink" title="6.3 Performance Optimization"></a>6.3 Performance Optimization</h3><ul><li>Avoid executing time-consuming operations on the UI thread</li><li>Properly manage map resources to avoid memory leaks</li><li>Batch process PMD station markers to reduce performance consumption</li></ul><h2 id="7-Future-Feature-Outlook"><a href="#7-Future-Feature-Outlook" class="headerlink" title="7. Future Feature Outlook"></a>7. Future Feature Outlook</h2><ul><li>Add support for more transportation modes</li><li>Provide detailed trip history records and statistics</li><li>Enhance social sharing features</li><li>Optimize carbon emission calculation models</li></ul><hr><p>This document outlines the main features, development process, and technical details of the Greenride+ navigation application. Developers should refer to the specific code implementation for more detailed information. </p>]]></content>
      
      
      <categories>
          
          <category> Graduation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> APP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data Analysis</title>
      <link href="/posts/afff2b4b/"/>
      <url>/posts/afff2b4b/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迁移hexo博客到Mac</title>
      <link href="/posts/5a84bf91/"/>
      <url>/posts/5a84bf91/</url>
      
        <content type="html"><![CDATA[<h1 id="Mac环境配置"><a href="#Mac环境配置" class="headerlink" title="Mac环境配置"></a>Mac环境配置</h1><h2 id="在Mac安装git和node-js"><a href="#在Mac安装git和node-js" class="headerlink" title="在Mac安装git和node.js"></a>在Mac安装git和node.js</h2><pre class="language-zsh" data-language="zsh"><code class="language-zsh">brew install gitbrew install node</code></pre><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><pre class="language-zsh" data-language="zsh"><code class="language-zsh">npm install hexo g</code></pre><p>如果出错，改为下面这条：</p><pre class="language-zsh" data-language="zsh"><code class="language-zsh">npm install hexo-cli -g</code></pre><h2 id="初始化hexo目录"><a href="#初始化hexo目录" class="headerlink" title="初始化hexo目录"></a>初始化hexo目录</h2><pre class="language-zsh" data-language="zsh"><code class="language-zsh">mkdir blogcd bloghexo inithexo s</code></pre><p>打开 localhost:4000 查看是否成功</p><h2 id="使用ssh连接或者token（我这里选择了token）"><a href="#使用ssh连接或者token（我这里选择了token）" class="headerlink" title="使用ssh连接或者token（我这里选择了token）"></a>使用ssh连接或者token（我这里选择了token）</h2><p>去对应的github生成personal token，在 Setting -&gt; Developer Setting 下<br>然后将token复制到_config.yml中的对应位置，打码处为token</p><p><img src="/img/blogissue/1.jpg" loading="lazy"></p><h1 id="配置文件转移"><a href="#配置文件转移" class="headerlink" title="配置文件转移"></a>配置文件转移</h1><p>将原电脑的blog文件下的文件转移到Mac的blog文件夹</p><h1 id="尝试发布文章"><a href="#尝试发布文章" class="headerlink" title="尝试发布文章"></a>尝试发布文章</h1><pre class="language-zsh" data-language="zsh"><code class="language-zsh">hexo d</code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构刷题推荐（1）线性表</title>
      <link href="/posts/5d651eb9/"/>
      <url>/posts/5d651eb9/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode（按分类排序，推荐刷题列表-★★★）"><a href="#LeetCode（按分类排序，推荐刷题列表-★★★）" class="headerlink" title="LeetCode（按分类排序，推荐刷题列表 ★★★）"></a>LeetCode（按分类排序，推荐刷题列表 ★★★）</h1><h2 id="01-数组"><a href="#01-数组" class="headerlink" title="01. 数组"></a>01. 数组</h2><h3 id="数组基础题目"><a href="#数组基础题目" class="headerlink" title="数组基础题目"></a>数组基础题目</h3><h4 id="数组操作题目"><a href="#数组操作题目" class="headerlink" title="数组操作题目"></a>数组操作题目</h4><table><thead><tr><th align="left">题号</th><th align="left">标题</th><th align="left">标签</th><th align="left">难度</th></tr></thead><tbody><tr><td align="left">0189</td><td align="left"><a href="https://leetcode.cn/problems/rotate-array/">轮转数组</a></td><td align="left">数组、数学、双指针</td><td align="left">中等</td></tr><tr><td align="left">0066</td><td align="left"><a href="https://leetcode.cn/problems/plus-one/">加一</a></td><td align="left">数组、数学</td><td align="left">简单</td></tr><tr><td align="left">0724</td><td align="left"><a href="https://leetcode.cn/problems/find-pivot-index/">寻找数组的中心下标</a></td><td align="left">数组、前缀和</td><td align="left">简单</td></tr><tr><td align="left">0485</td><td align="left"><a href="https://leetcode.cn/problems/max-consecutive-ones/">最大连续 1 的个数</a></td><td align="left">数组</td><td align="left">简单</td></tr><tr><td align="left">0238</td><td align="left"><a href="https://leetcode.cn/problems/product-of-array-except-self/">除自身以外数组的乘积</a></td><td align="left">数组、前缀和</td><td align="left">中等</td></tr></tbody></table><h4 id="二维数组题目"><a href="#二维数组题目" class="headerlink" title="二维数组题目"></a>二维数组题目</h4><table><thead><tr><th align="left">题号</th><th align="left">标题</th><th align="left">标签</th><th align="left">难度</th></tr></thead><tbody><tr><td align="left">0498</td><td align="left"><a href="https://leetcode.cn/problems/diagonal-traverse/">对角线遍历</a></td><td align="left">数组、矩阵、模拟</td><td align="left">中等</td></tr><tr><td align="left">0048</td><td align="left"><a href="https://leetcode.cn/problems/rotate-image/">旋转图像</a></td><td align="left">数组、数学、矩阵</td><td align="left">中等</td></tr><tr><td align="left">0073</td><td align="left"><a href="https://leetcode.cn/problems/set-matrix-zeroes/">矩阵置零</a></td><td align="left">数组、哈希表、矩阵</td><td align="left">中等</td></tr><tr><td align="left">0054</td><td align="left"><a href="https://leetcode.cn/problems/spiral-matrix/">螺旋矩阵</a></td><td align="left">数组、矩阵、模拟</td><td align="left">中等</td></tr><tr><td align="left">0059</td><td align="left"><a href="https://leetcode.cn/problems/spiral-matrix-ii/">螺旋矩阵 II</a></td><td align="left">数组、矩阵、模拟</td><td align="left">中等</td></tr><tr><td align="left">0289</td><td align="left"><a href="https://leetcode.cn/problems/game-of-life/">生命游戏</a></td><td align="left">数组、矩阵、模拟</td><td align="left">中等</td></tr></tbody></table><h2 id="02-链表"><a href="#02-链表" class="headerlink" title="02. 链表"></a>02. 链表</h2><h3 id="链表经典题目"><a href="#链表经典题目" class="headerlink" title="链表经典题目"></a>链表经典题目</h3><table><thead><tr><th align="left">题号</th><th align="left">标题</th><th align="left">标签</th><th align="left">难度</th></tr></thead><tbody><tr><td align="left">0707</td><td align="left"><a href="https://leetcode.cn/problems/design-linked-list/">设计链表</a></td><td align="left">设计、链表</td><td align="left">中等</td></tr><tr><td align="left">0083</td><td align="left"><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-list/">删除排序链表中的重复元素</a></td><td align="left">链表</td><td align="left">简单</td></tr><tr><td align="left">0082</td><td align="left"><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii/">删除排序链表中的重复元素 II</a></td><td align="left">链表、双指针</td><td align="left">中等</td></tr><tr><td align="left">0206</td><td align="left"><a href="https://leetcode.cn/problems/reverse-linked-list/">反转链表</a></td><td align="left">递归、链表</td><td align="left">简单</td></tr><tr><td align="left">0203</td><td align="left"><a href="https://leetcode.cn/problems/remove-linked-list-elements/">移除链表元素</a></td><td align="left">递归、链表</td><td align="left">简单</td></tr><tr><td align="left">0234</td><td align="left"><a href="https://leetcode.cn/problems/palindrome-linked-list/">回文链表</a></td><td align="left">栈、递归、链表、双指针</td><td align="left">简单</td></tr><tr><td align="left">0061</td><td align="left"><a href="https://leetcode.cn/problems/rotate-list/">旋转链表</a></td><td align="left">链表、双指针</td><td align="left">中等</td></tr></tbody></table><h2 id="03-栈"><a href="#03-栈" class="headerlink" title="03. 栈"></a>03. 栈</h2><h3 id="栈基础题目"><a href="#栈基础题目" class="headerlink" title="栈基础题目"></a>栈基础题目</h3><table><thead><tr><th align="left">题号</th><th align="left">标题</th><th align="left">标签</th><th align="left">难度</th></tr></thead><tbody><tr><td align="left">1047</td><td align="left"><a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/">删除字符串中的所有相邻重复项</a></td><td align="left">栈、字符串</td><td align="left">简单</td></tr><tr><td align="left">0155</td><td align="left"><a href="https://leetcode.cn/problems/min-stack/">最小栈</a></td><td align="left">栈、设计</td><td align="left">中等</td></tr><tr><td align="left">0020</td><td align="left"><a href="https://leetcode.cn/problems/valid-parentheses/">有效的括号</a></td><td align="left">栈、字符串</td><td align="left">简单</td></tr><tr><td align="left">0227</td><td align="left"><a href="https://leetcode.cn/problems/basic-calculator-ii/">基本计算器 II</a></td><td align="left">栈、数学、字符串</td><td align="left">中等</td></tr><tr><td align="left">0232</td><td align="left"><a href="https://leetcode.cn/problems/implement-queue-using-stacks/">用栈实现队列</a></td><td align="left">栈、设计、队列</td><td align="left">简单</td></tr><tr><td align="left">0394</td><td align="left"><a href="https://leetcode.cn/problems/decode-string/">字符串解码</a></td><td align="left"><a href="https://github.com/itcharge/LeetCode-Py/blob/main/Solutions/0394.%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E7%A0%81.md">Python</a></td><td align="left">栈、递归、字符串</td></tr><tr><td align="left">0032</td><td align="left"><a href="https://leetcode.cn/problems/longest-valid-parentheses/">最长有效括号</a></td><td align="left"><a href="https://github.com/itcharge/LeetCode-Py/blob/main/Solutions/0032.%20%E6%9C%80%E9%95%BF%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7.md">Python</a></td><td align="left">栈、字符串、动态规划</td></tr><tr><td align="left">0946</td><td align="left"><a href="https://leetcode.cn/problems/validate-stack-sequences/">验证栈序列</a></td><td align="left">栈、数组、模拟</td><td align="left">中等</td></tr><tr><td align="left">剑指 Offer 06</td><td align="left"><a href="https://leetcode.cn/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/">从尾到头打印链表</a></td><td align="left">栈、递归、链表、双指针</td><td align="left">简单</td></tr><tr><td align="left">0071</td><td align="left"><a href="https://leetcode.cn/problems/simplify-path/">简化路径</a></td><td align="left"></td><td align="left">栈、字符串</td></tr></tbody></table><h2 id="04-队列"><a href="#04-队列" class="headerlink" title="04. 队列"></a>04. 队列</h2><h3 id="队列基础题目"><a href="#队列基础题目" class="headerlink" title="队列基础题目"></a>队列基础题目</h3><table><thead><tr><th align="left">题号</th><th align="left">标题</th><th align="left">标签</th><th align="left">难度</th></tr></thead><tbody><tr><td align="left">0622</td><td align="left"><a href="https://leetcode.cn/problems/design-circular-queue/">设计循环队列</a></td><td align="left">设计、队列、数组、链表</td><td align="left">中等</td></tr><tr><td align="left">0346</td><td align="left"><a href="https://leetcode.cn/problems/moving-average-from-data-stream/">数据流中的移动平均值</a></td><td align="left">设计、队列、数组、数据流</td><td align="left">简单</td></tr><tr><td align="left">0225</td><td align="left"><a href="https://leetcode.cn/problems/implement-stack-using-queues/">用队列实现栈</a></td><td align="left">栈、设计、队列</td><td align="left">简单</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lua快速入门</title>
      <link href="/posts/71a33465/"/>
      <url>/posts/71a33465/</url>
      
        <content type="html"><![CDATA[<h1 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h1><p><a href="https://wiki.luatos.com/_static/luatos-emulator/lua.html">luatOS在线测试</a></p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>变量声明：直接赋值（全局），加local只能在当前作用域里用； </p><p>没有被声明过的变量类型都是nil，值也是nil；</p><p>可以同时给多个变量赋值，比如 a,b &#x3D; 1,2</p><p>如果 a,b,c &#x3D; 1,2   则c&#x3D;nil</p><p>数值型：只有number，支持进制和科学计数法，支持乘幂符号，如2^5</p><h1 id="字符串的使用"><a href="#字符串的使用" class="headerlink" title="字符串的使用"></a>字符串的使用</h1><p>字符串：用双引号或者单引号表示，支持换行符\n</p><p>多行文本：[[……]]</p><p>字符串连接符号：”..”,如 a..b</p><p>tostring：数字转成字符串</p><p>tonumber：字符串转成数字</p><p>查看字符串长度:”#”,如 #a</p><h1 id="函数的使用"><a href="#函数的使用" class="headerlink" title="函数的使用"></a>函数的使用</h1><p>函数：</p><pre><code>function f(a,b)    print(a,b)end</code></pre><p>返回可以用return，可以返回多个值</p><h1 id="table的基本用途"><a href="#table的基本用途" class="headerlink" title="table的基本用途"></a>table的基本用途</h1><p>table：什么都可以存，a &#x3D; {1,”ac”,{},function() end};下标从1开始；</p><p>用#也可以获得table的长度</p><p>insert: 插入 ，如table.insert(a,”d”)；table.insert(a,2,”d”)</p><p>remove: 移除 ， 如 table.remove(a,2),并且返回移除的值</p><p>可以构造以字符串作为下标的table：如</p><pre><code>a = &#123;a=1,b=&quot;123&quot;,c=function()end&#125;a[&quot;a&quot;] = 1;</code></pre><p>全局表_G:所有元素都在全局表中</p><h1 id="逻辑判断"><a href="#逻辑判断" class="headerlink" title="逻辑判断"></a>逻辑判断</h1><p>逻辑判断：不等于是~&#x3D;;其他与C类似</p><p>支持 and 、or 、not</p><p>lua里数字0也代表真，nil代表假</p><p>三目运算： 如 b &gt; 10 and “yes” or “no”</p><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><pre><code>if a&gt;10 then    print(1)elseif a&gt;5 then    print(2)else     print(0)end</code></pre><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><pre><code>for i = 1,10,2 do//从1到10 步长为2    print(i)end</code></pre><p>注：在for循环里不能对i进行修改，可以break</p><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><pre><code>local n = 10while n &gt; 1 do    print(n)    n = n - 1 //lua里面不支持自减自加end</code></pre><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>string.char：可以把ascll码变为字符串</p><p>string.byte: 可以直接取出一位，如 n &#x3D; string.byte(s,2)</p>]]></content>
      
      
      <categories>
          
          <category> 游戏开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lua </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity+Vuforia识别3D物体</title>
      <link href="/posts/1cd0ef1f/"/>
      <url>/posts/1cd0ef1f/</url>
      
        <content type="html"><![CDATA[<h1 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h1><p>Unity2020.3.46 + Vuforia Engine 9.8.13<br>UnityAndroid设置：Project Settings–&gt;Player–&gt;<br><img src="/img/Graduation/1.png" loading="lazy"></p><p>注：导入Vuforia要耐心等待，需要一段时间。</p><h1 id="3D物体数据扫描"><a href="#3D物体数据扫描" class="headerlink" title="3D物体数据扫描"></a>3D物体数据扫描</h1><p>需要在安卓手机上安装一个Vuforia Object Scanner应用，用于3D物体的数据扫描。 <a href="https://developer.vuforia.com/downloads/tool">Scanner</a><br>下载的压缩包中不止有程序的apk文件，还有两张.pdf文件，这就是扫描物体时所必须要用的扫描基准图,打印其中的A4，并用手机安装软件。<br>将物体摆好用手机扫描：<br><img src="/img/Graduation/2.jpg" alt="扫描1" loading="lazy"><br>录制尽量多的识别点：<br><img src="/img/Graduation/3.jpg" alt="扫描2" loading="lazy"><br><img src="/img/Graduation/4.jpg" alt="扫描3" loading="lazy"></p><p>最后将得到的od文件上传到电脑。<br>来到<a href="https://developer.vuforia.com/vui/develop/licenses">官网</a>申请一个license。<br>然后来到Target Manager添加Database<br><img src="/img/Graduation/5.png" alt="Database" loading="lazy"><br>Add Target:<br><img src="/img/Graduation/6.png" alt="Target" loading="lazy"><br>然后全部选中生成unitypackage。<br><img src="/img/Graduation/7.png" alt="unitypackage" loading="lazy"></p><h1 id="Unity操作"><a href="#Unity操作" class="headerlink" title="Unity操作"></a>Unity操作</h1><p>将生成的文件导入项目中。</p><h2 id="创建场景"><a href="#创建场景" class="headerlink" title="创建场景"></a>创建场景</h2><p>创建Vuforia插件中的ARCamera和ObjectTarget，并删除原场景的MainCamera。GameObject–&gt;Vuforia Engine–&gt;<br><img src="/img/Graduation/8.png" alt="scene" loading="lazy"><br>在ARCamera下的Vuforia Behaviour中添加许可证书。<br><img src="/img/Graduation/9.png" alt="licence" loading="lazy"><br>选择ObjectTarget–&gt;Inspector界面进行设置。<br><img src="/img/Graduation/10.png" alt="obtarget" loading="lazy"><br>最后可以在下面创建想对应的模型。<br><img src="/img/Graduation/11.png" alt="model" loading="lazy"><br>（如果有多个物体对应关系，就多创建几个ObjectTarget，使用同一个事件脚本，不同target。）</p><h2 id="生成应用"><a href="#生成应用" class="headerlink" title="生成应用"></a>生成应用</h2><p>要先转换成Android平台，然后build。<br><img src="/img/Graduation/12.png" alt="build" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AR增强现实 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>勇士传说(一)</title>
      <link href="/posts/96e04cc8/"/>
      <url>/posts/96e04cc8/</url>
      
        <content type="html"><![CDATA[<h1 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h1><p>《勇士传说》是一款横版卷轴动作类游戏，是来自M_Studio老师的教程，在这里会记录一个零基础小白的学习历程和学习过程中的思考。</p><h1 id="学习历程（已完成）"><a href="#学习历程（已完成）" class="headerlink" title="学习历程（已完成）"></a>学习历程（已完成）</h1><ul><li>导入素材（人物和场景）</li><li>了解编辑器窗口布局设定</li><li>了解熟悉 Tilemap 瓦片地图功能</li><li>素材图片切割方法</li><li>叠层概念</li><li>创建 Rule Tile 实现快速场景绘制</li><li>创建 Animated Tile 实现动态瀑布效果</li></ul><h1 id="学习中遇到的问题"><a href="#学习中遇到的问题" class="headerlink" title="学习中遇到的问题"></a>学习中遇到的问题</h1><ul><li>矩形工具选中删除（已解决）：按住shift</li></ul>]]></content>
      
      
      <categories>
          
          <category> 游戏开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 勇士传说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百奥春招笔试题</title>
      <link href="/posts/fc1d6a7/"/>
      <url>/posts/fc1d6a7/</url>
      
        <content type="html"><![CDATA[<h1 id="题目情况"><a href="#题目情况" class="headerlink" title="题目情况"></a>题目情况</h1><p>前两题都算是送分题，第一题求和，第二题是最大对角线和。第三题是求包含0~max的最短子串长度，第四题是三角形最小路径和。</p><h1 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h1><p>给你一串数字nums和它的最大值maxnum，求得包含0~maxnum所有值的最短子串长度，并返回该长度，若不存在，则返回-1。</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>我是用哈希表结合双指针来做的，从前往后依次读入，并更新哈希表，若该数在哈希表中value&#x3D;0，则将r指针指向该位置，同时去判断l指针所指的树在哈希表中的value值是否大于1，若是，则l指针右移，value值减一。遍历完数组可以得到包含该数组所有不重复元素的最小子串，再进行判断是否包含0~maxnum。若是则返回r-l+1，否则返回-1。</p><h1 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h1><p>给出一个三角形（数据数组），找出从上往下的最小路径和。每一步只能移动到下一行中的相邻结点上。</p><h2 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h2><p>因为我在宿舍做题并不是很专注，所以花了一段时间想动态规划并没有想出来，就用深搜去暴力了。答题结束后，这个动规方程就不难想出来了hhh。</p><p>dp[i][j]表示从第一行的顶点走到坐标为(i,j)位置的最短路径。dp[i][j]&#x3D;min(dp[i-1][j], dp[i-1][j-1])+triangle[i][j];<br>注意边界情况即可。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题第一天</title>
      <link href="/posts/ff055d60/"/>
      <url>/posts/ff055d60/</url>
      
        <content type="html"><![CDATA[<h1 id="（热题HOT-100）1-两数之和"><a href="#（热题HOT-100）1-两数之和" class="headerlink" title="（热题HOT 100）1.两数之和"></a>（热题HOT 100）1.两数之和</h1><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><h2 id="思路和时间复杂度"><a href="#思路和时间复杂度" class="headerlink" title="思路和时间复杂度"></a>思路和时间复杂度</h2><p>思路：用双指针，先排序并记录原来对应位置，设置头指针和尾指针if(sum &lt; target) left++；反之 right++；直到sum与target相等。<br>时间复杂度： 排序为O(nlogn)，指针移动为O(n)，所以时间复杂度为O(nlogn)。</p><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><pre><code>class Solution &#123;public:    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123;        int n = nums.size();        vector&lt;int&gt; id;        for(int i = 0;i &lt; n;i++) id.push_back(i);        sort(id.begin(),id.end(),[nums, id](int i, int j)&#123;            return nums[id[i]] &lt; nums[id[j]];        &#125;);        int l = 0,r = n-1;        vector&lt;int&gt; ret;        while(l &lt; r)&#123;            int sum = nums[id[l]] + nums[id[r]];            if(sum == target)&#123;                ret.push_back(id[l]);                ret.push_back(id[r]);                break;            &#125;else if(sum &lt; target)&#123;                l++;            &#125;else if(sum &gt; target)&#123;                r--;            &#125;        &#125;        return ret;    &#125;&#125;;</code></pre><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>也可以用哈希表来做，空间换时间。</p><h1 id="（热题HOT-100）2-两数相加"><a href="#（热题HOT-100）2-两数相加" class="headerlink" title="（热题HOT 100）2.两数相加"></a>（热题HOT 100）2.两数相加</h1><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><h2 id="思路和时间复杂度-1"><a href="#思路和时间复杂度-1" class="headerlink" title="思路和时间复杂度"></a>思路和时间复杂度</h2><p>思路：竖式加法，考虑进位。<br>时间复杂度： O(n)</p><h2 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h2><pre><code>/** * Definition for singly-linked list. * struct ListNode &#123; *     int val; *     ListNode *next; *     ListNode() : val(0), next(nullptr) &#123;&#125; *     ListNode(int x) : val(x), next(nullptr) &#123;&#125; *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125; * &#125;; */class Solution &#123;public:    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) &#123;        ListNode* H = new ListNode();        ListNode* p = H;        int carry = 0;        while(l1 || l2 || carry)&#123;            int val = 0;            if(l1) &#123;                val += l1-&gt;val;                l1 = l1-&gt;next;            &#125;            if(l2) &#123;                val += l2-&gt;val;                l2 = l2-&gt;next;            &#125;            val += carry;            carry = val/10;            ListNode* node = new ListNode(val % 10);            p-&gt;next = node;            p = node;        &#125;        return(H-&gt;next);                                              &#125;&#125;;</code></pre><h1 id="（热题HOT-100）3-无重复字符的最长子串"><a href="#（热题HOT-100）3-无重复字符的最长子串" class="headerlink" title="（热题HOT 100）3.无重复字符的最长子串"></a>（热题HOT 100）3.无重复字符的最长子串</h1><p>给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。</p><h2 id="思路和时间复杂度-2"><a href="#思路和时间复杂度-2" class="headerlink" title="思路和时间复杂度"></a>思路和时间复杂度</h2><p>思路：哈希表记录出现次数，通过前后指针移动遍历。<br>时间复杂度： O(n)</p><h2 id="核心代码-2"><a href="#核心代码-2" class="headerlink" title="核心代码"></a>核心代码</h2><pre><code>class Solution &#123;public:    int lengthOfLongestSubstring(string s) &#123;        int n = s.length();        int ret = 0;        int l = 0;        unordered_map&lt;char,int&gt; count;        for(int r = 0;r &lt; n;r++)&#123;            count[s[r]]++;            while(count[s[r]] &gt; 1)&#123;                count[s[l++]]--;            &#125;            ret = max(ret, r-l+1);        &#125;        return ret;    &#125;&#125;;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于增强现实的智慧校园交互平台</title>
      <link href="/posts/1d4fcfd4/"/>
      <url>/posts/1d4fcfd4/</url>
      
        <content type="html"><![CDATA[<h1 id="基本内容与要求"><a href="#基本内容与要求" class="headerlink" title="基本内容与要求"></a>基本内容与要求</h1><p>利用增强现实技术，实现智慧校园信息可视化及交互</p>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AR增强现实 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之jQuery学习（九）jQuery 其他方法</title>
      <link href="/posts/d81dec03/"/>
      <url>/posts/d81dec03/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery-拷贝对象"><a href="#jQuery-拷贝对象" class="headerlink" title="jQuery 拷贝对象"></a>jQuery 拷贝对象</h1><p>如果想要把某个对象拷贝（合并）给另一个对象使用，此时可以使用$.extend() 方法。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><pre class="language-js" data-language="js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">[</span>deep<span class="token punctuation">]</span><span class="token punctuation">,</span>target<span class="token punctuation">,</span>object1<span class="token punctuation">,</span><span class="token punctuation">[</span>objectN<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><ol><li>deep: 如果设为true为深拷贝，默认为false 浅拷贝</li><li>target: 要拷贝的目标对象</li><li>object1: 待拷贝到第一个对象的对象</li><li>objectN: 待拷贝到第N个对象的对象</li><li>浅拷贝是把被拷贝的对象<strong>复杂数据类型中的地址</strong>拷贝给目标对象，修改目标对象会影响被拷贝对象</li><li>深拷贝，前面加 true ,完全克隆（拷贝的对象，而不是地址），修改目标对象不会影响被拷贝对象。</li></ol><h1 id="jQuery-多库共存"><a href="#jQuery-多库共存" class="headerlink" title="jQuery 多库共存"></a>jQuery 多库共存</h1><h2 id="问题概述"><a href="#问题概述" class="headerlink" title="问题概述"></a>问题概述</h2><p>jQuery 使用$作为标识符，随着jQuery的流行，其他js库也会用$作为标识符，这样一起使用会引起冲突。</p><h2 id="客观需求"><a href="#客观需求" class="headerlink" title="客观需求"></a>客观需求</h2><p>需要一个解决方案，让jQuery和其他的js库不存在冲突，可以同时存在，这就叫做多库共存。</p><h2 id="jQuery-解决方案"><a href="#jQuery-解决方案" class="headerlink" title="jQuery 解决方案"></a>jQuery 解决方案</h2><ol><li>把里面的 $ 符号 统一改为 jQuery。比如 jQuery(“div”)</li><li>jQuery 变量规定新的名称：$.noConflict()     var xx &#x3D; $.noConflict();</li></ol><h1 id="jQuery-插件"><a href="#jQuery-插件" class="headerlink" title="jQuery 插件"></a>jQuery 插件</h1><p>jQuery 功能比较有限，想要更复杂的特效效果，可以借助 jQuery 插件完成</p><p>注意：这些插件也是依赖于 jQuery 来完成的，所以必须先引入 jQuery 文件，因此也称为 jQuery 插件。</p><h2 id="jQuery-插件常用网站"><a href="#jQuery-插件常用网站" class="headerlink" title="jQuery 插件常用网站"></a>jQuery 插件常用网站</h2><ol><li><a href="http://www.jq22.com/">jQuery插件库</a></li><li><a href="http://www.htmleaf.com/">jQuery之家</a></li></ol><h2 id="jQuery-插件使用步骤"><a href="#jQuery-插件使用步骤" class="headerlink" title="jQuery 插件使用步骤"></a>jQuery 插件使用步骤</h2><ol><li>引入相关文件。（jQuery 文件和插件文件）</li><li>复制相关html、css、js（调用插件）。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之jQuery学习（八）jQuery 事件</title>
      <link href="/posts/ae82dbbc/"/>
      <url>/posts/ae82dbbc/</url>
      
        <content type="html"><![CDATA[<h1 id="单个事件注册"><a href="#单个事件注册" class="headerlink" title="单个事件注册"></a>单个事件注册</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><pre class="language-js" data-language="js"><code class="language-js">element<span class="token punctuation">.</span><span class="token function">事件</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> 事件处理程序 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>其他事件和原生基本一致。</p><p>比如mouseover、mouseout、focus、blur等。</p><h1 id="事件处理-on-绑定事件"><a href="#事件处理-on-绑定事件" class="headerlink" title="事件处理 on() 绑定事件"></a>事件处理 on() 绑定事件</h1><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><pre class="language-js" data-language="js"><code class="language-js">element<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>events<span class="token punctuation">,</span><span class="token punctuation">[</span>selector<span class="token punctuation">]</span><span class="token punctuation">,</span>fn<span class="token punctuation">)</span></code></pre><ol><li>events：一个或多个用空格分隔的事件类型，如”click”或”keydown”。</li><li>selector：元素的子元素选择器</li><li>fn：回调函数，即绑定在元素身上的监听函数。</li></ol><h2 id="on-方法实现事件委派"><a href="#on-方法实现事件委派" class="headerlink" title="on() 方法实现事件委派"></a>on() 方法实现事件委派</h2><p>事件委派的定义就是，把原来嫁给子元素身上的事件绑定在父元素身上，就是把事件委派给父元素。</p><p>例如：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hello world!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="on-给动态元素绑定事件"><a href="#on-给动态元素绑定事件" class="headerlink" title="on() 给动态元素绑定事件"></a>on() 给动态元素绑定事件</h2><p>动态创建的元素，click() 没有办法绑定事件，on() 可以给动态生成的元素绑定事件</p><h1 id="事件处理-off-解绑事件"><a href="#事件处理-off-解绑事件" class="headerlink" title="事件处理 off() 解绑事件"></a>事件处理 off() 解绑事件</h1><p>off() 方法可以移除通过 on() 方法添加的事件处理程序。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//解绑p元素所有事件处理程序</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//解绑p元素上面的点击事件 后面的 foo 是监听函数名</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//解绑事件委托</span></code></pre><p>如果有的时间只想触发一次，可以使用 one() 来绑定事件。</p><h1 id="自动触发事件-trigger"><a href="#自动触发事件-trigger" class="headerlink" title="自动触发事件 trigger()"></a>自动触发事件 trigger()</h1><p>有些时间希望自动触发，比如轮播图自动播放功能跟点击右侧按钮一致。可以利用定时器自动触发右侧按钮点击事件，不必鼠标点击触发。</p><pre class="language-js" data-language="js"><code class="language-js">element<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//第一种简写形式</span>element<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">)</span> <span class="token comment">//第二种自动触发模式</span>element<span class="token punctuation">.</span><span class="token function">triggerHandler</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token comment">//第三种自动触发模式，不会有元素默认行为</span></code></pre><h1 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h1><p>事件被触发，就会有事件对象的产生。</p><pre class="language-js" data-language="js"><code class="language-js">element<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>events<span class="token punctuation">,</span><span class="token punctuation">[</span>selector<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>阻止默认行为：<code>event.preventDefault()</code> 或者 <code>return false</code></p><p>阻止冒泡：<code>event.stopPropagation()</code></p>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之jQuery学习（七）jQuery 的常用 API 之 jQuery 尺寸和位置方法</title>
      <link href="/posts/654eb08d/"/>
      <url>/posts/654eb08d/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery-尺寸"><a href="#jQuery-尺寸" class="headerlink" title="jQuery 尺寸"></a>jQuery 尺寸</h1><ul><li>设置或者获取高度</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//带参数表示设置高度</span><span class="token function">$</span><span class="token punctuation">(</span>“img”<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不带参数获取高度</span><span class="token function">$</span><span class="token punctuation">(</span>“img”<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>获取网页的可视区宽高</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//获取可视区宽度</span><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取可视区高度</span><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="jQuery-位置"><a href="#jQuery-位置" class="headerlink" title="jQuery 位置"></a>jQuery 位置</h1><ul><li><code>offset</code>方法获取元素距离<code>document</code>的位置</li><li><code>position</code>方法获取的是元素距离<code>定位父元素</code>的位置</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//获取元素距离document的位置,返回值为对象：&#123;left:100, top:100&#125;</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取相对于其最近的有定位的父元素的位置。</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><code>scrollTop</code>与<code>scrollLeft</code> 方法,设置或者获取垂直滚动条的位置</li></ul><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//获取页面被卷曲的高度</span><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取页面被卷曲的宽度</span><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置页面被卷曲的高度</span><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置页面被卷曲的宽度</span><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollLeft</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之jQuery学习（六）jQuery 的常用 API 之 jQuery 元素操作</title>
      <link href="/posts/2b884c0c/"/>
      <url>/posts/2b884c0c/</url>
      
        <content type="html"><![CDATA[<p>主要是<strong>遍历</strong>、创建、添加、删除元素操作。</p><h1 id="遍历元素"><a href="#遍历元素" class="headerlink" title="遍历元素"></a>遍历元素</h1><p>jQuery 隐式迭代是对同一类元素做了同样的操作。</p><h2 id="语法1："><a href="#语法1：" class="headerlink" title="语法1："></a>语法1：</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> domEle</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> xxx<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><ol><li>each()方法遍历匹配到的每一个元素。主要用 DOM 处理。each 每一个</li><li>里面的回调函数有2个参数：index 是每个元素的索引号；demEle 是每个 DOM 元素对象，不是jQuery 对象</li><li>所以想要使用 jQuery 方法，需要给这个 DOM 元素转换为 jQuery 对象 $(domEle)</li></ol><h2 id="语法2："><a href="#语法2：" class="headerlink" title="语法2："></a>语法2：</h2><pre class="language-js" data-language="js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> xxx<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><ol><li>$.each()方法可用于遍历任何对象。主要用于数据处理，比如数组，对象</li><li>里面有2个参数：index 是每个元素的索引号；element 是遍历内容</li></ol><h1 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h1><h2 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;li>&lt;/li>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>动态创建了一个<code>&lt;li&gt;</code></p><h1 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h1><h2 id="内部添加"><a href="#内部添加" class="headerlink" title="内部添加"></a>内部添加</h2><pre class="language-js" data-language="js"><code class="language-js">element<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"内容"</span><span class="token punctuation">)</span> <span class="token comment">//添加到元素内部的最后面</span>element<span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span><span class="token string">"内容"</span><span class="token punctuation">)</span> <span class="token comment">//添加到元素内部的最前面</span></code></pre><p>内部添加元素，生成之后，他们是父子关系。</p><h2 id="外部添加"><a href="#外部添加" class="headerlink" title="外部添加"></a>外部添加</h2><pre class="language-js" data-language="js"><code class="language-js">element<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token string">"内容"</span><span class="token punctuation">)</span>  <span class="token comment">//把内容放入目标元素后面</span>element<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token string">"内容"</span><span class="token punctuation">)</span>  <span class="token comment">//把内容放入目标元素前面</span></code></pre><p>外部添加元素，生成之后，他们是兄弟关系。</p><h1 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h1><pre class="language-js" data-language="js"><code class="language-js">element<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//删除元素本身</span>element<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//删除元素集合中所有的子节点</span>element<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token comment">//清空匹配的元素内容</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之jQuery学习（五）jQuery 的常用 API 之 jQuery 内容文本值</title>
      <link href="/posts/38a3be14/"/>
      <url>/posts/38a3be14/</url>
      
        <content type="html"><![CDATA[<p>主要针对元素的<strong>内容</strong>还有<strong>表单的值</strong>操作</p><h1 id="普通元素内容-html-（相当于原生-inner-HTML）"><a href="#普通元素内容-html-（相当于原生-inner-HTML）" class="headerlink" title="普通元素内容 html() （相当于原生 inner HTML）"></a>普通元素内容 html() （相当于原生 inner HTML）</h1><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//获取元素的内容</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">"内容"</span><span class="token punctuation">)</span> <span class="token comment">//设置元素的内容</span></code></pre><h1 id="普通元素文本内容-text-（相当于原生-inner-Text）"><a href="#普通元素文本内容-text-（相当于原生-inner-Text）" class="headerlink" title="普通元素文本内容 text() （相当于原生 inner Text）"></a>普通元素文本内容 text() （相当于原生 inner Text）</h1><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//获取元素的文本内容</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"文本内容"</span><span class="token punctuation">)</span>  <span class="token comment">//设置元素的文本内容</span></code></pre><h1 id="表单的值-val-（相当于原生-value）"><a href="#表单的值-val-（相当于原生-value）" class="headerlink" title="表单的值 val() （相当于原生 value）"></a>表单的值 val() （相当于原生 value）</h1><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//获取表单的值</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">"表单值"</span><span class="token punctuation">)</span>  <span class="token comment">//设置表单的值</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之jQuery学习（四）jQuery 的常用 API 之 jQuery 属性操作</title>
      <link href="/posts/25fb7f05/"/>
      <url>/posts/25fb7f05/</url>
      
        <content type="html"><![CDATA[<h1 id="设置或获取元素固有属性值-prop"><a href="#设置或获取元素固有属性值-prop" class="headerlink" title="设置或获取元素固有属性值 prop()"></a>设置或获取元素固有属性值 prop()</h1><p>所谓元素固有属性就是元素本身自带的属性，比如<a>元素里面的 href 。</p><h2 id="获取属性语法"><a href="#获取属性语法" class="headerlink" title="获取属性语法"></a>获取属性语法</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"属性"</span><span class="token punctuation">)</span></code></pre><h2 id="设置属性语法"><a href="#设置属性语法" class="headerlink" title="设置属性语法"></a>设置属性语法</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"属性"</span><span class="token punctuation">,</span><span class="token string">"属性值"</span><span class="token punctuation">)</span></code></pre><h1 id="设置或获取元素自定义属性值-attr"><a href="#设置或获取元素自定义属性值-attr" class="headerlink" title="设置或获取元素自定义属性值 attr()"></a>设置或获取元素自定义属性值 attr()</h1><p>用户自己给元素添加的属性成为自定义属性。</p><h2 id="获取属性语法-1"><a href="#获取属性语法-1" class="headerlink" title="获取属性语法"></a>获取属性语法</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"属性"</span><span class="token punctuation">)</span></code></pre><h2 id="设置属性语法-1"><a href="#设置属性语法-1" class="headerlink" title="设置属性语法"></a>设置属性语法</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"属性"</span><span class="token punctuation">,</span><span class="token string">"属性值"</span><span class="token punctuation">)</span></code></pre><h1 id="数据缓存"><a href="#数据缓存" class="headerlink" title="数据缓存"></a>数据缓存</h1><p>data() 方法可以在指定的元素上存取数据，并不会修改 DOM 元素结构。一旦页面刷新，之前存放的数据将被移除。</p><h2 id="附加数据算法"><a href="#附加数据算法" class="headerlink" title="附加数据算法"></a>附加数据算法</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">)</span></code></pre><h2 id="获取数据语法"><a href="#获取数据语法" class="headerlink" title="获取数据语法"></a>获取数据语法</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span></code></pre><p>还可以读取 HTML5 自定义属性 data-index ，得到的是数字型。</p>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之jQuery学习（三）jQuery 的常用 API 之 jQuery 效果</title>
      <link href="/posts/8a32779a/"/>
      <url>/posts/8a32779a/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery-常见效果"><a href="#jQuery-常见效果" class="headerlink" title="jQuery 常见效果"></a>jQuery 常见效果</h1><p>**jQuery **给我们封装了很多动画效果，最为常见的有：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 显示隐藏</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 滑动</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">slideToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 淡入淡出</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">fadeOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">fadeToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">fadeTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 自定义动画</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="显示隐藏效果"><a href="#显示隐藏效果" class="headerlink" title="显示隐藏效果"></a>显示隐藏效果</h1><h2 id="显示语法规范"><a href="#显示语法规范" class="headerlink" title="显示语法规范"></a>显示语法规范</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">[</span>speed<span class="token punctuation">,</span><span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="显示参数"><a href="#显示参数" class="headerlink" title="显示参数"></a>显示参数</h2><ol><li>参数可以省略，无动画直接显示。</li><li>speed：三种预定速度之一的字符串(“slow”,”nomal”,or “fast”)或表示动画时长的毫秒数值（如：100）。</li><li>easing：(Optional)用来指定切换效果，默认是”swing”,可用参数”linear”。</li><li>fn：回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ol><h2 id="隐藏语法规范"><a href="#隐藏语法规范" class="headerlink" title="隐藏语法规范"></a>隐藏语法规范</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">[</span>speed<span class="token punctuation">,</span><span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="隐藏参数"><a href="#隐藏参数" class="headerlink" title="隐藏参数"></a>隐藏参数</h2><ol><li>参数可以省略，无动画直接显示。</li><li>speed：三种预定速度之一的字符串(“slow”,”nomal”,or “fast”)或表示动画时长的毫秒数值（如：100）。</li><li>easing：(Optional)用来指定切换效果，默认是”swing”,可用参数”linear”。</li><li>fn：回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ol><h2 id="切换语法规范"><a href="#切换语法规范" class="headerlink" title="切换语法规范"></a>切换语法规范</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">[</span>speed<span class="token punctuation">,</span><span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="切换参数"><a href="#切换参数" class="headerlink" title="切换参数"></a>切换参数</h2><ol><li>参数可以省略，无动画直接显示。</li><li>speed：三种预定速度之一的字符串(“slow”,”nomal”,or “fast”)或表示动画时长的毫秒数值（如：100）。</li><li>easing：(Optional)用来指定切换效果，默认是”swing”,可用参数”linear”。</li><li>fn：回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ol><h1 id="滑动效果"><a href="#滑动效果" class="headerlink" title="滑动效果"></a>滑动效果</h1><p>下滑：slideDown()<br>上滑：slideUp()<br>滑动切换：slideToggle()</p><p>语法以及参数与<em>显示隐藏效果</em>一致。</p><h1 id="事件切换"><a href="#事件切换" class="headerlink" title="事件切换"></a>事件切换</h1><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">hover</span><span class="token punctuation">(</span>over<span class="token punctuation">.</span> <span class="token punctuation">,</span> out<span class="token punctuation">.</span><span class="token punctuation">)</span></code></pre><ol><li>over.鼠标移到元素上要触发的函数(相当于 mouseenter )</li><li>out.鼠标移出元素要触发的函数(相当于 mouseleave )</li></ol><h1 id="动画队列及其停止排队方法"><a href="#动画队列及其停止排队方法" class="headerlink" title="动画队列及其停止排队方法"></a>动画队列及其停止排队方法</h1><h2 id="动画或效果队列"><a href="#动画或效果队列" class="headerlink" title="动画或效果队列"></a>动画或效果队列</h2><p>动画或者效果一旦触发就会执行，如果多次触发，就造成多个动画或者效果排队执行。</p><h2 id="停止排队"><a href="#停止排队" class="headerlink" title="停止排队"></a>停止排队</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ol><li>stop()方法用于停止动画或效果</li><li>注意：stop()写到动画或者效果的前面，相当于停止结束上一次的动画。</li></ol><h1 id="淡入淡出效果"><a href="#淡入淡出效果" class="headerlink" title="淡入淡出效果"></a>淡入淡出效果</h1><p>淡入：fadeIn()<br>淡出：fadeOut()<br>淡入淡出切换：fadeToggle()</p><p>语法以及参数也与<em>显示隐藏效果</em>一致。</p><h2 id="渐进方式调整到指定的不透明度"><a href="#渐进方式调整到指定的不透明度" class="headerlink" title="渐进方式调整到指定的不透明度"></a>渐进方式调整到指定的不透明度</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">fadeTo</span><span class="token punctuation">(</span><span class="token punctuation">[</span>speed<span class="token punctuation">]</span><span class="token punctuation">,</span>opacity<span class="token punctuation">,</span><span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="效果参数"><a href="#效果参数" class="headerlink" title="效果参数"></a>效果参数</h2><p><code>opacity</code>透明度必须写，取值 0~1 之间。</p><p>其余参数与<em>显示隐藏效果</em>一致。</p><h1 id="自定义动画-animate"><a href="#自定义动画-animate" class="headerlink" title="自定义动画 animate"></a>自定义动画 animate</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">animate</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span><span class="token punctuation">[</span>speed<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p><code>params</code>:<strong>想要更改的样式属性，以对象形式传递，必须写。属性名可以不用带引号，如果是复合属性则需要采取驼峰命名法 borderLeft。</strong>其余参数可以省略，与<em>显示隐藏效果</em>一致。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>left<span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>top<span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>opacity<span class="token operator">:</span> <span class="token number">.4</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之jQuery学习（二）jQuery 的常用 API 之 jQuery 选择器与样式操作</title>
      <link href="/posts/8878a5d1/"/>
      <url>/posts/8878a5d1/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery-选择器"><a href="#jQuery-选择器" class="headerlink" title="jQuery 选择器"></a>jQuery 选择器</h1><ul><li>jQuery选择器是jQuery为我们提供的一组<code>方法</code>，让我们更加方便的获取到页面中的元素。<br>注意：jQuery选择器返回的是<code>jQuery对象</code>。</li><li>jQuery选择器有很多，基本兼容了CSS1到CSS3所有的选择器，并且jQuery还添加了很多扩展性的选择器。</li><li>jQuery选择器虽然很多，但是选择器之间可以相互替代，就是说获取一个元素，你会有很多种方法获取到。<br>所以我们平时真正能用到的只是少数的最常用的选择器。</li></ul><h2 id="jQuery-基础选择器"><a href="#jQuery-基础选择器" class="headerlink" title="jQuery 基础选择器"></a>jQuery 基础选择器</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"选择器"</span><span class="token punctuation">)</span> <span class="token comment">// 里面选择器直接写CSS选择器即可，但是要加引号</span></code></pre><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>ID选择器</td><td>$(“#id”);</td><td>获取指定ID的元素</td></tr><tr><td>全选选择器</td><td>$(“*”)</td><td>匹配所有元素</td></tr><tr><td>类选择器</td><td>$(“.class”);</td><td>获取同一类class的元素</td></tr><tr><td>标签选择器</td><td>$(“div”);</td><td>获取同一类标签的所有元素</td></tr><tr><td>并集选择器</td><td>$(“div,p,li”);</td><td>使用逗号分隔，只要符合条件之一就可。</td></tr><tr><td>交集选择器</td><td>$(“div.redClass”);</td><td>获取class为redClass的div元素</td></tr></tbody></table><h2 id="jQuery-层级选择器"><a href="#jQuery-层级选择器" class="headerlink" title="jQuery 层级选择器"></a>jQuery 层级选择器</h2><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>子代选择器</td><td>$(“ul&gt;li”);</td><td>使用&gt;号，获取儿子层级的元素，注意，并不会获取孙子层级的元素</td></tr><tr><td>后代选择器</td><td>$(“ul li”);</td><td>使用空格，代表后代选择器，获取ul下的所有li元素，包括孙子等</td></tr></tbody></table><h2 id="隐式迭代"><a href="#隐式迭代" class="headerlink" title="隐式迭代"></a>隐式迭代</h2><p>遍历内部 DOM 元素（伪数组形式存储）的过程就叫做<strong>隐式迭代</strong>。简单理解一下就是给匹配到的所有元素进行循环遍历，执行相应的方法，不需要我们进行循环，简化了我们的操作，方便调用。</p><h2 id="jQuery-筛选选择器"><a href="#jQuery-筛选选择器" class="headerlink" title="jQuery 筛选选择器"></a>jQuery 筛选选择器</h2><table><thead><tr><th>语法</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>:first</td><td>$(“li:first”)</td><td>获取第一个 li 元素</td></tr><tr><td>:last</td><td>$(“li:last”)</td><td>获取最后一个 li 元素</td></tr><tr><td>eq(index)</td><td>$(“li:eq(2)”)</td><td>获取到的 li 元素中，选择索引号为2的元素，索引号 index 从0开始</td></tr><tr><td>:odd</td><td>$(“li:odd”)</td><td>获取到的元素中，选择索引号为奇数的元素</td></tr><tr><td>:even</td><td>$(“li:even”)</td><td>获取到的元素中，选择索引号为偶数的元素</td></tr></tbody></table><p>想要查看更多选择器，请到<a href="https://www.jquery123.com/category/selectors/">这里</a>学习</p><h2 id="jQuery-筛选方法"><a href="#jQuery-筛选方法" class="headerlink" title="jQuery 筛选方法"></a>jQuery 筛选方法</h2><table><thead><tr><th>语法</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>children(selector)</td><td>$(“ul”).children(“li”)</td><td>相当于$(“ul&gt;li”)，子类选择器</td></tr><tr><td>find(selector)</td><td>$(“ul”).find(“li”);</td><td>相当于$(“ul li”),后代选择器</td></tr><tr><td>siblings(selector)</td><td>$(“#first”).siblings(“li”);</td><td>查找兄弟节点，不包括自己本身。</td></tr><tr><td>parent()</td><td>$(“#first”).parent();</td><td>查找父亲</td></tr><tr><td>eq(index)</td><td>$(“li”).eq(2);</td><td>相当于$(“li:eq(2)”),index从0开始</td></tr><tr><td>next()</td><td>$(“li”).next()</td><td>找下一个兄弟</td></tr><tr><td>prev()</td><td>$(“li”).prev()</td><td>找上一个兄弟</td></tr></tbody></table><h1 id="jQuery-样式操作"><a href="#jQuery-样式操作" class="headerlink" title="jQuery 样式操作"></a>jQuery 样式操作</h1><h2 id="操作-css-方法"><a href="#操作-css-方法" class="headerlink" title="操作 css 方法"></a>操作 css 方法</h2><p>jQuery 可以使用 css 方法来修改简单元素样式；也可以操作类，修改多个样式</p><ol><li><p>参数只写属性名，则是返回属性值</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>参数是<strong>属性名，属性值，逗号分割，</strong>是设置一组样式，属性必须加引号。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>参数可以是对象形式，方便设置多组样式。格式为<em>属性名：属性值</em>，属性值之间用逗号隔开。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>color<span class="token operator">:</span> red<span class="token punctuation">,</span>font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">20</span>px<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h2 id="设置类样式方法"><a href="#设置类样式方法" class="headerlink" title="设置类样式方法"></a>设置类样式方法</h2><p>作用等同于以前的 classList ，可以操作类样式，注意操作类里面的参数不要加点。</p><ol><li><p>添加类</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"current"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>移除类</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">"current"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>切换类</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">"current"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h2 id="类操作与-className-的区别"><a href="#类操作与-className-的区别" class="headerlink" title="类操作与 className 的区别"></a>类操作与 className 的区别</h2><p>原生 JS 中 className 会覆盖元素里面的类名。</p><p>jQuery 里面类操作只是对指定类进行操作，不影响原先的类名。</p>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之jQuery学习（一）jQuery的基本使用</title>
      <link href="/posts/506feb88/"/>
      <url>/posts/506feb88/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery-的下载"><a href="#jQuery-的下载" class="headerlink" title="jQuery 的下载"></a>jQuery 的下载</h1><p>进入<a href="https://jquery.com/">jQuery官网</a>下载，旧版本可以在 Download 最底下找到。</p><p><strong>版本:</strong></p><ul><li>1x : 兼容 IE6、7、8等低版本的浏览器，但是官网不再更新维护</li><li>2x : 不兼容 IE6、7、8等低版本的浏览器，官网也不再更新维护</li><li>3x : 不兼容 IE6、7、8等低版本的浏览器，官网主要更新维护的版本</li></ul><h1 id="jQuery-的使用步骤"><a href="#jQuery-的使用步骤" class="headerlink" title="jQuery 的使用步骤"></a>jQuery 的使用步骤</h1><ol><li>引入 jQuery 文件（和一般 JS 文件 的引入方式一样）</li><li>就可以开始 jQuery 的使用</li></ol><h1 id="jQuery-的入口函数"><a href="#jQuery-的入口函数" class="headerlink" title="jQuery 的入口函数"></a>jQuery 的入口函数</h1><ul><li>页面 DOM 结构加载完成的入口。</li><li>相当于原生 JS 中的 DOMContentLoaded。</li></ul><p>有以下三种写法:</p><ol><li><p>文档加载完毕（不包含图片等非文字媒体文件），不等图片加载就可以执行这个函数。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//第一种写法</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>同上，文档加载完毕（不包含图片等非文字媒体文件），不等图片加载就可以执行这个函数。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//第二种写法</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>文档加载完毕，且图片加载完毕的时候在执行这个函数，与原生js的onload的加载模式一样。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//第三种写法</span><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre></li></ol><ul><li>原生Js如果编写多个入口函数，后面编写的会覆盖前面编写的；</li><li>JQuery中编写多个入口函数，后面的不会覆盖前面的。</li></ul><h1 id="jQuery-对象"><a href="#jQuery-对象" class="headerlink" title="jQuery 对象"></a>jQuery 对象</h1><h2 id="jQuery-的顶级对象"><a href="#jQuery-的顶级对象" class="headerlink" title="jQuery 的顶级对象 $"></a>jQuery 的顶级对象 $</h2><ol><li>$ 是 jQuery 的别称，在代码中可以使用 jQuery 代替 $ ,但一般为了方便，通常直接使用 $ 。</li><li>$ 是 jQuery 的顶级对象，相当于原生 JavaScript 中的 window 。把元素利用 $ 包装成 jQuery 对象，就可以调用 jQuery 的方法。</li></ol><h2 id="jQuery-对象和-DOM-对象"><a href="#jQuery-对象和-DOM-对象" class="headerlink" title="jQuery 对象和 DOM 对象"></a>jQuery 对象和 DOM 对象</h2><ul><li>DOM 对象 ：用原生 JS 获取来的对象就是 DOM 对象</li><li>jQuery 对象 ：用 jQuery 方法获取的元素就是 jQuery 对象</li><li>jQuery 对象只能使用 jQuery 方法，DOM 对象则使用原生的 JavaScript 属性和方法</li><li>DOM对象与jQuery对象的方法不能混用。</li></ul><h2 id="jQuery-对象和-DOM-对象的相互转换"><a href="#jQuery-对象和-DOM-对象的相互转换" class="headerlink" title="jQuery 对象和 DOM 对象的相互转换"></a>jQuery 对象和 DOM 对象的相互转换</h2><p>因为原生 js 比 jQuery 更大，原生的一些属性和方法 jQuery 没有给我们封装，要想使用这些属性和方法需要把 jQuery 对象转换为 DOM 对象才能使用。</p><ol><li><p>DOM 对象转换成 jQuery 对象 ：$(DOM 对象)</p><pre class="language-none"><code class="language-none">$(&#39;div&#39;);&#x2F;&#x2F;var $obj &#x3D; $(&#39;&#39;div&#39;&#39;);</code></pre></li><li><p>jQuery对象转换成DOM对象：(两种方法)</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//第一种方法</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token comment">//第二种方法</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token comment">// index 是索引号</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之Less学习(一) Less入门</title>
      <link href="/posts/3c8cb91f/"/>
      <url>/posts/3c8cb91f/</url>
      
        <content type="html"><![CDATA[<h1 id="VS-code-中安装less插件并配置使用"><a href="#VS-code-中安装less插件并配置使用" class="headerlink" title="VS code 中安装less插件并配置使用"></a>VS code 中安装less插件并配置使用</h1><ol><li><p>在扩展中安装easy less 这个插件</p></li><li><p>进入easy less扩展设置中，编辑setting.json</p></li><li><p>找到”less.compile”加入下面代码进行配置</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"less.compile"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>     <span class="token property">"compress"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//是否压缩</span>     <span class="token property">"sourceMap"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//是否生成map文件，有了这个可以在调试台看到less行数</span>     <span class="token property">"out"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否输出css文件，false为不输出</span>     <span class="token property">"outExt"</span><span class="token operator">:</span> <span class="token string">".css"</span><span class="token punctuation">,</span> <span class="token comment">// 输出文件的后缀</span>    <span class="token punctuation">&#125;</span></code></pre></li><li><p>之后写完less文件保存后会在同级目录下自动生成一个同名css文件</p></li></ol><h1 id="Less-介绍"><a href="#Less-介绍" class="headerlink" title="Less 介绍"></a>Less 介绍</h1><p>Less 是一门向后兼容的 CSS 扩展语言。Less对CSS语言增加了许多方便的扩展，学习Less能加快开发的速度。</p><h1 id="Less-学习"><a href="#Less-学习" class="headerlink" title="Less 学习"></a>Less 学习</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li><code>@</code>声明变量，作为普通属性值使用</li></ul><pre class="language-less" data-language="less"><code class="language-less"><span class="token variable">@width<span class="token punctuation">:</span></span> 10px<span class="token punctuation">;</span><span class="token variable">@height<span class="token punctuation">:</span></span> <span class="token variable">@width</span> <span class="token operator">+</span> 10px<span class="token punctuation">;</span><span class="token selector">#header</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">@width</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token variable">@height</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>变量用于<code>选择器名</code>、<code>属性名</code>、<code>URL</code>、<code>@import语句</code></li><li>需要添加<code>&#123;&#125;</code></li></ul><pre class="language-less" data-language="less"><code class="language-less"><span class="token variable">@my-selector<span class="token punctuation">:</span></span> banner<span class="token punctuation">;</span><span class="token selector">.@&#123;my-selector&#125;</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token variable">@property<span class="token punctuation">:</span></span> color<span class="token punctuation">;</span><span class="token selector">.widget</span> <span class="token punctuation">&#123;</span>  <span class="token property">@&#123;property&#125;</span><span class="token punctuation">:</span> #0ee<span class="token punctuation">;</span>  <span class="token property">background-@&#123;property&#125;</span><span class="token punctuation">:</span> #999<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token variable">@images<span class="token punctuation">:</span></span> <span class="token string">'../img'</span><span class="token punctuation">;</span><span class="token selector">body</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #444<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'@&#123;images&#125;/white-sand.png'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token variable">@themes<span class="token punctuation">:</span></span> <span class="token string">'../../src/themes'</span><span class="token punctuation">;</span><span class="token atrule">@import '@</span><span class="token punctuation">&#123;</span>themes<span class="token punctuation">&#125;</span><span class="token operator">/</span>tidal<span class="token operator">-</span>wave.less'<span class="token punctuation">;</span></code></pre><ul><li>当一个变量被声明多次，会取<code>最后一次</code>的值，并从当前作用域往外寻找变量。</li></ul><pre class="language-less" data-language="less"><code class="language-less"><span class="token variable">@var<span class="token punctuation">:</span></span> 0<span class="token punctuation">;</span><span class="token selector">.class</span> <span class="token punctuation">&#123;</span>  <span class="token variable">@var<span class="token punctuation">:</span></span> 1<span class="token punctuation">;</span>  <span class="token selector">.brass</span> <span class="token punctuation">&#123;</span>    <span class="token variable">@var<span class="token punctuation">:</span></span> 2<span class="token punctuation">;</span>    <span class="token property">three</span><span class="token punctuation">:</span> <span class="token variable">@var</span><span class="token punctuation">;</span>    <span class="token variable">@var<span class="token punctuation">:</span></span> 3<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token property">one</span><span class="token punctuation">:</span> <span class="token variable">@var</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.class</span> <span class="token punctuation">&#123;</span>  <span class="token property">one</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.class .brass</span> <span class="token punctuation">&#123;</span>  <span class="token property">three</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="混合"><a href="#混合" class="headerlink" title="混合"></a>混合</h2><ul><li>混合（Mixin）是一种将一组属性从一个规则集包含（或混入）到另一个规则集的方法。假设我们定义了一个类（class）如下：</li></ul><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.bordered</span> <span class="token punctuation">&#123;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> dotted 1px black<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> solid 2px black<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>如果我们希望在其它规则集中使用这些属性呢？没问题，我们只需像下面这样输入所需属性的类（class）名称即可，如下所示：</p><pre class="language-less" data-language="less"><code class="language-less"><span class="token selector">#menu a</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #111<span class="token punctuation">;</span>  <span class="token mixin-usage function">.bordered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.post a</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token mixin-usage function">.bordered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><code>.bordered</code> 类所包含的属性就将同时出现在 <code>#menu a</code> 和 <code>.post a</code> 中了。（注意，你也可以使用 <code>#ids</code> 作为 mixin 使用。）</p><h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><ul><li>Less 提供了使用嵌套(nesting)代替层叠或与层叠结合使用的能力</li></ul><p>CSS 代码：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">#header</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#header .navigation</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#header .logo</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p> Less 语言我们可以这样书写代码：</p><pre class="language-less" data-language="less"><code class="language-less"><span class="token selector">#header</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>  <span class="token selector">.navigation</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.logo</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><ul><li>算术运算符 <code>+</code>、<code>-</code>、<code>*</code>、<code>/</code> 可以对任何数字、颜色或变量进行运算。如果可能的话，算术运算符在加、减或比较之前会进行单位换算。计算的结果以最左侧操作数的单位类型为准。如果单位换算无效或失去意义，则忽略单位。无效的单位换算例如：px 到 cm 或 rad 到 % 的转换。</li></ul><pre class="language-less" data-language="less"><code class="language-less"><span class="token comment">// 所有操作数被转换成相同的单位</span><span class="token variable">@conversion-1<span class="token punctuation">:</span></span> 5cm <span class="token operator">+</span> 10mm<span class="token punctuation">;</span> <span class="token comment">// 结果是 6cm</span><span class="token variable">@conversion-2<span class="token punctuation">:</span></span> 2 <span class="token operator">-</span> 3cm <span class="token operator">-</span> 5mm<span class="token punctuation">;</span> <span class="token comment">// 结果是 -1.5cm</span><span class="token comment">// conversion is impossible</span><span class="token variable">@incompatible-units<span class="token punctuation">:</span></span> 2 <span class="token operator">+</span> 5px <span class="token operator">-</span> 3cm<span class="token punctuation">;</span> <span class="token comment">// 结果是 4px</span><span class="token comment">// example with variables</span><span class="token variable">@base<span class="token punctuation">:</span></span> 5%<span class="token punctuation">;</span><span class="token variable">@filler<span class="token punctuation">:</span></span> <span class="token variable">@base</span> <span class="token operator">*</span> 2<span class="token punctuation">;</span> <span class="token comment">// 结果是 10%</span><span class="token variable">@other<span class="token punctuation">:</span></span> <span class="token variable">@base</span> <span class="token operator">+</span> <span class="token variable">@filler</span><span class="token punctuation">;</span> <span class="token comment">// 结果是 15%</span></code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li>Less 内置了多种函数用于转换颜色、处理字符串、算术运算等。</li></ul><p>下面这个例子利用 percentage 函数将 0.5 转换为 50%，将颜色饱和度增加 5%，以及颜色亮度降低 25% 并且色相值增加 8 等用法：</p><pre class="language-less" data-language="less"><code class="language-less"><span class="token variable">@base<span class="token punctuation">:</span></span> #f04615<span class="token punctuation">;</span><span class="token variable">@width<span class="token punctuation">:</span></span> 0.5<span class="token punctuation">;</span><span class="token selector">.class</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">percentage</span><span class="token punctuation">(</span><span class="token variable">@width</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns `50%`</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">saturate</span><span class="token punctuation">(</span><span class="token variable">@base</span><span class="token punctuation">,</span> 5%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">spin</span><span class="token punctuation">(</span><span class="token function">lighten</span><span class="token punctuation">(</span><span class="token variable">@base</span><span class="token punctuation">,</span> 25%<span class="token punctuation">)</span><span class="token punctuation">,</span> 8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><ul><li>可以将混合（mixins）和规则集（rulesets）作为一组值的映射（map）使用</li></ul><pre class="language-less" data-language="less"><code class="language-less"><span class="token selector">#colors()</span> <span class="token punctuation">&#123;</span>  <span class="token property">primary</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>  <span class="token property">secondary</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.button</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #colors[primary]<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #colors[secondary]<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出css</span><span class="token selector">.button</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>块注释和行注释都可以使用：</p><pre class="language-less" data-language="less"><code class="language-less"><span class="token comment">/* 一个块注释 * style comment! */</span><span class="token variable">@var<span class="token punctuation">:</span></span> red<span class="token punctuation">;</span><span class="token comment">// 这一行被注释掉了！</span><span class="token variable">@var<span class="token punctuation">:</span></span> white<span class="token punctuation">;</span></code></pre><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>Less 中的作用域与 CSS 中的作用域非常类似。首先在本地查找变量和混合（mixins），如果找不到，则从“父”级作用域继承。</p><pre class="language-less" data-language="less"><code class="language-less"><span class="token variable">@var<span class="token punctuation">:</span></span> red<span class="token punctuation">;</span><span class="token selector">#page</span> <span class="token punctuation">&#123;</span>  <span class="token variable">@var<span class="token punctuation">:</span></span> white<span class="token punctuation">;</span>  <span class="token selector">#header</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">@var</span><span class="token punctuation">;</span> <span class="token comment">// white</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>​参考自<a href="https://less.bootcss.com/#%E6%98%A0%E5%B0%84%EF%BC%88maps%EF%BC%89">Less中文文档快速入门</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Less学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之JavaScript学习（十一）认识闭包</title>
      <link href="/posts/a70bd8a8/"/>
      <url>/posts/a70bd8a8/</url>
      
        <content type="html"><![CDATA[<h1 id="闭包和作用域链"><a href="#闭包和作用域链" class="headerlink" title="闭包和作用域链"></a>闭包和作用域链</h1><blockquote><p>闭包是指有权访问另一个函数作用域中的变量的函数。（《JavaScript高级程序设计》7.2闭包）</p></blockquote><blockquote><p>所有的JavaScript函数都是闭包：它们都是对象，它们都关联到作用域链。和其他大多数现代编程语言一样，JavaScript也采用词法作用域（lexical scoping），也就是说，函数的执行依赖于变量作用域， 这个作用域是在函数定义时决定的，而不是函数调用时决定的。（《JavaScript权威指南》8.6闭包）</p></blockquote><p>当JavaScript需要查找变量的x的值的时候，它会从作用域链中的第一个对象开始查找， 如果这个对象没有名为x的属性，就会继续查找链上下一个对象，最后到全局作用域，如果全都没有找到就会抛出一个引用错误（ReferenceError）异常。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">closure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">closure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token comment">// error: count is not defined</span></code></pre><p>closure函数返回了一个匿名函数，将其赋值给f，多次调用f，发现closure函数内的count累计增加。</p><p>当我们想打印全局作用域中的count时，报错了。由于作用域是在函数定义时决定而不是函数调用时决定的，f return的变量是closure函数作用域内的count，而不是全局作用域的count。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>作用:<ul><li>延长局部变量的生命周期</li><li>让函数外部能操作内部的局部变量</li></ul></li><li>闭包的应用场景:<ul><li>模块化</li><li>循环遍历加监听</li><li>柯里化</li><li>JS框架(jQuery)大量使用了闭包</li></ul></li><li>缺点:<ul><li>变量占用内存的时间可能会过长</li><li>可能导致内存泄露</li><li>解决:及时释放 : f &#x3D; null; &#x2F;&#x2F;让内部函数对象成为垃圾对象</li></ul></li></ul><p>想要通过更多实例来理解闭包，可以看大佬的这篇文章<a href="https://jiuto.github.io/jiuto_blog/guide/js/apply_call.html">理解js闭包</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之JavaScript学习（十）原型与继承</title>
      <link href="/posts/8e77418e/"/>
      <url>/posts/8e77418e/</url>
      
        <content type="html"><![CDATA[<h1 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h1><h2 id="认识原型"><a href="#认识原型" class="headerlink" title="认识原型"></a>认识原型</h2><p>在JavaScript中，<strong>原型也是一个对象，通过原型可以实现对象的属性继承，</strong>JavaScript的对象中都包含了一个” [[Prototype]]”内部属性，这个属性所对应的就是该对象的原型。</p><p>“[[Prototype]]”作为对象的内部属性，是不能被直接访问的。所以为了方便查看一个对象的原型，Firefox和Chrome中提供了”<code>__proto__</code>“这个<strong>非标准</strong>（不是所有浏览器都支持）的访问器（ECMA引入了标准对象原型访问器”Object.getPrototype(object)”）。</p><h2 id="prototype-和-proto"><a href="#prototype-和-proto" class="headerlink" title="prototype 和 __proto__"></a><code>prototype</code> 和 <code>__proto__</code></h2><ul><li>对于所有的对象，都有<code>__proto__</code>属性，这个属性对应该对象的原型</li><li>对于函数对象，除了<code>__proto__</code>属性之外，还有<code>prototype</code>属性，<strong>当一个函数被用作构造函数来创建实例时，该函数的prototype属性值将被作为原型赋值给所有对象实例（也就是设置实例的<code>__proto__</code>属性）</strong></li></ul><p><img src="/img/Web/prototype.png" loading="lazy"></p><h2 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a><code>constructor</code></h2><p>从上面的图我们可以注意到，每个原型对象还有一个属性:<code>constructor</code>,constructor是对象才有的属性。<strong>原型对象的constructor属性</strong>指向的是我们自己定义的构造函数，或者是内置的构造函数。</p><p><strong>构造函数</strong></p><ul><li>构造函数是专门用来创建对象的函数</li><li><strong>一个构造函数我们也可以称为一个类</strong></li><li>通过一个构造函数创建的对象，我们称该对象时这个构造函数的实例</li><li>通过同一个构造函数创建的对象，我们称为一类对象</li><li>构造函数就是一个普通的函数，只是他的调用方式不同<ul><li>如果直接调用，它就是一个普通函数</li><li>如果使用<code>new</code>来调用，则它就是一个构造函数</li></ul></li></ul><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">fName<span class="token punctuation">,</span>lName<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> fName <span class="token operator">+</span> lName<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"f"</span><span class="token punctuation">,</span><span class="token string">"z"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">instanceof</span> <span class="token class-name">p1</span><span class="token punctuation">)</span> <span class="token comment">// Person</span></code></pre><p>为了避免创建对象时方法的重复创建导致浪费内存，可以将方法放入构造函数的原型中</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">fName<span class="token punctuation">,</span>lName<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> fName <span class="token operator">+</span> lName<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"f"</span><span class="token punctuation">,</span><span class="token string">"z"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p2<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>show <span class="token operator">==</span> p2<span class="token punctuation">.</span>show<span class="token punctuation">)</span></code></pre><h1 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h1><h2 id="什么是原型链"><a href="#什么是原型链" class="headerlink" title="什么是原型链"></a>什么是原型链</h2><p>因为每个对象和原型都有原型，对象的原型指向对象的父，而父的原型又指向父的父，这种原型层层连接起来的就构成了原型链。</p><h2 id="属性查找"><a href="#属性查找" class="headerlink" title="属性查找"></a>属性查找</h2><p>当查找一个对象的属性时，JavaScript 会向上遍历原型链，直到找到给定名称的属性为止，到查找到达原型链的顶部，如果仍然没有找到指定的属性，就会返回 undefined。比如：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"fff"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>School<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// undefined</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>School <span class="token operator">=</span> <span class="token string">"SZU"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>School<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// SZU</span></code></pre><h2 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty()"></a><code>hasOwnProperty()</code></h2><ul><li>这个方法可以用来检查对象<strong>自身</strong>是否含有某个属性</li><li>不会向上查找原型链</li><li>语法：<code>对象.hasOwnProperty(“属性名”)</code></li></ul><h1 id="原型和原型链的总结"><a href="#原型和原型链的总结" class="headerlink" title="原型和原型链的总结"></a>原型和原型链的总结</h1><ul><li>原型: 可以理解为是对象的<code>__proto__</code>属性或者是函数的<code>prototype</code>属性所指向的对象</li><li>原型对象: 构造函数的<code>prototype</code>属性所指的对象</li><li>原型链: 对象的<code>__proto__</code>访问器属性，或者[Prototype]内部属性指向的逐级向上最终为null的链式路径，大概的意思就是object.<code>__proto__</code>(父级).<code>__proto__</code>(祖父级).null(最后的<code>__proto__</code>)</li></ul><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//给父类型的原型上增加一个show方法</span><span class="token class-name">User</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"user.name"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//子类型</span><span class="token keyword">function</span> <span class="token function">Admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 子类型的原型为父类型的一个实例对象</span><span class="token class-name">Admin</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 让子类型的原型的constructor指向子类型</span><span class="token class-name">Admin</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Admin<span class="token punctuation">;</span><span class="token comment">//给子类型的原型上增加一个[showSubProp]方法,打印自身subProp</span><span class="token keyword">let</span> u1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>u1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// output: "user.name"</span></code></pre><h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2><p>使用<code>call()</code>使用父类构造函数初始属性。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">User</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"user.name"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//子类型</span><span class="token keyword">function</span> <span class="token function">Admin</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">User</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 子类型的原型为父类型的一个实例对象</span><span class="token class-name">Admin</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> u2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Admin</span><span class="token punctuation">(</span><span class="token string">"fmou"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>u2<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: "user.name"</span></code></pre><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">User</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">Admin</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Admin</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Admin<span class="token punctuation">;</span><span class="token class-name">Admin</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">description</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"我是管理员"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Member</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">Member</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Member</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Admin<span class="token punctuation">;</span><span class="token class-name">Member</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">description</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"我是会员"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Enterprise</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">Enterprise</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Enterprise</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Admin<span class="token punctuation">;</span><span class="token class-name">Enterprise</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">description</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"企业账号"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> obj <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Admin</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Member</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Enterprise</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    obj<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// output:</span><span class="token comment">//        我是管理员</span><span class="token comment">//        我是会员</span><span class="token comment">//        企业账号</span></code></pre><h2 id="使用mixin实现多继承"><a href="#使用mixin实现多继承" class="headerlink" title="使用mixin实现多继承"></a>使用mixin实现多继承</h2><p>mixin 可以理解为一个混合功能</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token parameter">sub<span class="token punctuation">,</span> sup</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sub<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>sup<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>sub<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">"constructor"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>       value<span class="token operator">:</span> sub<span class="token punctuation">,</span>       enumerable<span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> Address <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"获取收货地址"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> Credit <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   <span class="token function">total</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"积分统计"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> Request <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"请求后台"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">User</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"user.name"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">Admin</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">User</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">extend</span><span class="token punctuation">(</span>Admin<span class="token punctuation">,</span> User<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Admin</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token class-name">Admin</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> Address<span class="token punctuation">,</span> Credit<span class="token punctuation">,</span> Request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> admin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Admin</span><span class="token punctuation">(</span><span class="token string">"zz"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>admin<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// "user.name"</span>admin<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// "请求后台"</span>admin<span class="token punctuation">.</span><span class="token function">total</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// "积分统计"</span>admin<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// "获取收货地址"</span></code></pre><h2 id="内部继承和super关键字"><a href="#内部继承和super关键字" class="headerlink" title="内部继承和super关键字"></a>内部继承和<code>super</code>关键字</h2><p><code>super</code>指向的是当前对象的原型对象。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token parameter">sub<span class="token punctuation">,</span> sup</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sub<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>sup<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>sub<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">"constructor"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>       value<span class="token operator">:</span> sub<span class="token punctuation">,</span>       enumerable<span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> Request <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"请求后台"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> Credit <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   __proto__<span class="token operator">:</span> Request<span class="token punctuation">,</span>   <span class="token function">total</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": 积分统计"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">User</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"user.name"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">Admin</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">User</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">extend</span><span class="token punctuation">(</span>Admin<span class="token punctuation">,</span> User<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Admin</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token class-name">Admin</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> Credit<span class="token punctuation">,</span> Request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> admin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Admin</span><span class="token punctuation">(</span><span class="token string">"zz"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>admin<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// "user.name"</span>admin<span class="token punctuation">.</span><span class="token function">total</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// "请求后台: 积分统计"</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之JavaScript学习（九）对象</title>
      <link href="/posts/c3328cdb/"/>
      <url>/posts/c3328cdb/</url>
      
        <content type="html"><![CDATA[<h1 id="对象基础"><a href="#对象基础" class="headerlink" title="对象基础"></a>对象基础</h1><p>对象是一个包含相关数据和方法的集合（通常由一些变量和函数组成，我们称之为对象里面的属性和方法）。</p><p>在 javascript 中，一个对象可以是一个单独的拥有属性和类型的实体。我们拿它和一个杯子做下类比。一个杯子是一个对象(物体)，拥有属性。杯子有颜色，图案，重量，由什么材质构成等等。同样， javascript 对象也有属性来定义它的特征。</p><h2 id="对象的分类"><a href="#对象的分类" class="headerlink" title="对象的分类"></a>对象的分类</h2><p><strong>1. 内建对象</strong></p><ul><li>由ES标准中定义的对象，在任何的ES的实现中都可以使用</li><li>比如：<code>Math</code> <code>String</code> <code>Number</code> <code>Function</code> <code>Object</code>…</li></ul><p><strong>2. 宿主对象</strong></p><ul><li>由JS的运行环境提供的对象，目前来讲主要指由浏览器提供的对象</li><li>比如 <code>BOM</code> <code>DOM</code></li></ul><p><strong>3. 自定义对象</strong></p><ul><li>由开发人员自己创建的对象</li></ul><h2 id="对象和属性"><a href="#对象和属性" class="headerlink" title="对象和属性"></a>对象和属性</h2><p>一个 javascript 对象有很多属性。一个对象的属性可以被解释成一个附加到对象上的变量。属性定义了对象的特征。</p><h2 id="点表示法"><a href="#点表示法" class="headerlink" title="点表示法"></a>点表示法</h2><p>可以用点表示法来访问对象的属性和方法。比如：</p><pre class="language-js" data-language="js"><code class="language-js">person<span class="token punctuation">.</span>ageperson<span class="token punctuation">.</span>name<span class="token punctuation">.</span>first</code></pre><h2 id="括号表示法"><a href="#括号表示法" class="headerlink" title="括号表示法"></a>括号表示法</h2><p>另外一种访问属性的方式是使用括号表示法。比如：</p><pre class="language-none"><code class="language-none">person[&#39;age&#39;]person[&#39;name&#39;][&#39;first&#39;]</code></pre><h2 id="创建新对象"><a href="#创建新对象" class="headerlink" title="创建新对象"></a>创建新对象</h2><p>可以通过对象初始化器创建对象。或者可以创建一个构造函数并使用该函数和 <code>new</code> 操作符初始化对象。  </p><h3 id="使用对象初始化器"><a href="#使用对象初始化器" class="headerlink" title="使用对象初始化器"></a>使用对象初始化器</h3><p>通过对象初始化器创建对象的语法如下：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> property_1<span class="token operator">:</span>   value_1<span class="token punctuation">,</span>   <span class="token comment">// property_# 可以是一个标识符...</span>            <span class="token number">2</span><span class="token operator">:</span>            value_2<span class="token punctuation">,</span>   <span class="token comment">// 或一个数字...</span>           <span class="token punctuation">[</span><span class="token string">"property"</span> <span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">:</span> value_3<span class="token punctuation">,</span>  <span class="token comment">//  或一个可计算的key名...</span>            <span class="token comment">// ...,</span>            <span class="token string">"property n"</span><span class="token operator">:</span> value_n <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 或一个字符串</span></code></pre><h3 id="使用构造函数"><a href="#使用构造函数" class="headerlink" title="使用构造函数"></a>使用构造函数</h3><p>作为另一种方式，你可以通过两步来创建对象：</p><ol><li>通过创建一个构造函数来定义对象的类型。首字母大写是非常普遍而且很恰当的惯用法。</li><li>通过 <code>new</code> 创建对象实例。</li></ol><p>为了定义对象类型，为对象类型创建一个函数以声明类型的名称、属性和方法。例如：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token parameter">make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>make <span class="token operator">=</span> make<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>model <span class="token operator">=</span> model<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这里是通过使用 this 将传入函数的值赋给对象的属性。（ this 在后面会讲到）</p><p>现在可以像这样创建一个 <code>mycar</code> 对象：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> mycar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">"Eagle"</span><span class="token punctuation">,</span> <span class="token string">"Talon TSi"</span><span class="token punctuation">,</span> <span class="token number">1993</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可以通过调用 <code>new</code> 创建任意数量的 <code>car</code> 对象。</p><h3 id="使用-Object-create-方法"><a href="#使用-Object-create-方法" class="headerlink" title="使用 Object.create 方法"></a>使用 Object.create 方法</h3><p>对象也可以用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create"><code>Object.create()</code></a> 方法创建。该方法非常有用，因为它允许你为创建的对象选择一个原型对象，而不用定义构造函数。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> Car <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  type<span class="token operator">:</span> <span class="token string">"Sedan"</span><span class="token punctuation">,</span> <span class="token comment">// 属性默认值</span>  <span class="token function-variable function">displayType</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 用于显示type属性的方法</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 创建一辆新的车——car1</span><span class="token keyword">var</span> car1 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Car<span class="token punctuation">)</span><span class="token punctuation">;</span>car1<span class="token punctuation">.</span><span class="token function">displayType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output:Sedan</span><span class="token comment">// 创建一种新的动物——Fishes</span><span class="token keyword">var</span> car2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Car<span class="token punctuation">)</span><span class="token punctuation">;</span>car2<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">"Coupe"</span><span class="token punctuation">;</span>car2<span class="token punctuation">.</span><span class="token function">displayType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output:Coupe</span></code></pre><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>所有的 JavaScript 对象至少继承于一个对象。被继承的对象被称作原型，并且继承的属性可通过构造函数的 <code>prototype</code> 对象找到。</p><h2 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h2><p>一个<em>方法</em> 是关联到某个对象的函数，或者说，一个方法是一个值为某个函数的对象属性。定义方法就像定义普通的函数，除了它们必须被赋给对象的某个属性。例如：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// objectName.methodname = function_name;</span><span class="token keyword">var</span> myObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">myMethod</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...do something</span>  <span class="token punctuation">&#125;</span><span class="token comment">// 或者这样写</span>  <span class="token function">myOtherMethod</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...do something else</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h2 id="通过-this-引用对象"><a href="#通过-this-引用对象" class="headerlink" title="通过 this 引用对象"></a>通过 <code>this</code> 引用对象</h2><p>JavaScript 有一个特殊的关键字 <code>this</code>，它可以在方法中使用以指代当前对象。例如：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name <span class="token operator">:</span> <span class="token string">'Chris'</span><span class="token punctuation">,</span>  <span class="token function-variable function">greeting</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hi! I\'m '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name <span class="token operator">:</span> <span class="token string">'Brian'</span><span class="token punctuation">,</span>  <span class="token function-variable function">greeting</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hi! I\'m '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在这里，person1.greeting() 会输出：”Hi! I’m Chris.”；person2.greeting() 会输出：”Hi! I’m Brain.”</p><h1 id="定义-getters-与-setters"><a href="#定义-getters-与-setters" class="headerlink" title="定义 getters 与 setters"></a>定义 getters 与 setters</h1><p>一个 getter 是一个获取某个特定属性的值的方法。一个 setter 是一个设定某个属性的值的方法。你可以为预定义的或用户定义的对象定义 getter 和 setter 以支持新增的属性。定义 getter 和 setter 的语法采用对象字面量语法。</p><p>下面例子描述了getters 和 setters 是如何为用户定义的对象<code> o</code> 工作的。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  a<span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token keyword">get</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">set</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> x <span class="token operator">/</span> <span class="token number">2</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8</span>o<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 25</span></code></pre><ul><li>对象的属性如下：<ul><li><code>o.a</code> — 数字</li><li><code>o.b</code> — 返回 <code>o.a</code> + 1 的 getter</li><li><code>o.c</code> — 由 <code>o.c 的值所设置 o.a 值的</code> setter</li></ul></li></ul><h1 id="删除对象的属性"><a href="#删除对象的属性" class="headerlink" title="删除对象的属性"></a>删除对象的属性</h1><p>你可以用 <code>delete</code> 操作符删除一个<strong>不是继承而来</strong>的属性。下面的例子说明如何删除一个属性：</p><pre class="language-none"><code class="language-none">var myobj &#x3D; new Object;myobj.a &#x3D; 5;myobj.b &#x3D; 12;delete myobj.a;</code></pre><h1 id="对象的比较"><a href="#对象的比较" class="headerlink" title="对象的比较"></a>对象的比较</h1><p>在 JavaScript 中 objects 是一种引用类型。两个独立声明的对象永远也不会相等，即使他们有相同的属性，只有在比较一个对象和这个对象的引用时，才会返回true.</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 两个变量, 两个具有同样的属性、但不相同的对象</span><span class="token keyword">var</span> fruit <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">"apple"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> fruitbear <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">"apple"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>fruit <span class="token operator">==</span> fruitbear <span class="token comment">// return false</span>fruit <span class="token operator">===</span> fruitbear <span class="token comment">// return false</span><span class="token comment">// 两个变量，同一个对象</span><span class="token keyword">var</span> fruit <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">"apple"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> fruitbear <span class="token operator">=</span> fruit<span class="token punctuation">;</span>  <span class="token comment">// fruit与fruitbear都指向同样的对象</span>fruit <span class="token operator">==</span> fruitbear <span class="token comment">// return true</span>fruit <span class="token operator">===</span> fruitbear <span class="token comment">// return true</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之JavaScript学习（八） 事件</title>
      <link href="/posts/a27b9d85/"/>
      <url>/posts/a27b9d85/</url>
      
        <content type="html"><![CDATA[<h1 id="事件是什么"><a href="#事件是什么" class="headerlink" title="事件是什么"></a>事件是什么</h1><p><strong>事件</strong>是您在编程时系统内发生的动作或者发生的事情——系统会在事件出现时产生或触发某种信号，并且会提供一个自动加载某种动作（例如：如果用户在网页上单击一个按钮，您可能想通过显示一个信息框来响应这个动作。）的机制。</p><p>在 Web 中, 事件在浏览器窗口中被触发并且通常被绑定到窗口内部的特定部分 — 可能是一个元素、一系列元素、被加载到这个窗口的 HTML 代码或者是整个浏览器窗口。</p><p>举几个可能发生的不同事件：</p><ul><li>用户在某个元素上点击鼠标或悬停光标。</li><li>用户在键盘中按下某个按键。</li><li>用户调整浏览器的大小或者关闭浏览器窗口。</li><li>一个网页停止加载。</li><li>提交表单。</li></ul><p>每个可用的事件都会有一个<strong>事件处理器</strong>，也就是事件触发时会运行的代码块。当我们定义了一个用来回应事件被激发的代码块的时候，我们说我们<strong>注册了一个事件处理器</strong>。事件处理器有时候被叫做<strong>事件监听器</strong></p><h1 id="使用网页事件的方式"><a href="#使用网页事件的方式" class="headerlink" title="使用网页事件的方式"></a>使用网页事件的方式</h1><p>可以通过多种不同的方法将事件监听器代码添加到网页，以便在关联的事件被触发时运行它。</p><h2 id="事件处理器属性"><a href="#事件处理器属性" class="headerlink" title="事件处理器属性"></a>事件处理器属性</h2><p>我们来通过一个例子了解一下事件处理器的属性：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> rndCol <span class="token operator">=</span> <span class="token string">'rgb('</span> <span class="token operator">+</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> rndCol<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这个 <code>onclick</code> 是被用在这个情景下的事件处理器的属性，它就像 button 其他的属性（如 <code>btn.textContent</code>, or <code>btn.style</code>), 但是有一个特别的地方——当您将一些代码赋值给它的时候，只要事件触发代码就会运行。</p><p>也可以将一个已存在的函数赋值给事件处理参数，如：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">bgChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> rndCol <span class="token operator">=</span> <span class="token string">'rgb('</span> <span class="token operator">+</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> rndCol<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> bgChange<span class="token punctuation">;</span></code></pre><p>还有很多事件处理参数可以选择，用上面例子来举例：</p><ul><li><code>btn.onfocus</code>及<code>btn.onblur</code> — 颜色将于按钮被置于焦点或解除焦点时改变（尝试使用Tab移动至按钮上，然后再移开）。这些通常用于显示有关如何在置于焦点时填写表单字段的信息，或者如果表单字段刚刚填入不正确的值，则显示错误消息。</li><li><code>btn.ondblclick</code> — 颜色将仅于按钮被双击时改变。</li><li><code>window.onkeypress</code>, <code>window.onkeydown</code>, <code>window.onkeyup</code> — 当按钮被按下时颜色会发生改变. <code>keypress</code> 指的是通俗意义上的按下按钮 (按下并松开), 而 <code>keydown</code> 和 <code>keyup</code> 指的是按键动作的一部分,分别指按下和松开. 注意如果你将事件处理器添加到按钮本身，它将不会工作 — 我们只能将它添加到代表整个浏览器窗口的 window 对象中。</li><li><code>btn.onmouseover</code> 和 <code>btn.onmouseout</code> — 颜色将会在鼠标移入按钮上方时发生改变, 或者当它从按钮移出时.</li></ul><p>可以拿下面这份完整的代码进行学习：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Random color example — event handler property<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">      <span class="token selector">button</span> <span class="token punctuation">&#123;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>Change color<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">function</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">function</span> <span class="token function">bgChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> rndCol <span class="token operator">=</span> <span class="token string">'rgb('</span> <span class="token operator">+</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> rndCol<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      btn<span class="token punctuation">.</span>onblur <span class="token operator">=</span> bgChange<span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="addEventListener-和-removeEventListener"><a href="#addEventListener-和-removeEventListener" class="headerlink" title="addEventListener() 和 removeEventListener()"></a>addEventListener() 和 removeEventListener()</h2><p>这是一种新的事件触发机制，定义在DOM Level 2 Events 中。它给浏览器提供了一个事件处理属性类似的函数—<code>addEventListener()</code>。用这个函数重写上面的例子如下：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">bgChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> rndCol <span class="token operator">=</span> <span class="token string">'rgb('</span> <span class="token operator">+</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> rndCol<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> bgChange<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在<code>addEventListener()</code> 函数中, 我们具体化了两个参数——我们想要将处理器应用上去的事件名称，还有我们用来回应事件的函数的代码。</p><p>这个机制带来了一些相较于旧方式的优点。还有一个相对应的方法，<code>removeEventListener()，</code>这个方法移除事件监听器。例如，下面的代码将会移除上个代码块中的事件监听器：</p><pre class="language-js" data-language="js"><code class="language-js">btn<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> bgChange<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这两个函数在大型的、复杂的项目中是非常有用的，可以让开发变得更加高效，比如你想要清除不需要的事件处理器，不需要去找那一行代码，只需要 <code>removeEventListener()</code> 即可；再比如你想要给同一个监听器注册多个处理器，用事件处理程序属性就不太方便，而使用 <code>addEventListener()</code> J就可以这样做：</p><pre class="language-js" data-language="js"><code class="language-js">myElement<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> functionA<span class="token punctuation">)</span><span class="token punctuation">;</span>myElement<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> functionB<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当元素被点击时两个函数都会工作。这个事件机制还有很多待学习的强大功能特性。</p><h1 id="事件相关高级概念"><a href="#事件相关高级概念" class="headerlink" title="事件相关高级概念"></a>事件相关高级概念</h1><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>有时候在事件处理函数内部，您可能会看到一个固定指定名称的参数，例如<code>event</code>，<code>evt</code>或简单的<code>e</code>。 这被称为<strong>事件对象</strong>，它被自动传递给事件处理函数，以提供额外的功能和信息。 再次重写上面的例子：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">bgChange</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> rndCol <span class="token operator">=</span> <span class="token string">'rgb('</span> <span class="token operator">+</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">;</span>  e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> rndCol<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> bgChange<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在函数中包括一个事件对象<code>e</code>，并在函数中设置背景颜色样式在<code>e.target上</code> - 它指的是按钮本身。 事件对象 <code>e</code> 的<code>target</code>属性始终是事件刚刚发生的元素的引用。 所以在这个例子中，我们在按钮上设置一个随机的背景颜色，而不是页面。</p><p>在多个元素上设置相同的事件处理程序时，<code>e.target</code>非常有用，并且在发生事件时对所有元素执行某些操作。</p><h2 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h2><p>有时，会遇到一些情况，你希望事件不执行它的默认行为。 最常见的例子是Web表单，例如自定义注册表单。 当你填写详细信息并按提交按钮时，自然行为是将数据提交到服务器上的指定页面进行处理，并将浏览器重定向到某种“成功消息”页面。</p><p>当用户没有正确提交数据时，作为开发人员，你希望停止提交信息给服务器，并给他们一个错误提示，告诉他们什么做错了，以及需要做些什么来修正错误。所以我们就需要阻止默认行为的操作。</p><p>比如，现在有一个简单的HTML表单，需要输入名和姓</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>First name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fname<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Last name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lname<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>这里我们用一个<code>onsubmit</code>事件处理程序（在提交的时候，在一个表单上发起<code>submit</code>事件）来实现一个非常简单的检查，用于测试文本字段是否为空。 如果是，我们在事件对象上调用<code>preventDefault()</code>函数，这样就停止了表单提交，然后在我们表单下面的段落中显示一条错误消息，告诉用户什么是错误的：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'form'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fname <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'fname'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> lname <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'lname'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> submit <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> para <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>form<span class="token punctuation">.</span><span class="token function-variable function">onsubmit</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fname<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">''</span> <span class="token operator">||</span> lname<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    para<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">'姓和名你都需要填写'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>但是，这是一种非常弱的表单验证——例如，用户输入空格或数字提交表单，表单验证并不会阻止用户提交——这不是我们例子想要达到的目的。</p><h2 id="事件冒泡及捕获"><a href="#事件冒泡及捕获" class="headerlink" title="事件冒泡及捕获"></a>事件冒泡及捕获</h2><p>事件冒泡和捕捉是两种机制，主要描述当在一个元素上有两个相同类型的事件处理器被激活会发生什么。</p><h4 id="对事件冒泡和捕捉的解释"><a href="#对事件冒泡和捕捉的解释" class="headerlink" title="对事件冒泡和捕捉的解释"></a>对事件冒泡和捕捉的解释</h4><p>当一个事件发生在具有父元素的元素上时，现代浏览器运行两个不同的阶段 - 捕获阶段和冒泡阶段。 在捕获阶段：</p><ul><li>浏览器检查元素的最外层祖先<code>&lt;html&gt;</code>，是否在捕获阶段中注册了一个<code>onclick</code>事件处理程序，如果是，则运行它。</li><li>然后，它移动到<code>&lt;html&gt;</code>中单击元素的下一个祖先元素，并执行相同的操作，然后是单击元素再下一个祖先元素，依此类推，直到到达实际点击的元素。</li></ul><p>在冒泡阶段，恰恰相反:</p><ul><li>浏览器检查实际点击的元素是否在冒泡阶段中注册了一个<code>onclick</code>事件处理程序，如果是，则运行它</li><li>然后它移动到下一个直接的祖先元素，并做同样的事情，然后是下一个，等等，直到它到达<code>&lt;html&gt;</code>元素。</li></ul><p>在现代浏览器中，默认情况下，所有事件处理程序都在冒泡阶段进行注册。因此，在我们当前的示例中，当您单击视频时，这个单击事件从 <code>&lt;video&gt;</code>元素向外冒泡直到<code>&lt;html&gt;</code>元素。沿着这个事件冒泡线路：</p><ul><li>它发现了<code>video.onclick...</code>事件处理器并且运行它，因此这个视频<code>&lt;video&gt;</code>第一次开始播放。</li><li>接着它发现了（往外冒泡找到的） <code>videoBox.onclick...</code>事件处理器并且运行它，因此这个视频<code>&lt;video&gt;</code>也隐藏起来了。</li></ul><h4 id="用-stopPropagation-修复问题"><a href="#用-stopPropagation-修复问题" class="headerlink" title="用 stopPropagation() 修复问题"></a>用 stopPropagation() 修复问题</h4><p>这是令人讨厌的行为，但有一种方法来解决它！标准事件对象具有可用的名为 <code>stopPropagation()</code>的函数, 当在事件对象上调用该函数时，它只会让当前事件处理程序运行，但事件不会在<strong>冒泡</strong>链上进一步扩大，因此将不会有更多事件处理器被运行(不会向上冒泡)。所以，我们可以通过改变前面代码块中的第二个处理函数来解决当前的问题:</p><pre class="language-js" data-language="js"><code class="language-js">video<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  video<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h4><p>冒泡还允许我们利用事件委托——这个概念依赖于这样一个事实,如果你想要在大量子元素中单击任何一个都可以运行一段代码，您可以将事件监听器设置在其父节点上，并让子节点上发生的事件冒泡到父节点上，而不是每个子节点单独设置事件监听器。</p>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之JavaScript学习（七）函数的相关知识</title>
      <link href="/posts/f38b0477/"/>
      <url>/posts/f38b0477/</url>
      
        <content type="html"><![CDATA[<h1 id="函数是什么"><a href="#函数是什么" class="headerlink" title="函数是什么"></a>函数是什么</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>函数，是可复用的代码块，它允许你在一个代码块中存储一段用于处理单任务的代码，然后在任何你需要的时候用一个简短的命令来调用。</p><h2 id="浏览器内置函数"><a href="#浏览器内置函数" class="headerlink" title="浏览器内置函数"></a>浏览器内置函数</h2><p>或许你已经用过很多浏览器内置函数了。比如：</p><ul><li><code>replace()</code> 将字符串中的某串字符用另一串字符代替</li><li><code>join()</code> 将数组变成字符串</li><li><code>Math.random()</code> 生成一个随机数</li><li>……</li></ul><h2 id="函数与方法"><a href="#函数与方法" class="headerlink" title="函数与方法"></a>函数与方法</h2><p>程序员把函数称为对象<strong>方法（method）</strong>的一部分。严格说来，内置浏览器函数并不是函数——它们是<strong>方法</strong>。</p><p>二者区别在于方法是在对象内定义的函数。浏览器内置函数（方法）和变量（称为属性）存储在结构化对象内，以使代码更加高效，易于处理。</p><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>我们每次调用函数时，解析器都会将一个上下文对象作为隐含的参数传递进函数。<br>使用<code>this</code>来引用上下文对象，根据函数的调用形式不同，<code>this</code>的值也不同。</p><p><strong>this的不同的情况：</strong></p><ul><li>以函数的形式调用时，<code>this</code>是<code>window</code></li><li>以方法的形式调用时，<code>this</code>就是调用方法的对象</li><li>以构造函数的形式调用时，<code>this</code>就是新创建的对象</li></ul><h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><p><strong>方式一：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>形参<span class="token number">1</span><span class="token punctuation">,</span>形参<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>形参<span class="token constant">N</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  语句<span class="token operator">...</span>  <span class="token punctuation">&#125;</span><span class="token number">123</span></code></pre><p><strong>方式二：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">函数名</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>形参<span class="token number">1</span><span class="token punctuation">,</span>形参<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>形参<span class="token constant">N</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  语句<span class="token operator">...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">[</span>实参<span class="token number">1</span><span class="token punctuation">,</span>实参<span class="token number">2</span>…实参<span class="token constant">N</span><span class="token punctuation">]</span><span class="token punctuation">)</span>；</code></pre><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>可以创建一个没有名称的函数：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>语句<span class="token operator">...</span><span class="token punctuation">&#125;</span></code></pre><p>这个函数叫做<strong>匿名函数</strong> — 它没有函数名! 它也不会自己做任何事情。 你通常将匿名函数与事件处理程序一起使用, 例如，如果单击相关按钮，以下操作将在函数内运行代码：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> myButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myButton<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><p>一些函数需要在调用它们时指定参数 ——这些参数值需要放在函数括号内，才能正确地完成其工作。</p><p>参数又分为<strong>形参</strong>和<strong>实参</strong></p><h3 id="形参"><a href="#形参" class="headerlink" title="形参"></a>形参</h3><p><strong>形式参数</strong></p><ul><li>定义函数时，可以在<code>()</code>中定义一个或多个形参，形参之间使用<code>,</code>隔开</li><li>定义形参就相当于在函数内声明了对应的<code>变量</code>但是并不赋值</li><li>形参会在调用时才赋值</li></ul><h3 id="实参"><a href="#实参" class="headerlink" title="实参"></a>实参</h3><p><strong>实际参数</strong></p><ul><li>调用函数时，可以在<code>()</code>传递实参，传递的实参会赋值给对应的形参</li><li>调用函数时JS解析器不会检查实参的类型和个数，可以传递任意数据类型的值<ul><li>如果实参的数量大于形参，多余实参将不会赋值，</li><li>如果实参的数量小于形参，则没有对应实参的形参将会赋值<code>undefined</code></li></ul></li></ul><h1 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h1><p>通常，返回值是用在函数在计算某种中间步骤。你想得到最终结果，其中包含一些值。那些值需要通过一个函数计算得到，然后返回结果可用于计算的下一个阶段。</p><ul><li>返回值，就是函数执行的结果</li><li>使用<code>return</code>来设置函数的返回值<ul><li>语法：<code>return 值;</code></li></ul></li><li>该值就会成为函数的返回值，可以通过一个变量来接收返回值</li><li><code>return</code>后边的代码都不会执行，一旦执行到<code>return</code>语句时，函数将会立刻退出</li><li><code>return</code>后可以跟任意类型的值，可以是基本数据类型，也可以是一个对象</li><li>如果<code>return</code>后不跟值，或者是不写<code>return</code>，函数默认返回<code>undefined</code></li></ul><h1 id="函数的作用域和冲突"><a href="#函数的作用域和冲突" class="headerlink" title="函数的作用域和冲突"></a>函数的作用域和冲突</h1><p>我们来谈一谈  scope 即作用域 — 处理函数时一个非常重要的概念。当你创建一个函数时，函数内定义的变量和其他东西都在它们自己的单独的范围内,不能被函数外的代码访问。</p><p>所有函数的最外层被称为全局作用域。 在全局作用域内定义的值可以在任意地方访问。</p><h2 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h2><ul><li>直接在<code>script</code>标签中编写的代码都运行在全局作用域中</li><li>全局作用域在打开页面时创建，在页面关闭时销毁</li><li>全局作用域中有一个全局对象<code>window</code>，<code>window</code>对象由浏览器提供<ul><li>可以在页面中直接使用，它代表的是整个的浏览器的窗口</li><li>在全局作用域中创建的变量都会作为<code>window</code>对象的属性保存</li><li>在全局作用域中创建的函数都会作为<code>window</code>对象的方法保存</li></ul></li><li>在全局作用域中创建的变量和函数可以在页面的任意位置访问</li><li>尽量不要在全局中创建变量</li></ul><h2 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h2><ul><li>函数作用域在函数执行时创建，在函数执行结束时销毁，每次调用函数都会创建一个新的函数作用域</li><li>在函数作用域中创建的变量，不能在全局中访问</li><li>当在函数作用域中使用一个变量时，它会先在自身作用域中寻找<ul><li>如果找到了则直接使用，如果没有找到则到上一级作用域中寻找</li></ul></li></ul><h2 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h2><p>有时我们不希望变量可以在代码中的任何地方访问 - 从其他地方调用的外部脚本可能会开始搞乱代码并导致问题，因为它们恰好与代码的其他部分使用了相同的变量名称，就会造成<strong>冲突</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之JavaScript学习（六）条件语句与循环语句</title>
      <link href="/posts/8fd4f246/"/>
      <url>/posts/8fd4f246/</url>
      
        <content type="html"><![CDATA[<h1 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h1><h2 id="if-…-else-语句"><a href="#if-…-else-语句" class="headerlink" title="if … else 语句"></a>if … else 语句</h2><h3 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  code to run <span class="token keyword">if</span> condition is <span class="token boolean">true</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  run some other code instead<span class="token punctuation">&#125;</span></code></pre><h3 id="else-if"><a href="#else-if" class="headerlink" title="else if"></a>else if</h3><p>当我们想要两个以上的选择或结果时，就需要用到 <strong>else if</strong> 了</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>code to run <span class="token keyword">if</span> condition <span class="token number">1</span> is <span class="token boolean">true</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>condition <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>code to run <span class="token keyword">if</span> condition <span class="token number">1</span> is <span class="token boolean">false</span> and condition <span class="token number">2</span> is <span class="token boolean">true</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span> run some other code instead<span class="token punctuation">&#125;</span></code></pre><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>比较运算符是用来判断条件语句中的条件的。</p><ul><li><code>===</code> 和 <code>!==</code> — 判断一个值是否严格等于，或不等于另一个。</li><li><code>&lt;</code> 和 <code>&gt;</code> — 判断一个值是否小于，或大于另一个。</li><li><code>&lt;=</code> 和 <code>&gt;=</code> — 判断一个值是否小于或等于，或者大于或等于另一个。</li></ul><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul><li><code>&amp;&amp;</code> — 逻辑与; 使得并列两个或者更多的表达式成为可能，只有当这些表达式每一个都返回<code>true</code>时，整个表达式才会返回<code>true.</code></li><li><code>||</code> — 逻辑或; 当两个或者更多表达式当中的任何一个返回 <code>true</code> 则整个表达式将会返回 <code>true</code>.</li><li>! — 逻辑非; 对一个布尔值取反, 非true返回false,非false返回true.</li></ul><p><em>tips</em>：任何不是 <code>false</code>, <code>undefined</code>, <code>null</code>, <code>0</code>, <code>NaN</code> 的值，或一个空字符串（’’）在作为条件语句进行测试时实际返回true。</p><h2 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h2><p><code>if...else</code> 语句主要适用于只有几个选择的情况，每个都需要相当数量的代码来运行，和&#x2F;或 的条件很复杂的情况（例如多个逻辑运算符）。对于只想将变量设置一系列为特定值的选项或根据条件打印特定语句的情况，使用 <code>switch</code> 语句会更加方便。</p><p>下面是语法示例：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">switch</span> <span class="token punctuation">(</span>expression<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> choice1<span class="token operator">:</span>    run <span class="token keyword">this</span> code    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> choice2<span class="token operator">:</span>    run <span class="token keyword">this</span> code instead    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment">// include as many cases as you like</span>  <span class="token keyword">default</span><span class="token operator">:</span>    actually<span class="token punctuation">,</span> just run <span class="token keyword">this</span> code<span class="token punctuation">&#125;</span></code></pre><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p>如果我们只需要通过判断 true 或者 false 来选择的话，三元运算符会看起来更加方便简洁。</p><p>下面是语法示例：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token punctuation">(</span> condition <span class="token punctuation">)</span> <span class="token operator">?</span> run <span class="token keyword">this</span> code <span class="token operator">:</span> run <span class="token keyword">this</span> code instead</code></pre><h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><p>语法：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span>initializer<span class="token punctuation">;</span> exit<span class="token operator">-</span>condition<span class="token punctuation">;</span> final<span class="token operator">-</span>expression<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// code to run</span><span class="token punctuation">&#125;</span></code></pre><ol><li><p>关键字<code>for</code>，后跟一些括号。</p></li><li><p>在括号内，我们有三个项目，以分号分隔：</p><ul><li><p>一个<strong>初始化器</strong> - 这通常是一个设置为一个数字的变量，它被递增来计算循环运行的次数。它也有时被称为<strong>计数变量</strong>。</p></li><li><p>一个<strong>退出条件</strong> -如前面提到的，这个定义循环何时停止循环。这通常是一个表现为比较运算符的表达式，用于查看退出条件是否已满足的测试。</p></li><li><p>一个<strong>最终条件</strong> -这总是被判断（或运行），每个循环已经通过一个完整的迭代消失时间。它通常用于增加（或在某些情况下递减）计数器变量，使其更接近退出条件值。</p></li></ul></li><li><p>一些包含代码块的花括号 - 每次循环迭代时都会运行这个代码。</p></li></ol><p>比如我们来看看下面这个例子：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> cats <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Bill'</span><span class="token punctuation">,</span> <span class="token string">'Jeff'</span><span class="token punctuation">,</span> <span class="token string">'Pete'</span><span class="token punctuation">,</span> <span class="token string">'Biggles'</span><span class="token punctuation">,</span> <span class="token string">'Jasmin'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> info <span class="token operator">=</span> <span class="token string">'My cats are called '</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cats<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  info <span class="token operator">+=</span> cats<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">', '</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>info<span class="token punctuation">;</span><span class="token comment">// returns 'My cats are called Bill, Jeff, Pete, Biggles, Jasmin, '</span></code></pre><h2 id="跳出循环—break"><a href="#跳出循环—break" class="headerlink" title="跳出循环—break"></a>跳出循环—break</h2><p>如果要在所有迭代完成之前退出循环，可以使用break语句。</p><p>比如：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> cats <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Bill'</span><span class="token punctuation">,</span> <span class="token string">'Jeff'</span><span class="token punctuation">,</span> <span class="token string">'Pete'</span><span class="token punctuation">,</span> <span class="token string">'Biggles'</span><span class="token punctuation">,</span> <span class="token string">'Jasmin'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> info <span class="token operator">=</span> <span class="token string">'My cats are called '</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cats<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  info <span class="token operator">+=</span> cats<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">', '</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>info<span class="token punctuation">;</span><span class="token comment">// returns 'My cats are called Bill, Jeff, Pete, Biggles, '</span></code></pre><h2 id="跳过迭代—continue"><a href="#跳过迭代—continue" class="headerlink" title="跳过迭代—continue"></a>跳过迭代—continue</h2><p>continue语句以类似的方式工作，而不是完全跳出循环，而是跳过当前循环而执行下一个循环。</p><p>再看看这个例子：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> cats <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Bill'</span><span class="token punctuation">,</span> <span class="token string">'Jeff'</span><span class="token punctuation">,</span> <span class="token string">'Pete'</span><span class="token punctuation">,</span> <span class="token string">'Biggles'</span><span class="token punctuation">,</span> <span class="token string">'Jasmin'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> info <span class="token operator">=</span> <span class="token string">'My cats are called '</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cats<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  info <span class="token operator">+=</span> cats<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">', '</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>info<span class="token punctuation">;</span><span class="token comment">// returns 'My cats are called Bill, Jeff, Biggles, Jasmin, '</span></code></pre><h2 id="while-语句和-do-…-while-语句"><a href="#while-语句和-do-…-while-语句" class="headerlink" title="while 语句和 do … while 语句"></a>while 语句和 do … while 语句</h2><p>while 循环的语法如下：</p><pre class="language-none"><code class="language-none">initializerwhile (exit-condition) &#123;  &#x2F;&#x2F; code to run  final-expression&#125;</code></pre><p>再来看看相同的例子用 while 怎么写：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> cats <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Bill'</span><span class="token punctuation">,</span> <span class="token string">'Jeff'</span><span class="token punctuation">,</span> <span class="token string">'Pete'</span><span class="token punctuation">,</span> <span class="token string">'Biggles'</span><span class="token punctuation">,</span> <span class="token string">'Jasmin'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> info <span class="token operator">=</span> <span class="token string">'My cats are called '</span><span class="token punctuation">;</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> cats<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    info <span class="token operator">+=</span> cats<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">', '</span><span class="token punctuation">;</span>  i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>info<span class="token punctuation">;</span><span class="token comment">// returns 'My cats are called Bill, Jeff, Pete, Biggles, Jasmin, '</span></code></pre><p>do … while 循环和 while 类似，只不过是在while后提供了终止条件。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> cats <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Bill'</span><span class="token punctuation">,</span> <span class="token string">'Jeff'</span><span class="token punctuation">,</span> <span class="token string">'Pete'</span><span class="token punctuation">,</span> <span class="token string">'Biggles'</span><span class="token punctuation">,</span> <span class="token string">'Jasmin'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> info <span class="token operator">=</span> <span class="token string">'My cats are called '</span><span class="token punctuation">;</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">&#123;</span>  info <span class="token operator">+=</span> cats<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">', '</span><span class="token punctuation">;</span>  i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> cats<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>info<span class="token punctuation">;</span><span class="token comment">// returns 'My cats are called Bill, Jeff, Pete, Biggles, Jasmin, '</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之JavaScript练习——做一个小项目：数字炸弹</title>
      <link href="/posts/d524613f/"/>
      <url>/posts/d524613f/</url>
      
        <content type="html"><![CDATA[<h1 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h1><p>灵感来自于初中时和同学们在摸鱼时玩的小游戏，用计算器生成一个随机数，然后轮流猜，猜中的要受到惩罚——进行真心话大冒险。这个数字炸弹的小游戏便来源于此。</p><ul><li>开始游戏前需要选择游戏的人数，便于确定合适的范围并生成随机数。</li><li>猜完数字后，按下确认提交。猜的数字必须在范围内，否则会提醒重新进行猜数。</li><li>当游戏结束后，你可以点击开始新游戏，重新开始新一轮游戏。</li></ul><h1 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h1><h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h2><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>猜数字游戏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>数字炸弹游戏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gameRules<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>确定玩家人数后，点击确定，游戏开始。首先系统会根据玩家人数随机生成一个自然数作为数字炸弹，并且会给出这个数字炸弹的范围，玩家们可以自己规定顺序，轮流在范围内猜（猜到数字炸弹后将会引爆），这个过程数字炸弹的范围将会一直缩小，直到有一个玩家引爆炸弹，游戏结束。该玩家将受到严峻的惩罚。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>initPeople<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请选择玩家人数: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2-4人<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fewPeople<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>initSubmit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5人以上<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manyPeople<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>initSubmit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>guessField<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请猜数: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>guessField<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>guessField<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>确定<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>guessSubmit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>resultParas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Tips<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>guesses<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lastResult<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">const</span> Tips <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.Tips'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> guesses <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.guesses'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> lastResult <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.lastResult'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> lowOrHi <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.lowOrHi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> guessSubmit <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.guessSubmit'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> guessField <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.guessField'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> fewPeople <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#fewPeople'</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> manyPeople <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#manyPeople'</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> resetButton<span class="token punctuation">;</span>        <span class="token keyword">let</span> minimumLimit<span class="token punctuation">,</span>maximumLimit<span class="token punctuation">,</span>randomNumber<span class="token punctuation">;</span>        guessField<span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        guessSubmit<span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">initGame</span><span class="token punctuation">(</span><span class="token parameter">playerCount</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             guessField<span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          guessSubmit<span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>              <span class="token keyword">let</span> maximumNumber <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">*</span> playerCount<span class="token punctuation">;</span>          randomNumber <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> maximumNumber<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>randomNumber <span class="token operator">==</span> <span class="token number">100</span> <span class="token operator">||</span> randomNumber <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            randomNumber<span class="token operator">--</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          minimumLimit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          maximumLimit <span class="token operator">=</span> maximumNumber<span class="token punctuation">;</span>          guesses<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">'数字炸弹的范围是：'</span><span class="token punctuation">;</span>          guesses<span class="token punctuation">.</span>textContent <span class="token operator">+=</span> minimumLimit <span class="token operator">+</span> <span class="token string">' ~ '</span> <span class="token operator">+</span> maximumLimit<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">initGame1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          Tips<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">'玩家人数为2-4人，请在确认完顺序后开始游戏'</span><span class="token punctuation">;</span>          <span class="token function">initGame</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">initGame2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>          Tips<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">'玩家人数为5人以上，请在确认完顺序后开始游戏'</span><span class="token punctuation">;</span>          <span class="token function">initGame</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        fewPeople<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> initGame1<span class="token punctuation">)</span><span class="token punctuation">;</span>        manyPeople<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> initGame2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">resetLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          guesses<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">'数字炸弹的范围是：'</span><span class="token punctuation">;</span>          guesses<span class="token punctuation">.</span>textContent <span class="token operator">+=</span> minimumLimit <span class="token operator">+</span> <span class="token string">' ~ '</span> <span class="token operator">+</span> maximumLimit<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">checkGuess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> userGuess <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>guessField<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>userGuess <span class="token operator">></span> minimumLimit <span class="token operator">&amp;&amp;</span> userGuess <span class="token operator">&lt;</span>maximumLimit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>userGuess <span class="token operator">===</span> randomNumber<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              lastResult<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">'!!!Boom!!! '</span> <span class="token operator">+</span> userGuess <span class="token operator">+</span> <span class="token string">' 为数字炸弹，你选中了数字炸弹，请接受惩罚'</span><span class="token punctuation">;</span>              lastResult<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span>              guesses<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>              <span class="token function">setGameOver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>userGuess <span class="token operator">&lt;</span> randomNumber<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              lastResult<span class="token punctuation">.</span>textContent <span class="token operator">=</span> userGuess <span class="token operator">+</span> <span class="token string">' 不是炸弹数字，你是安全的'</span>              lastResult<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'green'</span><span class="token punctuation">;</span>              minimumLimit <span class="token operator">=</span> userGuess<span class="token punctuation">;</span>              <span class="token function">resetLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>userGuess <span class="token operator">></span> randomNumber<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              lastResult<span class="token punctuation">.</span>textContent <span class="token operator">=</span> userGuess <span class="token operator">+</span> <span class="token string">' 不是炸弹数字，你是安全的'</span>              lastResult<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'green'</span><span class="token punctuation">;</span>              maximumLimit <span class="token operator">=</span> userGuess<span class="token punctuation">;</span>              <span class="token function">resetLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            lastResult<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">'你猜的数字不在可选范围内，请重新选择'</span><span class="token punctuation">;</span>            lastResult<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'rgb(230, 97, 8)'</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          guessField<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>          guessField<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        guessSubmit<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> checkGuess<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">setGameOver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          guessField<span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          guessSubmit<span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          fewPeople<span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          manyPeople<span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          resetButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          resetButton<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">'开始新游戏'</span><span class="token punctuation">;</span>          document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>resetButton<span class="token punctuation">)</span><span class="token punctuation">;</span>          resetButton<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> resetGame<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">resetGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          Tips<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">'已开始新一轮游戏，请选择玩家人数。'</span><span class="token punctuation">;</span>          resetButton<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>resetButton<span class="token punctuation">)</span><span class="token punctuation">;</span>          fewPeople<span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          manyPeople<span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          guessField<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>          guessField<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          lastResult<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'white'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>作为JavaScript的一次练习，就将js代码写在html内部了。</p><h2 id="index-css"><a href="#index-css" class="headerlink" title="index.css"></a>index.css</h2><pre class="language-js" data-language="js"><code class="language-js">html <span class="token punctuation">&#123;</span>    font<span class="token operator">-</span>family<span class="token operator">:</span> sans<span class="token operator">-</span>serif<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  body <span class="token punctuation">&#123;</span>    width<span class="token operator">:</span> <span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>    max<span class="token operator">-</span>width<span class="token operator">:</span> <span class="token number">800</span>px<span class="token punctuation">;</span>    min<span class="token operator">-</span>width<span class="token operator">:</span> <span class="token number">480</span>px<span class="token punctuation">;</span>    margin<span class="token operator">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">.</span>lastResult <span class="token punctuation">&#123;</span>    color<span class="token operator">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    padding<span class="token operator">:</span> <span class="token number">3</span>px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">.</span>form <span class="token punctuation">&#123;</span>    padding<span class="token operator">:</span> <span class="token number">2</span>px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">.</span>initPeople <span class="token punctuation">&#123;</span>    width<span class="token operator">:</span> <span class="token number">160</span>px<span class="token punctuation">;</span>    font<span class="token operator">-</span>display<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">.</span>guesses <span class="token punctuation">&#123;</span>    border<span class="token operator">:</span> <span class="token number">1</span>pm solid <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">163</span><span class="token punctuation">,</span> <span class="token number">0.541</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">.</span>Tips <span class="token punctuation">&#123;</span>    background<span class="token operator">-</span>color<span class="token operator">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* border: 2px solid cornflowerblue; */</span>    color<span class="token operator">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">236</span><span class="token punctuation">,</span> <span class="token number">243</span><span class="token punctuation">,</span> <span class="token number">248</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre><h1 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h1><p>第一版本的数字炸弹就这样完成了。如果对这个小项目感兴趣的，可以<a href="https://github.com/feng-mou-mou/number-boom-game">查看我们的当前版本</a>,如果有什么问题，希望可以得到你们的反馈。</p>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之JavaScript学习（五）数组</title>
      <link href="/posts/c7f27e3/"/>
      <url>/posts/c7f27e3/</url>
      
        <content type="html"><![CDATA[<h1 id="数组-（Array）"><a href="#数组-（Array）" class="headerlink" title="数组 （Array）"></a>数组 （Array）</h1><ul><li>数组也是一个对象，是一个用来存储数据的对象和Object类似，但是它的存储效率比普通对象要高</li><li>数组中保存的内容我们称为<code>元素</code></li><li>数组使用索引（<code>index</code>）来操作元素</li><li>索引指由<code>0</code>开始的整数</li></ul><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><p>数组由方括号构成，其中包含用逗号分隔的元素列表。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h2 id="访问和修改数组元素"><a href="#访问和修改数组元素" class="headerlink" title="访问和修改数组元素"></a>访问和修改数组元素</h2><p>可以使用括号表示法访问数组中的元素，与检索特定字符串字符的方法相同。</p><pre class="language-js" data-language="js"><code class="language-js">arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// returns 1</span></code></pre><p>也可以为数组提供新值来修改或者添加数组中的元素。</p><pre class="language-js" data-language="js"><code class="language-js">arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>arr2<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>arr2<span class="token punctuation">;</span><span class="token comment">// returns [0,2,3,4,5,6]</span></code></pre><h2 id="获取数组的长度"><a href="#获取数组的长度" class="headerlink" title="获取数组的长度"></a>获取数组的长度</h2><p>通过使用<code>length</code>属性获取数组的长度（数组中的元素个数）。</p><pre class="language-js" data-language="js"><code class="language-js">arr2<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment">// returns 6</span></code></pre><h1 id="一些数组方法"><a href="#一些数组方法" class="headerlink" title="一些数组方法"></a>一些数组方法</h1><h2 id="字符串和数组之间的转换"><a href="#字符串和数组之间的转换" class="headerlink" title="字符串和数组之间的转换"></a>字符串和数组之间的转换</h2><p>有时候，我们会看到一个包含在一个长长的字符串中的原始数据，想要将有用的项目分成更有用的表单，然后对它们进行处理，例如将它们显示在数据表中。我们可以使用 <code>split()</code> 方法。在其最简单的形式中，这需要一个参数，要将字符串分隔的字符，并返回分隔符之间的子串，作为数组中的项。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> myData <span class="token operator">=</span> <span class="token string">'Xiamen,Quanzhou,Putian,Fuzhou,Longyan,Zhangzhou'</span><span class="token punctuation">;</span><span class="token keyword">let</span> myArray <span class="token operator">=</span> myData<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myArray<span class="token punctuation">;</span><span class="token comment">// returns ['Xiamen', 'Quanzhou', 'Putian', 'Fuzhou', 'Longyan', 'Zhangzhou']</span>myArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment">// returns 6</span></code></pre><p>我们也可以用 <code>join()</code> 方法或者 <code>toString()</code> 进行相反的操作，如：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> myNewString <span class="token operator">=</span> myArray<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myNewString<span class="token punctuation">;</span><span class="token comment">// returns 'Xiamen,Quanzhou,Putian,Fuzhou,Longyan,Zhangzhou'</span>myArray<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// returns 'Xiamen,Quanzhou,Putian,Fuzhou,Longyan,Zhangzhou'</span></code></pre><p><code>toString()</code>方法更简单，不需要参数，但也代表着是有限制的—它不能转换使用逗号以外的分隔符的字符串。</p><h2 id="添加和删除数组元素"><a href="#添加和删除数组元素" class="headerlink" title="添加和删除数组元素"></a>添加和删除数组元素</h2><p>使用 <code>push()</code> 可以添加一个或多个元素到数组末尾，方法调用完成时，将返回数组的新长度。首先来看看的例子：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> newLength <span class="token operator">=</span> myArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'Dehua'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myArray<span class="token punctuation">;</span><span class="token comment">// returns ['Xiamen', 'Quanzhou', 'Putian', 'Fuzhou', 'Longyan', 'Zhangzhou', 'Dehua']</span>newLength<span class="token punctuation">;</span><span class="token comment">// returns 7</span></code></pre><p>使用 <code>pop()</code> 可以删除数组最后一个元素，并且返回已删除的元素。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> removedItem <span class="token operator">=</span> myArray<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myArray<span class="token punctuation">;</span><span class="token comment">// returns ['Xiamen', 'Quanzhou', 'Putian', 'Fuzhou', 'Longyan', 'Zhangzhou']</span>removedItem<span class="token punctuation">;</span><span class="token comment">// returns 'Dehua'</span></code></pre><p><code>unshift()</code>和 <code>shift()</code> 从功能上与 <code>push()</code> 和 <code>pop()</code> 完全相同，只是它们分别作用于数组的开始，而不是结尾。</p><pre class="language-js" data-language="js"><code class="language-js">myArray<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">'Ningde'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myArray<span class="token punctuation">;</span><span class="token comment">// returns ['Ningde', 'Xiamen', 'Quanzhou', 'Putian', 'Fuzhou', 'Longyan', 'Zhangzhou']</span><span class="token keyword">let</span> removedItem <span class="token operator">=</span> myArray<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myArray<span class="token punctuation">;</span><span class="token comment">// returns ['Xiamen', 'Quanzhou', 'Putian', 'Fuzhou', 'Longyan', 'Zhangzhou']</span>removedItem<span class="token punctuation">;</span><span class="token comment">// returns 'Ningde'</span></code></pre><h2 id="其他常用方法"><a href="#其他常用方法" class="headerlink" title="其他常用方法"></a>其他常用方法</h2><ol><li><p><code>slice()</code> 从一个数组中截取特定范围的元素并将这些元素以数组的形式返回，不改变原数组</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> mySlice <span class="token operator">=</span> myArray<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>mySlice<span class="token punctuation">;</span><span class="token comment">// returns ['Quanzhou', 'Putian']</span></code></pre></li><li><p><code>splice()</code> 删除或者添加元素，直接改变原数组,返回值为删除的元素</p></li><li><p><code>concat()</code> 可以将两个或者多个数组连接成一个数组，不会改变原数组</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> mySlice2 <span class="token operator">=</span> myArray<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>mySlice2<span class="token punctuation">;</span><span class="token comment">// returns ['Fuzhou', 'Longyan']</span>mySlice<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>mySlice<span class="token punctuation">,</span>mySlice2<span class="token punctuation">)</span><span class="token comment">// returns ['Quanzhou', 'Putian', 'Fuzhou', 'Longyan']</span></code></pre></li><li><p><code>reverse()</code> 调换数组中元素的排列顺序，会修改原数组</p></li><li><p><code>sort()</code></p><ul><li>给数组中的元素排序，默认以<code>Unicode编码</code>顺序排列，因此直接对数组中的数字排序会产生预料外的结果</li><li>可以传递一个回调函数作为<code>sort</code>的参数，回调函数中有两个形参分别表示数组中一前一后的两个元素<ul><li>函数的返回值决定是否交换这个两个元素，当返回值<code>大于0</code>时交换，<code>小于0</code>时不交换，<code>等于0</code>时认为两个值相等不交换</li></ul></li><li>会直接修改原数组的元素，与方法的返回值相同</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之JavaScript学习（四）文本处理 — JavaScript中的字符串</title>
      <link href="/posts/37e96e6b/"/>
      <url>/posts/37e96e6b/</url>
      
        <content type="html"><![CDATA[<h1 id="字符串基本知识"><a href="#字符串基本知识" class="headerlink" title="字符串基本知识"></a>字符串基本知识</h1><p>我们来通过在控制台输入一些基本的行来进行对字符串的学习。（可以打开浏览器按F12打开）  </p><h2 id="创建一个字符串"><a href="#创建一个字符串" class="headerlink" title="创建一个字符串"></a>创建一个字符串</h2><ol><li><p>首先, 输入下面的代码:</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> stringTest <span class="token operator">=</span> <span class="token string">'The test is a string'</span><span class="token punctuation">;</span>stringTest<span class="token punctuation">;</span></code></pre><p>就像我们处理数字一样，我们声明一个变量，用一个字符串值初始化它，然后返回值。这里惟一的区别是，在编写字符串时，我们需要在字符串上加上引号。</p></li><li><p>如果你不这样做，或者在书写过程中，漏掉其中一个引号，你就会得到一个错误。</p><p>试着输入以下几行:</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> badString <span class="token operator">=</span> This is a test<span class="token punctuation">;</span><span class="token keyword">let</span> badString <span class="token operator">=</span> 'This is a test<span class="token punctuation">;</span><span class="token keyword">let</span> badString <span class="token operator">=</span> This is a test'<span class="token punctuation">;</span></code></pre><p>这些行不起作用，因为没有引号的任何文本字符串都被假定为变量名、属性名、保留字或类似。如果浏览器不能找到它，那么将会引发语法错误(例如:”missing ; before statement”)。</p></li><li><p>如果您之前定义了变量字符串，下面的操作将会起作用 — 现在来试一试:</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> newString <span class="token operator">=</span> stringTest<span class="token punctuation">;</span>newString<span class="token punctuation">;</span></code></pre><p>现在将 <code>string</code> 的值赋值给 <code>newString</code>，赋值之后，两个字符串的值相等。</p></li></ol><h2 id="单引号和双引号"><a href="#单引号和双引号" class="headerlink" title="单引号和双引号"></a>单引号和双引号</h2><ol><li><p>在JavaScript中，您可以选择单引号或双引号来包裹字符串。</p></li><li><p>两者之间几乎没有什么区别，根据个人偏好来使用。但是，您应该选择一个并坚持使用它，不一致的引号混用代码可能会让人很迷惑，特别是如果您在同一个字符串中使用不同的引号！将返回一个错误，浏览器会认为字符串没有被关闭，因为在字符串中您没有使用其他类型的引号。</p></li><li><p>但是，您不能在字符串中包含相同的引号，因为它是用来包含它们的。比如：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> bigmouth <span class="token operator">=</span> <span class="token string">'I'</span>ve got no right to take my place<span class="token operator">...</span>'<span class="token punctuation">;</span></code></pre><p>这会返回一个错误。</p></li></ol><h2 id="转义字符串中的字符"><a href="#转义字符串中的字符" class="headerlink" title="转义字符串中的字符"></a>转义字符串中的字符</h2><p>要修复我们之前的问题代码行，我们需要避免引号的问题。转义字符意味着我们对它们做一些事情，以确保它们被识别成文本，而不是代码的一部分。在JavaScript中，我们通过在字符之前放一个反斜杠来实现这一点。试试这个:</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> bigmouth <span class="token operator">=</span> <span class="token string">'I\'ve got no right to take my place...'</span><span class="token punctuation">;</span>bigmouth<span class="token punctuation">;</span></code></pre><p>你可以用别的方式来达到一样的目的， 例如. <code>\&quot;,</code> 除此之外有一些特殊的代码 。</p><h1 id="连接字符串"><a href="#连接字符串" class="headerlink" title="连接字符串"></a>连接字符串</h1><ol><li><p>在JavaScript中连接字符串使用加号(+)操作符，我们也用它来将数字加在一起，但是在这种情况下，它做了一些不同的事情。让我们在控制台中尝试一个例子。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> first <span class="token operator">=</span> <span class="token string">'Hello, '</span><span class="token punctuation">;</span><span class="token keyword">let</span> second <span class="token operator">=</span> <span class="token string">'how are you?'</span><span class="token punctuation">;</span><span class="token keyword">let</span> joined <span class="token operator">=</span> first <span class="token operator">+</span> second<span class="token punctuation">;</span>joined<span class="token punctuation">;</span></code></pre><p>变量 <code>joined</code> 的值的结果，它包含的值为 “Hello, how are you?”。</p></li><li><p>最后一个例子中， 我们只是把两个字符串连接在一起，但是你可以喜欢连接多少就多少个， 只需要在它们之间加上 + 操作符。</p></li><li><p>你还能用真实的字符串和变量来混合。比如：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> response <span class="token operator">=</span> first <span class="token operator">+</span> <span class="token string">'I am fine — '</span> <span class="token operator">+</span> second<span class="token punctuation">;</span>response<span class="token punctuation">;</span></code></pre></li></ol><h2 id="上下文中的串联"><a href="#上下文中的串联" class="headerlink" title="上下文中的串联"></a>上下文中的串联</h2><p>在操作中使用的连接是怎么样的呢，来看一个例子：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>Press me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'What is your name?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hello '</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">', nice to see you!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>复制这段代码去试一试。</p><p>这里我们使用的是第4行中的 <code>window.prompt()</code> 函数， 它要求用户通过一个弹出对话框回答一个问题然后将他们输入的文本存储在一个给定的变量中 — 在这个例子中是就是 <code>name</code> 变量。然后，我们在第5行中使用 <code>window.alert()</code> 函数来显示另一个弹出窗口，其中包含一个字符串，我们用两个字符串常量和name变量通过连接进行组合。</p><h2 id="数字与字符"><a href="#数字与字符" class="headerlink" title="数字与字符"></a>数字与字符</h2><ol><li><p>当我们尝试添加(或连接)一个字符串和一个数字时，浏览器很聪明地将数字转换为字符串，并将这两个字符串连接在一起。</p></li><li><p>甚至可以用两个数字来这么操作——你可以通过用引号将数字包装成一个字符串。</p></li><li><p>如果有一个数值变量，想要将其转换为字符串，并且不改变其他地方，或者想将一个字符串转换为一个数字而不改变其其他地方，那么可以使用以下两个构造:</p><ul><li><p>如果可以的话，<code>Number</code>对象将把传递给它的任何东西转换成一个数字。<br>试一试:</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> myString <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span><span class="token keyword">let</span> myNum <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>myString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">typeof</span> myNum<span class="token punctuation">;</span></code></pre></li><li><p>另一方面，每个数字都有一个名为 toString()的方法，它将把它转换成等价的字符串。<br>试试这个:</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> myNum <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">let</span> myString <span class="token operator">=</span> myNum<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">typeof</span> myString<span class="token punctuation">;</span></code></pre></li></ul><p>这些结构在某些情况下是非常有用的，例如，如果一个用户将一个数字输入到一个表单文本字段中，这将是一个字符串，但是如果你想要将这个数字添加到某些东西中时，你需要它是一个数字，所以你可以通过 <code>Number()</code> 来处理这个问题。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之JavaScript学习（三）数字与运算符</title>
      <link href="/posts/c1130bff/"/>
      <url>/posts/c1130bff/</url>
      
        <content type="html"><![CDATA[<h1 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h1><p>在编程中，即使是人人熟知的最普遍的十进制数，也比想象的要复杂的多。我们使用不同的术语来描述不同类型的十进制数，例如：</p><ul><li><strong>整数</strong> 就是整数,例如 10, 400, 或者 -5.</li><li><strong>浮点数</strong> (浮点) 有小数点或小数位，例如 12.5，和 56.7786543。</li><li><strong>双精度</strong>是一种特定类型的浮点数，它们具有比标准浮点数更高的精度（这意味着它们精确到更大的小数位数）。</li></ul><p>有不同类型的数字系统,除了十进制外，还有：</p><ul><li><strong>二进制</strong> — 计算机的最基础语言—— 0 和 1</li><li><strong>八进制</strong> — 基数8，每列使用0-7</li><li><strong>十六进制</strong> — 基数16，每列使用0-9，然后使用a-f。 在CSS中设置颜色时，可能会遇到这些数字。</li></ul><p>与其他一些编程语言不同，JavaScript只有一个数据类型用来表示数字（包括 integers 和 decimals ），<code>Number</code>。 这意味着，在JavaScript中处理的任何类型的数字，都以完全相同的方式处理它们。</p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>运算符也称为操作符。<br>通过运算符可以对一个或多个值进行运算或操作。</p><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>算术运算符是我们用来做和的基本运算符：</p><table><thead><tr><th align="left">运算符</th><th align="left">名称</th><th align="left">作用</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><code>+</code></td><td align="left">加法</td><td align="left">两个数相加。</td><td align="left"><code>6 + 9</code></td></tr><tr><td align="left"><code>-</code></td><td align="left">减法</td><td align="left">从左边减去右边的数。</td><td align="left"><code>20 - 15</code></td></tr><tr><td align="left"><code>*</code></td><td align="left">乘法</td><td align="left">两个数相乘。</td><td align="left"><code>3 * 7</code></td></tr><tr><td align="left"><code>/</code></td><td align="left">除法</td><td align="left">用右边的数除左边的数</td><td align="left"><code>10 / 5</code></td></tr><tr><td align="left"><code>%</code></td><td align="left">求余(有时候也叫取模)</td><td align="left">在你将左边的数分成同右边数字相同的若干整数部分后，返回剩下的余数</td><td align="left"><code>8 % 3</code> (返回 2，8除以3的倍数，余下2 。)</td></tr><tr><td align="left"><code>**</code></td><td align="left">幂</td><td align="left">取底数的指数次方，即指数所指定的底数相乘。它在EcmaScript 2016 中首次引入。</td><td align="left"><code>5 ** 5</code> (返回 3125，相当于 <code>5 * 5 * 5 * 5 * 5</code> 。)</td></tr></tbody></table><h2 id="自增和自减运算符"><a href="#自增和自减运算符" class="headerlink" title="自增和自减运算符"></a>自增和自减运算符</h2><p>有时候，您需要反复把一个变量加1或减1。 这可以方便地使用增量（<code>++</code>）和递减（ <code>--</code> ）运算符来完成。</p><ul><li><p><code>++</code> 自增，可以使变量在原值的基础上自增1</p><ul><li><code>前++</code>(++a)：++a的值是变量的新值（自增后的值）</li><li><code>后++</code>(a++)：a++的值是变量的原值（自增前的值）</li></ul></li><li><p><code>--</code> 自减，可以使变量在原值的基础上自减1</p><ul><li><code>前--</code>(–a)：–a的值是变量的新值（自减后的值）</li><li><code>后--</code>(a–)：a–的值是变量的原值（自减前的值）</li></ul></li></ul><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><ul><li><p>!非运算可以对一个布尔值进行取反，<code>true</code>变<code>false</code>，<code>false</code>变&#96;true&#96;&#96;</p><ul><li>当对非布尔值使用<code>!</code>时，会先将其转换为布尔值然后再取反</li><li>我们可以利用两个<code>!</code>来将其他的数据类型转换为布尔值</li></ul></li><li><p><code>&amp;&amp;</code> 可以对符号两侧的值进行<code>与</code>运算</p><ul><li>只有两端的值都为<code>true</code>时，才会返回<code>true</code>。只要有一个<code>false</code>就会返回<code>false</code></li><li>与是一个短路的与，如果第一个值是<code>false</code>，则不再检查第二个值</li><li>对于非布尔值，它会将其转换为布尔值然后做运算，并返回原值<ul><li>如果第一个值为<code>false</code>，则返回第一个值</li><li>如果第一个值为<code>true</code>，则返回第二个值</li></ul></li></ul></li><li><p><code>||</code> 可以对符号两侧的值进行<code>或</code>运算</p><ul><li>只有两端都是<code>false</code>时，才会返回<code>false</code>。只要有一个<code>true</code>，就会返回<code>true</code></li><li>或是短路的或，如果第一个值是<code>true</code>，则不再检查第二个值</li><li>对于非布尔值，它会将其转换为布尔值然后做运算，并返回原值<ul><li>如果第一个值为<code>true</code>，则返回第一个值</li><li>如果第一个值为<code>false</code>，则返回第二个值</li></ul></li></ul></li></ul><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>赋值运算符是向变量分配值的运算符。比如<code>=</code>， 它只是将右边的值赋给左边的变量。</p><p>还有一些更复杂的类型，它们提供了有用的快捷方式，可以使您的代码更加清洁和高效。 最常见的如下：</p><table><thead><tr><th align="left">运算符</th><th align="left">名称</th><th align="left">作用</th><th align="left">示例</th><th align="left">等价于</th></tr></thead><tbody><tr><td align="left"><code>+=</code></td><td align="left">加法赋值</td><td align="left">右边的数值加上左边的变量，然后再返回新的变量。</td><td align="left"><code>x = 3;x += 4;</code></td><td align="left"><code>x = 3;x = x + 4;</code></td></tr><tr><td align="left"><code>-=</code></td><td align="left">减法赋值</td><td align="left">左边的变量减去右边的数值，然后再返回新的变量。</td><td align="left"><code>x = 6;x -= 3;</code></td><td align="left"><code>x = 6;x = x - 3;</code></td></tr><tr><td align="left"><code>*=</code></td><td align="left">乘法赋值</td><td align="left">左边的变量乘以右边的数值，然后再返回新的变量。</td><td align="left"><code>x = 2;x *= 3;</code></td><td align="left"><code>x = 2;x = x * 3;</code></td></tr><tr><td align="left"><code>/=</code></td><td align="left">除法赋值</td><td align="left">左边的变量除以右边的数值，然后再返回新的变量。</td><td align="left"><code>x = 10;x /= 5;</code></td><td align="left"><code>x = 10;x = x / 5;</code></td></tr></tbody></table><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>有时，我们将要运行真&#x2F;假测试，然后根据该测试的结果进行相应的操作 - 为此，我们使用比较运算符。</p><table><thead><tr><th align="left">运算符</th><th align="left">名称</th><th align="left">作用</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><code>===</code></td><td align="left">严格等于</td><td align="left">测试左右值是否相同</td><td align="left"><code>5 === 2 + 4</code></td></tr><tr><td align="left"><code>!==</code></td><td align="left">严格不等于</td><td align="left">测试左右值是否<strong>不</strong>相同</td><td align="left"><code>5 !== 2 + 3</code></td></tr><tr><td align="left"><code>&lt;</code></td><td align="left">小于</td><td align="left">测试左值是否小于右值。</td><td align="left"><code>10 &lt; 6</code></td></tr><tr><td align="left"><code>&gt;</code></td><td align="left">大于</td><td align="left">测试左值是否大于右值</td><td align="left"><code>10 &gt; 20</code></td></tr><tr><td align="left">&lt;&#x3D;</td><td align="left">小于或等于</td><td align="left">测试左值是否小于或等于右值。</td><td align="left"><code>3 &lt;= 2</code></td></tr><tr><td align="left">&gt;&#x3D;</td><td align="left">大于或等于</td><td align="left">测试左值是否大于或等于正确值。</td><td align="left"><code>5 &gt;= 4</code></td></tr></tbody></table><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><ul><li><code>…?…:…</code> 语法：条件表达式<code>?</code>语句1<code>:</code>语句2</li><li>执行流程：<ul><li>先对条件表达式求值判断</li><li>如果判断结果为<code>true</code>，则执行语句1，并返回执行结果</li><li>如果判断结果为<code>false</code>，则执行语句2，并返回执行结果</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之JavaScript学习（二）变量</title>
      <link href="/posts/1ffb11de/"/>
      <url>/posts/1ffb11de/</url>
      
        <content type="html"><![CDATA[<h1 id="变量是什么"><a href="#变量是什么" class="headerlink" title="变量是什么"></a>变量是什么</h1><p>一个变量，就是一个用于存放数值的容器。这个数值可能是一个用于累加计算的数字，或者是一个句子中的字符串。变量的独特之处在于它存放的数值是可以改变的。</p><p>变量的另一个特性就是它们能够存储任何的东西 – 不只是字符串和数字。变量可以存储更复杂的数据，甚至是函数。</p><h1 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h1><p>要想使用变量，你需要做的第一步就是创建它 – 更准确的说，是声明一个变量。声明一个变量的语法是在 <code>var</code> 或 <code>let</code> 关键字之后加上这个变量的名字：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> myName<span class="token punctuation">;</span><span class="token keyword">let</span> myAge<span class="token punctuation">;</span></code></pre><p>在这里我们声明了两个变量 <code>myName</code> 和 <code>myAge</code>.</p><h1 id="初始化变量"><a href="#初始化变量" class="headerlink" title="初始化变量"></a>初始化变量</h1><p>一旦你定义了一个变量，你就能够初始化它. 方法如下，在变量名之后跟上一个“&#x3D;”，然后是数值:</p><pre class="language-js" data-language="js"><code class="language-js">myName <span class="token operator">=</span> <span class="token string">'Chris'</span><span class="token punctuation">;</span>myAge <span class="token operator">=</span> <span class="token number">37</span><span class="token punctuation">;</span></code></pre><p>你可以像这样在声明变量的时候给变量初始化:</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> myName <span class="token operator">=</span> <span class="token string">'Chris'</span><span class="token punctuation">;</span></code></pre><h1 id="var-与-let-的区别"><a href="#var-与-let-的区别" class="headerlink" title="var 与 let 的区别"></a>var 与 let 的区别</h1><p>最初创建 JavaScript 时，是只有 <code>var</code> 的。 在大多数情况下，这种方法可以接受， 但有时在工作方式上会有一些问题——它的设计会令人困惑或令人讨厌 。 因此，<code>let</code> 是在现代版本中的 JavaScript 创建的一个新的关键字，用于创建与 <code>var</code> 工作方式有些不同的变量，解决了过程中的问题。</p><p>下面解释几个简单的差异。</p><p>首先，如果你编写一个声明并初始化变量的多行 JavaScript 程序，你可以在初始化一个变量之后用 <code>var</code> 声明它，它仍然可以工作。</p><p>这是由于变量的<strong>提升</strong>。但提升操作不再适用于 <code>let</code> 。如果将上面例子中的 <code>var</code> 替换成 <code>let</code> 将不起作用并引起一个错误。 这是一件好事——因为初始化后再声明一个变量会使代码变得混乱和难以理解。</p><p>其次，当你使用 <code>var</code> 时，可以根据需要多次声明相同名称的变量，但是 <code>let</code> 不能。比如：</p><pre class="language-js" data-language="js"><code class="language-js">ar myName <span class="token operator">=</span> <span class="token string">'Chris'</span><span class="token punctuation">;</span><span class="token keyword">var</span> myName <span class="token operator">=</span> <span class="token string">'Bob'</span><span class="token punctuation">;</span></code></pre><p>但是以下内容会在第二行引发错误：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> myName <span class="token operator">=</span> <span class="token string">'Chris'</span><span class="token punctuation">;</span><span class="token keyword">let</span> myName <span class="token operator">=</span> <span class="token string">'Bob'</span><span class="token punctuation">;</span></code></pre><h1 id="更新变量"><a href="#更新变量" class="headerlink" title="更新变量"></a>更新变量</h1><p>一旦变量赋值，您可以通过简单地给它一个不同的值来更新它。  </p><h2 id="关于变量命名的规则"><a href="#关于变量命名的规则" class="headerlink" title="关于变量命名的规则"></a>关于变量命名的规则</h2><p>你可以给你的变量赋任何你喜欢的名字，但有一些限制。 一般你应当坚持使用拉丁字符(0-9,a-z,A-Z)和下划线字符。</p><ul><li>你不应当使用规则之外的其他字符，因为它们可能引发错误，或对国际用户来说难以理解。</li><li>变量名不要以下划线开头—— 以下划线开头的被某些JavaScript设计为特殊的含义，因此可能让人迷惑。</li><li>变量名不要以数字开头。这种行为是不被允许的，并且将引发一个错误。</li><li>一个可靠的命名约定叫做 **”小写驼峰命名法”**，用来将多个单词组在一起，小写整个命名的第一个字母然后大写剩下单词的首字符。我们已经在文章中使用了这种命名方法。</li><li>让变量名直观，它们描述了所包含的数据。不要只使用单一的字母&#x2F;数字，或者长句。</li><li>变量名大小写敏感——因此<code>myage</code>与<code>myAge</code>是2个不同的变量。</li><li>最后也是最重要的一点—— 你应当避免使用JavaScript的保留字给变量命名。保留字，即是组成JavaScript的实际语法的单词！因此诸如 <code>var</code>, <code>function</code>, <code>let和</code> <code>for</code>等，都不能被作为变量名使用。浏览器将把它们识别为不同的代码项，因此你将得到错误。</li></ul><h1 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h1><h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><p>你可以在变量中存储数字，不论这些数字是像30（也叫整数）这样，或者像2.456这样的小数（也叫做浮点数）。与其他编程语言不同，在 JavaScript 中你不需要声明一个变量的类型。当你给一个变量数字赋值时，不需要用引号括起来。 </p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> myAge <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span></code></pre><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>字符串是文本的一部分。当你给一个变量赋值为字符串时，你需要用单引号或者双引号把值给包起来，否则JavaScript将会把这个字符串值理解成别的变量名。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> dolphinGoodbye <span class="token operator">=</span> <span class="token string">'So long and thanks for all the fish'</span><span class="token punctuation">;</span></code></pre><h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h2><p>Boolean 的值有2种：true或false。它们通常被用于在适当的代码之后，测试条件是否成立。举个例子，一个简单的示例如下： </p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> iAmAlive <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></code></pre><p>然而实际上通常是以下用法：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> test <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span></code></pre><p>这是使用“小于”操作符（&lt;）来测试6小于3。正如你所料的，将会返回<code>false</code>，因为6并不小于3！在这个课程中，以后你将会学到许多有关操作符的知识。</p><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p>数组是一个单个对象，其中包含很多值，方括号括起来，并用逗号分隔。尝试在您的控制台输入以下行:</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> myNameArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Chris'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Jim'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> myNumberArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>当数组被定义后，您可以使用如下所示的语法来访问各自的值，例如下行:</p><pre class="language-js" data-language="js"><code class="language-js">myNameArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// should return 'Chris'</span>myNumberArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// should return 40</span></code></pre><p>此处的方括号包含一个索引值，该值指定要返回的值的位置。 您可能已经注意到，计算机从0开始计数，而不是像我们人类那样的1。</p><p>在以后的文章，你将更多地了解数组。</p><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p>在编程中，对象是现实生活中的模型的一种代码结构。您可以有一个简单的对象，代表一个停车场，并包含有关其宽度和长度的信息，或者您可以有一个代表一个人的对象，并包含有关他们的名字，身高，体重，他们说什么语言，如何说 你好，他们，等等。</p><p>尝试在您的控制台输入以下行:</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name <span class="token operator">:</span> <span class="token string">'Spot'</span><span class="token punctuation">,</span> breed <span class="token operator">:</span> <span class="token string">'Dalmatian'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>要检索存储在对象中的信息，可以使用以下语法:</p><pre class="language-js" data-language="js"><code class="language-js">dog<span class="token punctuation">.</span>name</code></pre><p>我们现在不会看对象了 - 您可以在将来的模块中了解更多关于这些对象的信息.</p><h1 id="动态类型"><a href="#动态类型" class="headerlink" title="动态类型"></a>动态类型</h1><p>JavaScript是一种“动态类型语言”，这意味着不同于其他一些语言(译者注：如C、JAVA)，您不需要指定变量将包含什么数据类型（例如number或string）</p><p>例如，如果你声明一个变量并给它一个带引号的值，浏览器就会知道它是一个字符串：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> myString <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span></code></pre><p>即使它包含数字，但它仍然是一个字符串，所以要小心：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> myNumber <span class="token operator">=</span> <span class="token string">'500'</span><span class="token punctuation">;</span> <span class="token comment">// oops, this is still a string</span><span class="token keyword">typeof</span> myNumber<span class="token punctuation">;</span>myNumber <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span> <span class="token comment">// much better — now this is a number</span><span class="token keyword">typeof</span> myNumber</code></pre><p>第一次返回 String；第二次返回 Number。</p>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之JavaScript学习（一）什么是JavaScript</title>
      <link href="/posts/5450bd07/"/>
      <url>/posts/5450bd07/</url>
      
        <content type="html"><![CDATA[<h1 id="广义的定义"><a href="#广义的定义" class="headerlink" title="广义的定义"></a>广义的定义</h1><p>JavaScript 是一种脚本，一门编程语言，它可以在网页上实现复杂的功能，网页展现给你的不再是简单的静态信息，而是实时的内容更新，交互式的地图，2D&#x2F;3D 动画，滚动播放的视频等等。它是标准 Web 技术蛋糕的第三层。</p><p><img src="/img/Web/webcake.png" alt="web蛋糕" loading="lazy"></p><h1 id="它可以做什么"><a href="#它可以做什么" class="headerlink" title="它可以做什么"></a>它可以做什么</h1><p>客户端（client-side）JavaScript 语言的核心包含一些普遍的编程特性，以让你可以做到如下的事情：</p><ul><li>在变量中储存有用的值。</li><li>操作一段文本（在编程中称为“字符串”（string））。</li><li>运行代码以响应网页中发生的特定事件。</li><li>还有更多</li></ul><h1 id="API是什么"><a href="#API是什么" class="headerlink" title="API是什么"></a>API是什么</h1><p>JavaScript 语言核心之上所构建的功能更令人兴奋。<strong>应用程序接口（Application Programming Interfaces</strong>（<strong>API</strong>））将为你的代码提供额外的超能力。</p><p>API 是已经建立好的一套代码组件，可以让开发者实现原本很难甚至无法实现的程序。</p><p>API 通常分为两类。**浏览器 API <strong>和</strong>第三方 API **。  </p><h2 id="浏览器-API"><a href="#浏览器-API" class="headerlink" title="浏览器 API"></a>浏览器 API</h2><p><strong>浏览器 API</strong> 内建于 web 浏览器中，它们可以将数据从周边计算机环境中筛选出来，还可以做实用的复杂工作。例如：</p><ul><li><code>文档对象模型 API（DOM（Document Object Model）API）</code>能通过创建、移除和修改 HTML，为页面动态应用新样式等手段来操作 HTML 和 CSS。比如当某个页面出现了一个弹窗，或者显示了一些新内容（像上文小 demo 中看到那样），这就是 DOM 在运行。</li><li><code>地理位置 API（Geolocation API）</code>获取地理信息。这就是为什么 <em>谷歌地图</em> 可以找到你的位置，而且标示在地图上。</li><li><code>画布（Canvas）</code>和 <code>WebGL</code> API 可以创建生动的 2D 和 3D 图像。</li><li>诸如 <code>HTMLMediaElement</code> 和 <code>WebRTC</code>等 影音类 API 让你可以利用多媒体做一些非常有趣的事，比如在网页中直接播放音乐和影片，或用自己的网络摄像头获取录像，然后在其他人的电脑上展示.</li></ul><h2 id="第三方-API"><a href="#第三方-API" class="headerlink" title="第三方 API"></a>第三方 API</h2><p><strong>第三方 API</strong> 并没有默认嵌入浏览器中，一般要从网上取得它们的代码和信息。比如：</p><ul><li><a href="https://dev.twitter.com/overview/documentation">Twitter API</a>、<a href="https://open.weibo.com/">新浪微博 API</a> 可以在网站上展示最新推文之类。</li><li><a href="https://developers.google.com/maps/">谷歌地图 API</a>、<a href="https://lbs.amap.com/">高德地图 API</a> 可以在网站嵌入定制的地图等等。</li></ul><h1 id="JavaScript-在页面上做了什么"><a href="#JavaScript-在页面上做了什么" class="headerlink" title="JavaScript 在页面上做了什么"></a>JavaScript 在页面上做了什么</h1><p>浏览器在读取一个网页时，代码（HTML, CSS 和 JavaScript）将在一个运行环境（浏览器标签页）中得到执行。就像一间工厂，将原材料（代码）加工为一件产品（网页）。</p><p>在 HTML 和 CSS 集合组装成一个网页后，浏览器的 JavaScript 引擎将执行 JavaScript 代码。这保证了当 JavaScript 开始运行之前，网页的结构和样式已经就位。</p><p>这样很好，因为JavaScript 最普遍的用处是通过 DOM API 动态修改 HTML 和 CSS 来更新用户界面 （user interface）。如果 JavaScript 在 HTML 和 CSS 就位之前加载运行，就会引发错误。  </p><h2 id="浏览器安全"><a href="#浏览器安全" class="headerlink" title="浏览器安全"></a>浏览器安全</h2><p>每个浏览器标签页就是其自身用来运行代码的独立容器（这些容器用专业术语称为“运行环境”）。大多数情况下，每个标签页中的代码完全独立运行，而且一个标签页中的代码不能直接影响另一个标签页（或者另一个网站）中的代码。这是一个好的安全措施，如果不这样，黑客就可以从其他网站盗取信息，等等。  </p><h2 id="JavaScript-运行次序"><a href="#JavaScript-运行次序" class="headerlink" title="JavaScript 运行次序"></a>JavaScript 运行次序</h2><p>当浏览器执行到一段 JavaScript 代码时，通常会按从上往下的顺序执行这段代码。这意味着你需要注意代码书写的顺序。</p><h2 id="解释代码-vs-编译代码"><a href="#解释代码-vs-编译代码" class="headerlink" title="解释代码 vs 编译代码"></a>解释代码 vs 编译代码</h2><p>在解释型语言中，代码自上而下运行，且实时返回运行结果。代码在由浏览器执行前，不需要将其转化为其他形式。代码将直接以文本格式（text form）被接收和处理。相对的，编译型语言需要先将代码转化（编译）成另一种形式才能运行。比如 C&#x2F;C++ 先被编译成汇编语言，然后才能由计算机运行。程序将以二进制的格式运行，这些二进制内容是由程序源代码产生的。</p><p>JavaScript 是轻量级解释型语言。浏览器接受到JavaScript代码，并以代码自身的文本格式运行它。技术上，几乎所有 JavaScript 转换器都运用了一种叫做即时编译（just-in-time compiling）的技术；当 JavaScript 源代码被执行时，它会被编译成二进制的格式，使代码运行速度更快。尽管如此，JavaScript 仍然是一门解释型语言，因为编译过程发生在代码运行中，而非之前。  </p><h2 id="服务器端代码-vs-客户端代码"><a href="#服务器端代码-vs-客户端代码" class="headerlink" title="服务器端代码 vs 客户端代码"></a>服务器端代码 vs 客户端代码</h2><p>客户端代码是在用户的电脑上运行的代码，在浏览一个网页时，它的客户端代码就会被下载，然后由浏览器来运行并展示。这就是<strong>客户端 JavaScript</strong>。</p><p>而服务器端代码在服务器上运行，接着运行结果才由浏览器下载并展示出来。流行的服务器端 web 语言包括：PHP、Python、Ruby、ASP.NET 以及…… JavaScript！JavaScript 也可用作服务器端语言，比如现在流行的 Node.js 环境。  </p><h2 id="动态代码-vs-静态代码"><a href="#动态代码-vs-静态代码" class="headerlink" title="动态代码 vs 静态代码"></a>动态代码 vs 静态代码</h2><p>“<strong>动态</strong>”一词既适用于客户端 JavaScript，又适用于描述服务器端语言。是指通过按需生成新内容来更新 web 页面 &#x2F; 应用，使得不同环境下显示不同内容。服务器端代码会在服务器上动态生成新内容，例如从数据库中提取信息。而客户端 JavaScript 则在用户端浏览器中动态生成新内容，比如说创建一个新的 HTML 表格，用从服务器请求到的数据填充，然后在网页中向用户展示这个表格。两种情况的意义略有不同，但又有所关联，且两者（服务器端和客户端）经常协同作战。</p><p>没有动态更新内容的网页叫做“<strong>静态</strong>”页面<strong>，</strong>所显示的内容不会改变。  </p><h1 id="怎么向页面添加-JavaScript"><a href="#怎么向页面添加-JavaScript" class="headerlink" title="怎么向页面添加 JavaScript"></a>怎么向页面添加 JavaScript</h1><h2 id="内部-JavaScript"><a href="#内部-JavaScript" class="headerlink" title="内部 JavaScript"></a>内部 JavaScript</h2><p>编写到<code>script</code>标签中：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token comment">//在此编写 JavaScript 代码</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="外部-JavaScript"><a href="#外部-JavaScript" class="headerlink" title="外部 JavaScript"></a>外部 JavaScript</h2><p>将代码编写到外部的 js 文件中，然后通过<code>script</code>标签将其引入：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>文件路径<span class="token punctuation">"</span></span> <span class="token attr-name">async</span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><em>script标签一旦用于引入外部文件了，就不能在编写代码了，即使编写了浏览器也会忽略 ,如果需要则可以在创建一个新的script标签用于编写内部代码</em></p><h2 id="内联-JavaScript-处理器"><a href="#内联-JavaScript-处理器" class="headerlink" title="内联 JavaScript 处理器"></a>内联 JavaScript 处理器</h2><p>注意，有时候你会遇到在 HTML 中存在着一丝真实的 JavaScript 代码。它或许看上去像这样：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createParagraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> para <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  para<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">'你点击了这个按钮！'</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>para<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createParagraph()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我呀<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p>这样写一样可以完成想要的功能，<strong>然而请不要这样做。</strong> 这将使 JavaScript 污染到 HTML，而且效率低下。对于每个需要应用 JavaScript 的按钮，你都得手动添加 <code>onclick=&quot;createParagraph()&quot;</code> 属性。</p><p>可以使用纯 JavaScript 结构来通过一个指令选取所有按钮。下文的这段代码即实现了这一目的：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> buttons <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> buttons<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  buttons<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> createParagraph<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这样写乍看去比 <code>onclick</code> 属性要长一些，但是这样写会对页面上所有按钮生效，无论多少个，或添加或删除，完全无需修改 JavaScript 代码。  </p><h2 id="脚本调用策略"><a href="#脚本调用策略" class="headerlink" title="脚本调用策略"></a>脚本调用策略</h2><h4 id="async-和-defer"><a href="#async-和-defer" class="headerlink" title="async 和 defer"></a><code>async</code> 和 <code>defer</code></h4><p>上述的脚本阻塞问题实际有两种解决方案 —— <code>async</code> 和 <code>defer</code>。我们来依次讲解。</p><p>浏览器遇到 <code>async</code> 脚本时不会阻塞页面渲染，而是直接下载然后运行。这样脚本的运行次序就无法控制，只是脚本不会阻止剩余页面的显示。当页面的脚本之间彼此独立，且不依赖于本页面的其它任何脚本时，<code>async</code> 是最理想的选择。</p><p><strong>脚本调用策略小结</strong>：</p><ul><li>如果脚本无需等待页面解析，且无依赖独立运行，那么应使用 <code>async</code>。</li><li>如果脚本需要等待页面解析，且依赖于其它脚本，调用这些脚本时应使用 <code>defer</code>，将关联的脚本按所需顺序置于 HTML 中。</li></ul><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>就像 HTML 和 CSS，JavaScript 代码中也可以添加注释，浏览器会忽略它们，注释只是为你的同事（还有你，如果半年后再看自己写的代码你会说，这是什么垃圾玩意。）提供关于代码如何工作的指引。注释非常有用，而且应该经常使用，尤其在大型应用中。注释分为两类：</p><ul><li><p>在双斜杠后添加单行注释，比如：</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 我是一条注释</code></pre></li><li><p>在<code>/*</code>和<code>*/</code>之间添加多行注释，比如：</p><pre class="language-none"><code class="language-none">&#x2F;*  我也是  一条注释*&#x2F;</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之CSS3学习（十）flex弹性盒子布局</title>
      <link href="/posts/3425a3db/"/>
      <url>/posts/3425a3db/</url>
      
        <content type="html"><![CDATA[<h1 id="1-flex-布局是什么"><a href="#1-flex-布局是什么" class="headerlink" title="1. flex 布局是什么"></a>1. flex 布局是什么</h1><p>Flex是Flexible Box的缩写，翻译成中文就是“弹性盒子”，用来为盒装模型提供最大的灵活性。任何一个容器都可以指定为Flex布局。是一种当页面需要适应不同的屏幕大小以及设备类型时确保元素拥有恰当的行为的布局方式。</p><p>引入弹性盒布局模型的目的是提供一种更加有效的方式来对一个容器中的子元素进行排列、对齐和分配空白空间。</p><h1 id="2-基本概念"><a href="#2-基本概念" class="headerlink" title="2. 基本概念"></a>2. 基本概念</h1><h2 id="2-1-弹性盒"><a href="#2-1-弹性盒" class="headerlink" title="2.1 弹性盒"></a>2.1 弹性盒</h2><p><code>flex</code>（弹性盒、伸缩盒）</p><ul><li>是css中的又一种布局手段，它主要用来代替浮动来完成页面的布局</li><li><code>flex</code>可以使元素具有弹性，让元素可以跟随页面的大小的改变而改变</li></ul><h2 id="2-2-弹性容器"><a href="#2-2-弹性容器" class="headerlink" title="2.2 弹性容器"></a>2.2 弹性容器</h2><p>要使用弹性盒，必须先将一个元素设置为弹性容器<br>通过 <code>display</code> 来设置弹性容器</p><ul><li><code>display:flex</code> 设置为块级弹性容器</li><li><code>display:inline-flex</code> 设置为行内的弹性容器</li></ul><h2 id="2-3-弹性元素"><a href="#2-3-弹性元素" class="headerlink" title="2.3 弹性元素"></a>2.3 弹性元素</h2><ul><li>弹性容器的子元素是弹性元素（弹性项）</li><li>弹性元素可以同时是弹性容器</li></ul><h1 id="3-学习弹性盒子（代码来源自MDN）"><a href="#3-学习弹性盒子（代码来源自MDN）" class="headerlink" title="3. 学习弹性盒子（代码来源自MDN）"></a>3. 学习弹性盒子（代码来源自MDN）</h1><h2 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h2><p>代码如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Flexbox 0 — starting code<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">      <span class="token selector">html</span> <span class="token punctuation">&#123;</span>        <span class="token property">font-family</span><span class="token punctuation">:</span> sans-serif<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">body</span> <span class="token punctuation">&#123;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">header</span> <span class="token punctuation">&#123;</span>        <span class="token property">background</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">h1</span> <span class="token punctuation">&#123;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>        <span class="token property">line-height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">article</span> <span class="token punctuation">&#123;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">/* Add your flexbox CSS below here */</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Sample flexbox example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>First article<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Tacos actually microdosing, pour-over semiotics banjo chicharrones retro fanny pack portland everyday carry vinyl typewriter. Tacos PBR&amp;B pork belly, everyday carry ennui pickled sriracha normcore hashtag polaroid single-origin coffee cold-pressed. PBR&amp;B tattooed trust fund twee, leggings salvia iPhone photo booth health goth gastropub hammock.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Second article<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Tacos actually microdosing, pour-over semiotics banjo chicharrones retro fanny pack portland everyday carry vinyl typewriter. Tacos PBR&amp;B pork belly, everyday carry ennui pickled sriracha normcore hashtag polaroid single-origin coffee cold-pressed. PBR&amp;B tattooed trust fund twee, leggings salvia iPhone photo booth health goth gastropub hammock.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Third article<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Tacos actually microdosing, pour-over semiotics banjo chicharrones retro fanny pack portland everyday carry vinyl typewriter. Tacos PBR&amp;B pork belly, everyday carry ennui pickled sriracha normcore hashtag polaroid single-origin coffee cold-pressed. PBR&amp;B tattooed trust fund twee, leggings salvia iPhone photo booth health goth gastropub hammock.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Cray food truck brunch, XOXO +1 keffiyeh pickled chambray waistcoat ennui. Organic small batch paleo 8-bit. Intelligentsia umami wayfarers pickled, asymmetrical kombucha letterpress kitsch leggings cold-pressed squid chartreuse put a bird on it. Listicle pickled man bun cornhole heirloom art party.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>这个页面有一个含有顶级标题的<code>&lt;header&gt;</code>元素，和一个包含三个<code>&lt;article&gt;</code>的<code>&lt;section&gt;</code>元素，</p><p><img src="/img/Web/flex1.png" loading="lazy"></p><h2 id="指定元素的布局为-flexible"><a href="#指定元素的布局为-flexible" class="headerlink" title="指定元素的布局为 flexible"></a>指定元素的布局为 flexible</h2><p>我们需要选择将哪些元素将设置为柔性的盒子。我们需要给这些 flexible 元素的父元素 <code>display</code> 设置一个特定值。在本例中，我们想要设置<code>&lt;article&gt;</code>元素，因此我们给<code>&lt;section&gt;</code>元素设置display：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">section</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token punctuation">&#125;</span></code></pre><p>结果如下：</p><p><img src="/img/Web/flex2.png" loading="lazy"></p><h2 id="flex-模型说明"><a href="#flex-模型说明" class="headerlink" title="flex 模型说明"></a>flex 模型说明</h2><p>当元素表现为 flex 框时，它们沿着两个轴来布局：</p><p><img src="/img/Web/flex_term.png" loading="lazy"></p><ul><li><strong>主轴（main axis）</strong>是沿着 flex 元素放置的方向延伸的轴（比如页面上的横向的行、纵向的列）。该轴的开始和结束被称为 <strong>main start</strong> 和 <strong>main end</strong>。</li><li><strong>交叉轴（cross axis）</strong>是垂直于 flex 元素放置方向的轴。该轴的开始和结束被称为 <strong>cross start</strong> 和 <strong>cross end</strong>。</li><li>设置了 <code>display: flex</code> 的父元素（在本例中是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/section">&#96;&#96;</a>）被称之为 <strong>flex 容器（flex container）。</strong></li><li>在 flex 容器中表现为柔性的盒子的元素被称之为 <strong>flex 项</strong>（<strong>flex item</strong>）（本例中是<code>&lt;article&gt;</code>元素。</li></ul><h2 id="排列方式"><a href="#排列方式" class="headerlink" title="排列方式"></a>排列方式</h2><p><code>flex-direction</code> 指定容器中弹性元素的排列方式。可选值：</p><ul><li><code>row</code> 默认值，弹性元素在容器中水平排列（自左向右）</li><li><code>row-reverse</code> 弹性元素在容器中反向水平排列（自右向左）</li><li><code>column</code> 弹性元素纵向排列（自上向下）</li><li><code>column-reverse</code> 弹性元素反向纵向排列（自下向上）</li></ul><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>当你在布局中使用定宽或者定高的时候，可能会出现问题即处于容器中的 弹性盒子子元素会溢出，破坏了布局。解决此问题的一种方法是设置元素自动换行，将以下声明添加到 <code>&lt;section&gt;</code> css 规则中：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap</code></pre><p>同时，把以下规则也添加到<code>&lt;article&gt;</code>的css规则中:</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token property">flex</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span></code></pre><h2 id="flex-flow-缩写"><a href="#flex-flow-缩写" class="headerlink" title="flex-flow 缩写"></a>flex-flow 缩写</h2><p><code>flex-flow</code> 是<code>flex-direction</code>和<code>flex-wrap</code>的简写属性</p><h2 id="flex-项的动态尺寸"><a href="#flex-项的动态尺寸" class="headerlink" title="flex 项的动态尺寸"></a>flex 项的动态尺寸</h2><p>我们来看看是如何控制 flex 项占用空间的比例的。</p><p>首先，我们添加下面的规则到CSS底部：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">article</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这是一个无单位的比例值，表示每个 flex 项沿主轴的可用空间大小。我们设置<code>&lt;article&gt;</code>flex值都为1，表示每个元素占用一样的空间，占用的空间是在设置 padding 和 margin 之后剩余的空间。</p><p>现在在上一个规则下添加：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">article:nth-of-type(3)</span> <span class="token punctuation">&#123;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>会看到第三个<code>&lt;article&gt;</code>元素占用了两倍的可用宽度和剩下的一样,因为现在的比例是1:1:2。</p><h2 id="水平与垂直对齐"><a href="#水平与垂直对齐" class="headerlink" title="水平与垂直对齐"></a>水平与垂直对齐</h2><p>还可以使用弹性盒子的功能让 flex 项沿主轴或交叉轴对齐。</p><p><code>align-items</code> 控制 flex 项在交叉轴上的位置。</p><ul><li>默认的值是 <code>stretch</code>，其会使所有 flex 项沿着交叉轴的方向拉伸以填充父容器。如果父容器在交叉轴方向上没有固定宽度（即高度），则所有 flex 项将变得与最长的 flex 项一样长（即高度保持一致）。我们的第一个例子在默认情况下得到相等的高度的列的原因。</li><li>在上面规则中我们使用的 <code>center</code> 值会使这些项保持其原有的高度，但是会在交叉轴居中。这就是那些按钮垂直居中的原因。</li><li>你也可以设置诸如 <code>flex-start</code> 或 <code>flex-end</code> 这样使 flex 项在交叉轴的开始或结束处对齐所有的值。</li></ul><p><code>justify-content</code>控制 flex 项在主轴上的位置。</p><ul><li>默认值是 <code>flex-start</code>，这会使所有 flex 项都位于主轴的开始处。</li><li>你也可以用 <code>flex-end</code> 来让 flex 项到结尾处。</li><li><code>center</code> 在 <code>justify-content</code> 里也是可用的，可以让 flex 项在主轴居中。</li><li>而我们上面用到的值 <code>space-around</code> 是很有用的——它会使所有 flex 项沿着主轴均匀地分布，在任意一端都会留有一点空间。</li><li>还有一个值是 <code>space-between</code>，它和 <code>space-around</code> 非常相似，只是它不会在两端留下任何空间。</li></ul><h2 id="flex-项排序"><a href="#flex-项排序" class="headerlink" title="flex 项排序"></a>flex 项排序</h2><p>弹性盒子也有可以改变 flex 项的布局位置的功能，而不会影响到源顺序（即 dom 树里元素的顺序）。这也是传统布局方式很难做到的一点。</p><p>示例代码：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">button:first-child</span> <span class="token punctuation">&#123;</span>  <span class="token property">order</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>然后第一个button就移到了主轴末尾。</p><ul><li>所有 flex 项默认的 <code>order</code> 值是 0。</li><li>order 值大的 flex 项比 order 值小的在显示顺序中更靠后。</li><li>相同 order 值的 flex 项按源顺序显示。所以假如你有四个元素，其 order 值分别是2，1，1和0，那么它们的显示顺序就分别是第四，第二，第三，和第一。</li><li>第三个元素显示在第二个后面是因为它们的 order 值一样，且第三个元素在源顺序中排在第二个后面。</li></ul><h2 id="flex-嵌套"><a href="#flex-嵌套" class="headerlink" title="flex 嵌套"></a>flex 嵌套</h2><p>弹性盒子也能创建一些颇为复杂的布局。设置一个元素为flex项目，那么他同样成为一个 flex 容器，它的孩子(直接子节点)也表现为 flexible box 。可以去<a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/Flexbox">这里</a>跟着实例学习。</p>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS3学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之CSS3学习（九）过渡、动画、变换</title>
      <link href="/posts/2f13e15b/"/>
      <url>/posts/2f13e15b/</url>
      
        <content type="html"><![CDATA[<h1 id="1-过渡"><a href="#1-过渡" class="headerlink" title="1. 过渡"></a>1. 过渡</h1><p><strong>CSS3 过渡是元素从一种样式逐渐改变为另一种的效果。</strong></p><p>过渡效果一般由浏览器直接改变元素的CSS属性实现。</p><h2 id="1-1-属性"><a href="#1-1-属性" class="headerlink" title="1.1 属性"></a>1.1 属性</h2><ol><li><p><code>transition</code>：简写属性，用于在一个属性中设置四个过渡属性。</p><ul><li>必须指明持续时间</li><li>如果要写延迟，则两个时间中第一个是持续时间，第二个是延迟时间</li></ul></li><li><p><code>transition-property</code>：规定应用过渡的 CSS 属性的名称。</p><ul><li>多个属性间使用<code>,</code>隔开</li><li>如果所有属性都需要过渡，则使用<code>all</code>关键字（默认值）</li><li>大部分属性都支持过渡效果</li><li>注意过渡时必须是从一个<code>有效数值</code>向另外一个<code>有效数值</code>进行过渡</li></ul></li><li><p><code>transition-duration</code>：定义过渡效果花费的时间。默认是 0。</p><ul><li>时间单位：<code>s</code>和<code>ms</code></li></ul></li><li><p><code>transition-timing-function</code>： 规定过渡效果的时间曲线。默认是 “ease”。</p><ul><li><p><code>ease</code> 默认值，慢速开始，先加速后减速</p></li><li><p><code>linear</code> 匀速运动</p></li><li><p><code>ease-in</code> 加速运动</p></li><li><p><code>ease-out</code> 减速运动</p></li><li><p><code>ease-in-out</code> 先加速后减速（<a href="https://blog.csdn.net/u011143548/article/details/116756769">与ease的区别</a>）</p></li><li><p><code>cubic-bezier()</code> 指定时序函数</p></li><li><p><code>steps()</code> 分步执行过渡效果，第一个参数表示分几步，第二个参数可选：</p><ul><li><code>end</code> 在时间结束时执行过渡（默认值）</li><li><code>start</code> 在时间开始时执行过渡</li></ul></li></ul></li><li><p><code>transition-delay</code>：规定过渡效果何时开始（延迟）。默认是 0。</p></li></ol><p>注：transition中的过渡效果花费的时间和延迟时间都是以秒(s)或毫秒(ms)计。请始终设置 transition-duration 属性，否则时长为 0，就不会产生过渡效果。</p><p>先来看看一个示例：</p><p>一开始是一个100px*100px的蓝色矩形元素当鼠标浮动在元素上，经过3s 延迟（第二个3s），会开始匀速变化（linear），变化时间为3s（第一个3s）,最后宽度变为300px,背景颜色变为红色。</p><p>示例代码如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">div</span><span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> width <span class="token punctuation">,</span>background-color <span class="token punctuation">,</span>3s linear 3s<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div:hover</span><span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="1-2-与动画的区别"><a href="#1-2-与动画的区别" class="headerlink" title="1.2 与动画的区别"></a>1.2 与动画的区别</h2><p>不同于动画，虽然它们都是随着时间改变元素的属性值，但是transition（过渡）需要触发一个事件才会随着时间改变其CSS属性；animation在不需要触发任何事件的情况下，也可以显式的随时间变化来改变元素CSS属性，达到一种动画的效果</p><ul><li>动画不需要事件触发，过渡需要。</li><li>过渡只有一组（两个：开始-结束） 关键帧，动画可以设置多个。</li></ul><h1 id="2-动画"><a href="#2-动画" class="headerlink" title="2. 动画"></a>2. 动画</h1><p>通过 CSS3，我们能够创建动画，这可以在许多网页中取代动画图片、Flash 动画以及 JavaScript。动画是使元素从一种样式逐渐变化为另一种样式的效果。您可以改变任意多的样式任意多的次数。</p><h2 id="2-1-属性"><a href="#2-1-属性" class="headerlink" title="2.1 属性"></a>2.1 属性</h2><ol><li><code>animation</code>,是一个简写属性，用于设置动画属性<ul><li>必须指定动画的关键帧名称和持续时间</li><li>如果要写延迟，则两个时间中第一个是持续时间，第二个是延迟时间</li></ul></li><li><code>animation-name</code>,指定动画的关键帧名称</li><li><code>animation-duration</code>,指定动画效果的持续时间</li><li><code>animation-timing-function</code>,动画的时序函数，详细参考过渡</li><li><code>animation-iteration-count</code>,动画执行的次数,其中<code>infinite</code>是无限次</li><li><code>animation-delay</code>动画效果的延迟，等待一段时间后在执行动画</li><li><code>animation-play-state</code> 设置动画的执行状态<ul><li><code>running</code> 动画执行，默认值</li><li><code>paused</code> 动画暂停</li></ul></li><li><code>animation-fill-mode</code> 动画的填充模式<ul><li><code>none</code> 动画执行完毕，元素回到原来位置，默认值</li><li><code>forwards</code> 动画执行完毕，元素会停止在动画结束的位置</li><li><code>backwards</code> 动画延时等待时，元素就会处于开始位置</li><li><code>both</code> 结合了forwards和backwards</li></ul></li><li><code>animation-direction</code>,定义是否应该轮流反向播放动画。<ul><li><code>normal</code> 每个循环内动画向前循环，换言之，每个动画循环结束，动画重置到起点重新开始，这是默认属性。</li><li><code>alternate</code> 动画交替反向运行，反向运行时，动画按步后退，同时，带时间功能的函数也反向，比如，ease-in 在反向时成为ease-out。</li><li><code>reverse</code> 反向运行动画，每周期结束动画由尾到头运行。</li><li><code>alternate-reverse</code> 反向交替， 反向开始交替动画,第一次运行时是反向的，然后下一次是正向，后面依次循环。</li></ul></li></ol><p>这里再给一个简单的代码例子，有兴趣可以自己运行看看效果。</p><p>示例代码如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">div</span><span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>            <span class="token property">animation</span><span class="token punctuation">:</span> donghua 3s linear 1ms infinite normal<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/* div:hover&#123;                    &#125; */</span>        <span class="token atrule"><span class="token rule">@keyframes</span> donghua</span><span class="token punctuation">&#123;</span>            <span class="token selector">from</span><span class="token punctuation">&#123;</span>                <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token selector">50%</span><span class="token punctuation">&#123;</span>                <span class="token property">background</span><span class="token punctuation">:</span> brown<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token selector">to</span><span class="token punctuation">&#123;</span>                <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>                <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h1 id="3-变换"><a href="#3-变换" class="headerlink" title="3. 变换"></a>3. 变换</h1><p>通过 CSS3 变换，我们能够对元素进行移动、缩放、转动、拉长或拉伸。使用transform属性为元素应用变换。</p><p>translate(长度值或者百分比) 在水平方向上、垂直方向上平移元素。<code>transform</code>属性可以指定为关键字值<code>none</code> 或一个或多个<code>&lt;transform-function&gt;</code>值。</p><h2 id="3-1-常用的-："><a href="#3-1-常用的-：" class="headerlink" title="3.1 常用的**："></a>3.1 常用的*<transform-function>*：</h2><ol><li><p>2D平移—translate()、translateX()、translateY()</p><p>用来在平面上平移一个元素。可以使用translate(tx) 或translate(tx, ty)，第一个参数指定x轴的平移距离，第二个参数指定y轴的平移距离。如果只指定了一个参数，那么X和Y轴都采用整个值。</p></li><li><p>3D平移—translate3d()和translateZ()</p><p>用于在3D空间中移动元素的位置。</p></li><li><p>旋转—rotate()</p><ul><li><code>rotateX()</code> 沿着x轴旋转</li><li><code>rotateY()</code> 沿着y轴旋转</li><li><code>rotateZ()</code> 沿着z轴旋转</li><li><code>backface-visibility</code> 属性可以设置元素背面是否可见，可以隐藏旋转元素的背面。可选值：<ul><li><code>visible</code> 默认值，背面可见</li><li><code>hidden</code> 背面不可见</li></ul></li></ul></li><li><p>缩放—scale()，</p><p>可以用来改变元素的大小。 它可以增大或减小元素的大小。</p><ul><li><code>scaleX()</code> 水平方向缩放</li><li><code>scaleY()</code> 垂直方向缩放</li><li><code>scale()</code> 双方向的缩放</li></ul></li><li><p>拉伸—skew()</p><p>是一种用于拉伸的函数，该函数会使得在每个方向上扭曲元素上的每个点以一定角度.skew(ax) 或skew(ax, ay)。（如果觉得难以理解可以去看看这篇博客—<a href="https://www.cnblogs.com/mr-yuan/p/5899299.html">奋斗小青年的博客</a>）</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS3学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之CSS3学习（八）背景颜色渐变属性（Gradients）</title>
      <link href="/posts/524b0dcc/"/>
      <url>/posts/524b0dcc/</url>
      
        <content type="html"><![CDATA[<h1 id="1-渐变"><a href="#1-渐变" class="headerlink" title="1. 渐变"></a>1. 渐变</h1><p>通过渐变可以设置一些复杂的背景颜色，可以实现在两个或多个指定的颜色之间显示平稳的过渡的效果。渐变可以通过<code>background-image</code>来设置</p><p>CSS3 定义了两种类型的渐变（gradients）：</p><ul><li>线性渐变（Linear Gradients）- 向下&#x2F;向上&#x2F;向左&#x2F;向右&#x2F;对角方向</li><li>径向渐变（Radial Gradients）- 由它们的中心定义</li></ul><h2 id="1-1-线性渐变"><a href="#1-1-线性渐变" class="headerlink" title="1.1 线性渐变"></a>1.1 线性渐变</h2><p>为了创建一个线性渐变，你必须定义至少两种颜色结点。颜色结点就是你想要呈现平稳过渡的颜色。同时，你也可以设置一个起点和一个方向（或一个角度）。</p><p>其基本语法格式如下：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>direction<span class="token punctuation">,</span> color-stop1<span class="token punctuation">,</span> color-stop2<span class="token punctuation">,</span> ...<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="1-1-1-线性渐变的基础使用方法"><a href="#1-1-1-线性渐变的基础使用方法" class="headerlink" title="1.1.1 线性渐变的基础使用方法"></a>1.1.1 线性渐变的基础使用方法</h3><p>设置背景色从上面红色到下面蓝色的渐变；</p><p>设置背景色从左边红色到右边蓝色的渐变；</p><p>设置背景色从左上角红色到右下角蓝色的渐变；</p><p>示例代码如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.box1</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 260px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 260px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>red<span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Safari 5.1 - 6.0 */</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-o-linear-gradient</span><span class="token punctuation">(</span>red<span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Opera 11.1 - 12.0 */</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-moz-linear-gradient</span><span class="token punctuation">(</span>red<span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Firefox 3.6 - 15 */</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>red<span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 标准的语法（必须放在最后） */</span><span class="token punctuation">&#125;</span>        <span class="token selector">.box2</span><span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 260px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 260px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> red <span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Safari 5.1 - 6.0 */</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-o-linear-gradient</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> red<span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Opera 11.1 - 12.0 */</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-moz-linear-gradient</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> red<span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Firefox 3.6 - 15 */</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> red <span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 标准的语法 */</span>        <span class="token punctuation">&#125;</span><span class="token selector">.box3</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 260px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 260px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>left top<span class="token punctuation">,</span> red <span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Safari 5.1 - 6.0 */</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-o-linear-gradient</span><span class="token punctuation">(</span>bottom right<span class="token punctuation">,</span> red <span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Opera 11.1 - 12.0 */</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-moz-linear-gradient</span><span class="token punctuation">(</span>bottom right<span class="token punctuation">,</span>red <span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Firefox 3.6 - 15 */</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to bottom right<span class="token punctuation">,</span> red <span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 标准的语法 */</span><span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>下面是背景色从上面红色到下面蓝色的渐变：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>下面是背景色从左边红色到右边蓝色的渐变：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>下面是背景色从左上角红色到右下角蓝色的渐变：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="/img/Web/jianbian1.png" alt="基础渐变" loading="lazy"></p><h3 id="1-1-2-使用角度"><a href="#1-1-2-使用角度" class="headerlink" title="1.1.2 使用角度"></a>1.1.2 使用角度</h3><p>如果想要在渐变的方向上做更多的控制，可以定义一个角度，而不用预定义方向（to bottom、to top、to right、to left、to bottom right，等等）。</p><p>其基本语法格式如下：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>angle<span class="token punctuation">,</span> color-stop1<span class="token punctuation">,</span> color-stop2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>角度是指水平线和渐变线之间的角度，逆时针方向计算。换句话说，0deg 将创建一个从下到上的渐变，90deg 将创建一个从左到右的渐变。</p><p><img src="/img/Web/angle.png" alt="渐变角度" loading="lazy"></p><p>注意有一些浏览器(Chrome,Safari,fiefox等)的使用了旧的标准，即 0deg 将创建一个从左到右的渐变，90deg 将创建一个从下到上的渐变。换算公式 90 - x &#x3D; y 其中 x 为标准角度，y为非标准角度。</p><p>下面我们使用角度演示从上到下的渐变。</p><p>示例代码如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">.box</span><span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>180deg<span class="token punctuation">,</span> red <span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Safari 5.1 - 6.0 */</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-o-linear-gradient</span><span class="token punctuation">(</span>180deg<span class="token punctuation">,</span> red<span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Opera 11.1 - 12.0 */</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-moz-linear-gradient</span><span class="token punctuation">(</span>180deg<span class="token punctuation">,</span> red<span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Firefox 3.6 - 15 */</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>180deg<span class="token punctuation">,</span> red <span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 标准的语法 */</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="/img/Web/jianbian2.png" alt="角度渐变" loading="lazy"></p><h3 id="1-1-3-使用多个颜色节点"><a href="#1-1-3-使用多个颜色节点" class="headerlink" title="1.1.3 使用多个颜色节点"></a>1.1.3 使用多个颜色节点</h3><p>下面我们演示带有多个颜色节点的从上到下的渐变。</p><p>示例代码如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">.box</span><span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>#000<span class="token punctuation">,</span> #fff<span class="token punctuation">,</span> lightblue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Safari 5.1 - 6.0 */</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-o-linear-gradient</span><span class="token punctuation">(</span>#000<span class="token punctuation">,</span> #fff<span class="token punctuation">,</span> lightblue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Opera 11.1 - 12.0 */</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-moz-linear-gradient</span><span class="token punctuation">(</span>#000<span class="token punctuation">,</span> #fff<span class="token punctuation">,</span> lightblue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Firefox 3.6 - 15 */</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>#000<span class="token punctuation">,</span> #fff<span class="token punctuation">,</span> lightblue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 标准的语法 */</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="/img/Web/jianbian3.png" alt="多颜色渐变" loading="lazy"></p><h3 id="1-1-4-使用透明度"><a href="#1-1-4-使用透明度" class="headerlink" title="1.1.4 使用透明度"></a>1.1.4 使用透明度</h3><p>CSS3 渐变也支持透明度（transparent），可用于创建减弱变淡的效果。</p><p>为了添加透明度，我们使用 rgba() 函数来定义颜色结点。rgba() 函数中的最后一个参数可以是从 0 到 1 的值，它定义了颜色的透明度：0 表示完全透明，1 表示完全不透明。</p><p>下面我们来演示从左边开始的从完全透明到完全不透明的红色的线性渐变</p><p>示例代码如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">.box</span><span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span><span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Safari 5.1 - 6 */</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-o-linear-gradient</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span><span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Opera 11.1 - 12*/</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-moz-linear-gradient</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span><span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Firefox 3.6 - 15*/</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 标准的语法 */</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="/img/Web/jianbian4.png" alt="透明度渐变" loading="lazy"></p><h3 id="1-1-5-重复的线性渐变"><a href="#1-1-5-重复的线性渐变" class="headerlink" title="1.1.5 重复的线性渐变"></a>1.1.5 重复的线性渐变</h3><p>repeating-linear-gradient() 函数用于重复线性渐变：</p><p>示例代码如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">.box</span><span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-webkit-repeating-linear-gradient</span><span class="token punctuation">(</span>red<span class="token punctuation">,</span> yellow 10%<span class="token punctuation">,</span> green 20%<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Safari 5.1 - 6 */</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-o-repeating-linear-gradient</span><span class="token punctuation">(</span>red<span class="token punctuation">,</span> yellow 10%<span class="token punctuation">,</span> green 20%<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Opera 11.1 - 12*/</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-moz-repeating-linear-gradient</span><span class="token punctuation">(</span>red<span class="token punctuation">,</span> yellow 10%<span class="token punctuation">,</span> green 20%<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Firefox 3.6 - 15*/</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">repeating-linear-gradient</span><span class="token punctuation">(</span>red<span class="token punctuation">,</span> yellow 10%<span class="token punctuation">,</span> green 20%<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 标准的语法 */</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="/img/Web/jianbian5.png" alt="重复渐变" loading="lazy"></p><h2 id="1-2-径向渐变"><a href="#1-2-径向渐变" class="headerlink" title="1.2 径向渐变"></a>1.2 径向渐变</h2><p>径向渐变由它的中心定义。</p><p>为了创建一个径向渐变，你也必须至少定义两种颜色结点。颜色结点即你想要呈现平稳过渡的颜色。同时，你也可以指定渐变的中心、形状（圆形或椭圆形）、大小。默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），渐变的大小是 farthest-corner（表示到最远的角落）。</p><p><code>radial-gradient()</code> 径向渐变（放射性的效果）</p><p>其基本语法格式如下：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">radial-gradient</span><span class="token punctuation">(</span>center<span class="token punctuation">,</span> shape size<span class="token punctuation">,</span> start-color<span class="token punctuation">,</span> ...<span class="token punctuation">,</span> last-color<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>径向渐变 - 颜色结点均匀分布（默认情况下）</p><h3 id="1-2-1-颜色结点均匀分布的径向渐变"><a href="#1-2-1-颜色结点均匀分布的径向渐变" class="headerlink" title="1.2.1 颜色结点均匀分布的径向渐变"></a>1.2.1 颜色结点均匀分布的径向渐变</h3><p>示例代码：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">.box</span><span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-webkit-radial-gradient</span><span class="token punctuation">(</span>#000<span class="token punctuation">,</span> #fff<span class="token punctuation">,</span> lightblue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Safari 5.1 - 6.0 */</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-o-radial-gradient</span><span class="token punctuation">(</span>#000<span class="token punctuation">,</span> #fff<span class="token punctuation">,</span> lightblue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Opera 11.6 - 12.0 */</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-moz-radial-gradient</span><span class="token punctuation">(</span>#000<span class="token punctuation">,</span> #fff<span class="token punctuation">,</span> lightblue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Firefox 3.6 - 15 */</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">radial-gradient</span><span class="token punctuation">(</span>#000<span class="token punctuation">,</span> #fff<span class="token punctuation">,</span> lightblue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 标准的语法 */</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="/img/Web/jianbian6.png" alt="均匀分布径向渐变" loading="lazy"></p><h3 id="1-2-2-颜色结点不均匀分布的径向渐变"><a href="#1-2-2-颜色结点不均匀分布的径向渐变" class="headerlink" title="1.2.2 颜色结点不均匀分布的径向渐变"></a>1.2.2 颜色结点不均匀分布的径向渐变</h3><p>示例代码：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">.box</span><span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-webkit-radial-gradient</span><span class="token punctuation">(</span>#000 5%<span class="token punctuation">,</span> #fff 15%<span class="token punctuation">,</span> lightblue 60%<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Safari 5.1 - 6.0 */</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-o-radial-gradient</span><span class="token punctuation">(</span>#000 5%<span class="token punctuation">,</span> #fff 15%<span class="token punctuation">,</span> lightblue 60%<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Opera 11.6 - 12.0 */</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-moz-radial-gradient</span><span class="token punctuation">(</span>#000 5%<span class="token punctuation">,</span> #fff 15%<span class="token punctuation">,</span> lightblue 60%<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Firefox 3.6 - 15 */</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">radial-gradient</span><span class="token punctuation">(</span>#000 5%<span class="token punctuation">,</span> #fff 15%<span class="token punctuation">,</span> lightblue 60%<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 标准的语法 */</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="/img/Web/jianbian7.png" alt="不均匀分布径向渐变" loading="lazy"></p><h3 id="1-2-3-设置径向渐变的形状"><a href="#1-2-3-设置径向渐变的形状" class="headerlink" title="1.2.3 设置径向渐变的形状"></a>1.2.3 设置径向渐变的形状</h3><p>shape 参数定义了形状。它可以是值 circle 或 ellipse。其中，circle 表示圆形，ellipse 表示椭圆形。默认值是 ellipse。</p><p>默认情况下，径向渐变的形状根据元素的形状来计算的；正方形对应圆形的渐变，长方形对应椭圆形的渐变。</p><p>下面我们演示元素形状为长方形渐变形状为圆形的径向渐变。</p><p>示例代码：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">.box</span><span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-webkit-radial-gradient</span><span class="token punctuation">(</span>circle<span class="token punctuation">,</span> red<span class="token punctuation">,</span> yellow<span class="token punctuation">,</span> green<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Safari 5.1 - 6.0 */</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-o-radial-gradient</span><span class="token punctuation">(</span>circle<span class="token punctuation">,</span> red<span class="token punctuation">,</span> yellow<span class="token punctuation">,</span> green<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Opera 11.6 - 12.0 */</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-moz-radial-gradient</span><span class="token punctuation">(</span>circle<span class="token punctuation">,</span> red<span class="token punctuation">,</span> yellow<span class="token punctuation">,</span> green<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Firefox 3.6 - 15 */</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">radial-gradient</span><span class="token punctuation">(</span>circle<span class="token punctuation">,</span> red<span class="token punctuation">,</span> yellow<span class="token punctuation">,</span> green<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 标准的语法 */</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="/img/Web/jianbian8.png" alt="圆形径向渐变" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS3学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之CSS3学习（七）字体属性（font）的相关设置</title>
      <link href="/posts/983f7e39/"/>
      <url>/posts/983f7e39/</url>
      
        <content type="html"><![CDATA[<h1 id="1-字体相关的样式"><a href="#1-字体相关的样式" class="headerlink" title="1. 字体相关的样式"></a>1. 字体相关的样式</h1><ul><li><code>color</code>用来设置字体颜色</li><li><code>font-size</code>字体的大小</li><li><code>font-family</code>字体族（字体的格式）</li></ul><p><strong>font-family</strong></p><ul><li><code>serif</code> 衬线字体</li><li><code>sans-serif</code> 非衬线字体</li><li><code>monospace</code> 等宽字体</li><li><code>cursive</code> 手写体</li><li><code>fantasy</code> 梦幻字体</li></ul><p>上述字体不是表示具体的某种字体，而是字体的分类</p><h2 id="1-1-font-style属性"><a href="#1-1-font-style属性" class="headerlink" title="1.1 font-style属性"></a>1.1 font-style属性</h2><p>font-style属性指定文本的字体样式。 </p><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">normal</td><td align="left">默认值。浏览器显示一个标准的字体样式。</td></tr><tr><td align="left">italic</td><td align="left">浏览器会显示一个斜体的字体样式。</td></tr><tr><td align="left">oblique</td><td align="left">浏览器会显示一个倾斜的字体样式。</td></tr><tr><td align="left">inherit</td><td align="left">规定应该从父元素继承字体样式。</td></tr></tbody></table><h2 id="1-2-font-size属性"><a href="#1-2-font-size属性" class="headerlink" title="1.2 font-size属性"></a>1.2 font-size属性</h2><p>font-size 属性设置文本的大小。</p><p>能否管理文字的大小，在网页设计中是非常重要的。但是，你不能通过调整字体大小使段落看上去像标题，或者使标题看上去像段落。</p><p>请务必使用正确的HTML标签，就<code>&lt;h1&gt;</code> - <code>&lt;h6&gt;</code>表示标题和<code>&lt;p&gt;</code>表示段落：</p><p>字体大小的值可以是绝对或相对的大小。</p><p>绝对大小：</p><ul><li><p>设置一个指定大小的文本</p></li><li><p>不允许用户在所有浏览器中改变文本大小</p></li><li><p>确定了输出的物理尺寸时绝对大小很有用</p></li></ul><p>相对大小：</p><ul><li><p>相对于周围的元素来设置大小</p></li><li><p>允许用户在浏览器中改变文字大小</p></li></ul><p>默认大小和普通文本段落一样，是16像素（16px&#x3D;1em）。</p><h2 id="1-3-font-weight属性"><a href="#1-3-font-weight属性" class="headerlink" title="1.3 font-weight属性"></a>1.3 font-weight属性</h2><p>font-weight 属性设置文本的粗细 </p><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">normal</td><td align="left">默认值。定义标准的字符。</td></tr><tr><td align="left">bold</td><td align="left">定义粗体字符。</td></tr><tr><td align="left">bolder</td><td align="left">定义更粗的字符。</td></tr><tr><td align="left">lighter</td><td align="left">定义更细的字符。</td></tr><tr><td align="left">100、200、300……</td><td align="left">定义由细到粗的字符。400 等同于 normal，而 700 等同于 bold。</td></tr><tr><td align="left">inherit</td><td align="left">规定应该从父元素继承字体的粗细。</td></tr></tbody></table><h2 id="1-4-font-variant属性"><a href="#1-4-font-variant属性" class="headerlink" title="1.4 font-variant属性"></a>1.4 font-variant属性</h2><p>font-variant 属性设置小型大写字母的字体显示文本，这意味着所有的小写字母均会被转换为大写，但是所有使用小型大写字体的字母与其余文本相比，其字体尺寸更小</p><p>font-variant 属性主要用于定义小型大写字母文本</p><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">normal</td><td align="left">默认值。浏览器会显示一个标准的字体。</td></tr><tr><td align="left">small-caps</td><td align="left">浏览器会显示小型大写字母的字体。</td></tr><tr><td align="left">inherit</td><td align="left">规定应该从父元素继承 font-variant 属性的值。</td></tr></tbody></table><h2 id="1-5-font属性"><a href="#1-5-font属性" class="headerlink" title="1.5 font属性"></a>1.5 font属性</h2><p>font 简写属性在一个声明中设置所有字体属性。</p><p>可设置的属性是（按顺序）： <strong>“font-style   font-variant   font-weight   font-size&#x2F;line-height   font-family”（字体风格、字体异体、字体粗细、字体大小、字体类型）</strong></p><p>font-size和font-family的值是必需的。如果缺少了其他值，默认值将被插入，如果有默认值的话。</p><h1 id="2-font-face"><a href="#2-font-face" class="headerlink" title="2. @font-face"></a>2. @font-face</h1><p>我们除了可以使用系统自带的字体样式外，还可以在服务器端自定义字体位置<br><code>@font-face</code>可以将服务器中的字体直接提供给用户去使用。其基本语法格式如下：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 指定字体名字 */</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'myFont1'</span><span class="token punctuation">;</span>    <span class="token comment">/* 服务器中字体路径 */</span>    <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'/font/ZCOOLKuaiLe-Regular.woff'</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span>        <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'/font/ZCOOLKuaiLe-Regular.otf'</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span>        <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'/font/ZCOOLKuaiLe-Regular.ttf'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 指定字体格式，一般不写 */</span><span class="token punctuation">&#125;</span><span class="token selector">p</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> salmon<span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> myFont1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS3学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之CSS3学习（六）背景属性（background）的相关设置</title>
      <link href="/posts/8ba3f3e3/"/>
      <url>/posts/8ba3f3e3/</url>
      
        <content type="html"><![CDATA[<h1 id="1-背景属性"><a href="#1-背景属性" class="headerlink" title="1. 背景属性"></a>1. 背景属性</h1><ul><li><code>background-color</code> 设置背景颜色</li><li><code>background-image</code>设置背景图片<ul><li>如果背景图片大小小于元素，则背景图片会自动在元素中平铺将元素铺满</li><li>如果背景图片大小大于元素，则背景图片一部分会无法完全显示</li><li>如果背景图片大小等于元素，则背景图片会直接正常显示</li></ul></li><li><code>background-repeat</code>设置背景图片的重复方式<ul><li><code>repeat</code> 默认值，背景图片沿着x轴和y轴双方向重复</li><li><code>repeat-x</code> 背景图片沿着x轴方向重复</li><li><code>repeat-y</code> 背景图片沿着y轴方向重复</li><li><code>no-repeat</code> 背景图片不重复</li></ul></li></ul><ul><li><code>background-position</code> 设置背景图片的位置<ul><li>通过<code>top</code> <code>left</code> <code>right</code> <code>bottom</code> <code>center</code>几个表示方位的词来设置背景图片的位置：使用方位词时必须要同时指定两个值，如果只写一个则第二个默认就是<code>center</code></li><li>通过偏移量来指定背景图片的位置：水平方向偏移量、垂直方向变量</li></ul></li><li><code>background-clip </code>设置背景的范围<ul><li><code>border-box</code> 默认值，背景会出现在边框的下边</li><li><code>padding-box</code> 背景不会出现在边框，只出现在内容区和内边距</li><li><code>content-box</code> 背景只会出现在内容区</li></ul></li></ul><ul><li><p><code>background-origin</code> 背景图片的偏移量计算的原点</p><ul><li><code>border-box</code> 背景图片的变量从边框处开始计算</li><li><code>padding-box</code> 默认值，background-position从内边距处开始计算</li><li><code>content-box</code> 背景图片的偏移量从内容区处计算</li></ul></li><li><p><code>background-size</code>设置背景图片的大小</p><ul><li>第一个值表示宽度，第二个值表示高度；如果只写一个，则第二个值默认是<code>auto</code></li><li><code>cover</code> 图片的比例不变，将元素铺满</li><li><code>contain</code> 图片比例不变，将图片在元素中完整显示</li></ul></li><li><p><code>background-attachment</code>背景图片是否跟随元素移动</p><ul><li><code>scroll</code> 默认值，背景图片会跟随元素移动</li><li><code>fixed</code> 背景会固定在页面中，不会随元素移动</li></ul></li></ul><p>可以同时设置背景图片和背景颜色，这样背景颜色将会成为图片的背景色</p><h2 id="1-1-background-color属性"><a href="#1-1-background-color属性" class="headerlink" title="1.1 background-color属性"></a>1.1 background-color属性</h2><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>color</em></td><td align="left">指定背景颜色。在CSS颜色值近可能的寻找一个颜色值的完整列表。</td></tr><tr><td align="left">transparent</td><td align="left">指定背景颜色应该是透明的。这是默认</td></tr><tr><td align="left">inherit</td><td align="left">指定背景颜色，应该从父元素继承</td></tr></tbody></table><h2 id="1-2-background-image属性"><a href="#1-2-background-image属性" class="headerlink" title="1.2 background-image属性"></a>1.2 background-image属性</h2><table><thead><tr><th align="left">值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">url(<em>‘URL’</em>)</td><td align="left">图像的URL</td></tr><tr><td align="left">none</td><td align="left">无图像背景会显示。这是默认</td></tr><tr><td align="left">linear-gradient()</td><td align="left">创建一个线性渐变的 “图像”(从上到下)</td></tr><tr><td align="left">radial-gradient()</td><td align="left">用径向渐变创建 “图像”。 (center to edges)</td></tr><tr><td align="left">repeating-linear-gradient()</td><td align="left">创建重复的线性渐变 “图像”。</td></tr><tr><td align="left">repeating-radial-gradient()</td><td align="left">创建重复的径向渐变 “图像”</td></tr><tr><td align="left">inherit</td><td align="left">指定背景图像应该从父元素继承</td></tr></tbody></table><h2 id="1-3-background-repeat属性"><a href="#1-3-background-repeat属性" class="headerlink" title="1.3 background-repeat属性"></a>1.3 background-repeat属性</h2><table><thead><tr><th align="left">值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">repeat</td><td align="left">背景图像将向垂直和水平方向重复。这是默认</td></tr><tr><td align="left">repeat-x</td><td align="left">只有水平位置会重复背景图像</td></tr><tr><td align="left">repeat-y</td><td align="left">只有垂直位置会重复背景图像</td></tr><tr><td align="left">no-repeat</td><td align="left">background-image不会重复</td></tr><tr><td align="left">inherit</td><td align="left">指定background-repeat属性设置应该从父元素继承</td></tr></tbody></table><h2 id="1-4-background-position属性"><a href="#1-4-background-position属性" class="headerlink" title="1.4 background-position属性"></a>1.4 background-position属性</h2><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>left top</code> <code> left center</code> <code> left bottom</code> <code>right top</code> <code>right center </code> <code>right bottom </code> <code>center top</code> <code> center center</code> <code> center bottom</code></td><td align="left">如果仅指定一个关键字，其他值将会是”center”</td></tr><tr><td align="left"><em>x% y%</em></td><td align="left">第一个值是水平位置，第二个值是垂直。左上角是0％0％。右下角是100％100％。如果仅指定了一个值，其他值将是50％。 。默认值为：0％0％</td></tr><tr><td align="left"><em>xpos ypos</em></td><td align="left">第一个值是水平位置，第二个值是垂直。左上角是0。单位可以是像素（0px0px）或任何其他 CSS单位。如果仅指定了一个值，其他值将是50％。你可以混合使用％和positions</td></tr><tr><td align="left">inherit</td><td align="left">指定background-position属性设置应该从父元素继承</td></tr></tbody></table><h2 id="1-5-background-attachment属性"><a href="#1-5-background-attachment属性" class="headerlink" title="1.5 background-attachment属性"></a>1.5 background-attachment属性</h2><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">scroll</td><td align="left">背景图片随着页面的滚动而滚动，这是默认的。</td></tr><tr><td align="left">fixed</td><td align="left">背景图片不会随着页面的滚动而滚动。</td></tr><tr><td align="left">local</td><td align="left">背景图片会随着元素内容的滚动而滚动。</td></tr><tr><td align="left">initial</td><td align="left">设置该属性的默认值。</td></tr><tr><td align="left">inherit</td><td align="left">指定 background-attachment 的设置应该从父元素继承。</td></tr></tbody></table><h1 id="2-雪碧图"><a href="#2-雪碧图" class="headerlink" title="2. 雪碧图"></a>2. 雪碧图</h1><p>雪碧图就是将很多很多的小图标放在一张图片上，就称之为雪碧图（<code>CSS-Sprite</code>）。如亚马逊的雪碧图：</p><p><img src="/img/Web/xuebi.png" alt="亚马逊雪碧图" loading="lazy"></p><h2 id="2-1-使用雪碧图的优点："><a href="#2-1-使用雪碧图的优点：" class="headerlink" title="2.1 使用雪碧图的优点："></a>2.1 <strong>使用雪碧图的优点：</strong></h2><ul><li>将多张图片合并到一张图片中，可以减小图片的总大小</li><li>将多张图片合并成一张图片后，下载全部所需的资源，只需一次请求。可以减小建立连接的消耗</li></ul><h2 id="2-2-雪碧图的使用步骤："><a href="#2-2-雪碧图的使用步骤：" class="headerlink" title="2.2 雪碧图的使用步骤："></a>2.2 <strong>雪碧图的使用步骤：</strong></h2><ol><li>先确定要使用的图标</li><li>测量图标的大小</li><li>根据测量结果创建一个元素</li><li>将雪碧图设置为元素的背景图片</li><li>设置一个偏移量以显示正确的图片</li></ol>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS3学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之HTML5学习（三）表格和表单的相关设置</title>
      <link href="/posts/f9b00109/"/>
      <url>/posts/f9b00109/</url>
      
        <content type="html"><![CDATA[<h1 id="1-表格"><a href="#1-表格" class="headerlink" title="1. 表格"></a>1. 表格</h1><h2 id="1-1-表格的相关标签"><a href="#1-1-表格的相关标签" class="headerlink" title="1.1 表格的相关标签"></a>1.1 表格的相关标签</h2><p>①表格由 <code>&lt;table&gt; </code>标签来定义。</p><p>②每个表格均有若干行（由 <code>&lt;tr&gt; </code>标签定义），每行被分割为若干单元格（由 <code>&lt;td&gt;</code> 标签定义）。字母 td 指表格数据（table data），即数据单元格的内容。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。</p><p>③边框属性通过 <code>&lt;table&gt; </code>标签中的 border 属性进行设置，其中，border&#x3D;”0”表示无边框，border&#x3D;”1”默认就是带边框。如果不定义边框属性，表格将不显示边框。有时这很有用，但是大多数时候，我们希望显示边框。</p><p>④表格的表头使用 <code>&lt;th&gt;</code> 标签进行定义。大多数浏览器会把表头显示为粗体居中的文本。</p><p>⑤表格的标题使用 <code>&lt;caption&gt;</code> 标签进行定义。</p><p>⑥单元格边距通过<code> &lt;table&gt;</code> 标签中的 cellpadding 属性进行设置，其中，cellpadding&#x3D;”0”表示无边距，cellpadding&#x3D;”10”就是带上了单元格边距。</p><p>⑦单元格间距通过 <code>&lt;table&gt;</code> 标签中的 cellspacing 属性进行设置，其中，cellspacing&#x3D;”0”表示无间距，cellspacing&#x3D;”10”就是带上了单元格间距。</p><h2 id="1-2-长表格"><a href="#1-2-长表格" class="headerlink" title="1.2 长表格"></a>1.2 长表格</h2><p>可以将一个表格分成三个部分：</p><ul><li>头部 <code>thead</code></li><li>主体 <code>tbody</code></li><li>底部 <code>tfoot</code></li></ul><p>示例：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>日期<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>新增确诊病例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>新增无症状感染者<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>合计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2022.3.15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>60<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>40<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2022.3.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2022.3.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tfoot</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>合计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>130<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tfoot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><table>    <thead>        <tr>            <td>日期</td>            <td>新增确诊病例</td>            <td>新增无症状感染者</td>            <td>合计</td>        </tr>    </thead>    <tbody>        <tr>            <td>2022.3.15</td>            <td>60</td>            <td>40</td>            <td>100</td>        </tr>        <tr>            <td>2022.3.16</td>            <td>20</td>            <td>10</td>            <td>30</td>        </tr>        <tr>            <td>2022.3.17</td>            <td>0</td>            <td>0</td>            <td>0</td>        </tr>    </tbody>    <tfoot>        <tr>            <td></td>            <td></td>            <td>合计</td>            <td>130</td>        </tr>    </tfoot></table><h1 id="2-表单"><a href="#2-表单" class="headerlink" title="2. 表单"></a>2. 表单</h1><h2 id="2-1-表单标签"><a href="#2-1-表单标签" class="headerlink" title="2.1 表单标签"></a>2.1 表单标签</h2><p>表单主要用于收集网页上浏览者的相关信息，其标签为：<code>&lt;form&gt;</code>…<code>&lt;/form&gt;</code>，其基本语法格式如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mime<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>action中的内容指定处理提交表单的格式，它可以是一个URL地址或者一个电子邮件地址。method中的内容指明提交表单的HTTP方法。enctype中的内容指明用来把表单提交给服务器时的互联网媒体形式。</p><p>数据要提交到服务器中，必须要为元素指定一个<code>name</code>属性值，自定义。</p><p><code>value</code> 为按钮上显示的文字</p><p>简单示例：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>下面是用户登录信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>用户名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>用户密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><!DOCTYPE html><html lang="en">    <head>        <meta charset="utf-8">        <title>HTML简单学习</title>    </head><body>    <form>        下面是用户登录信息        <br/>        用户名称        <input type="text" name="user"/>        <br/>        用户密码        <input type="password" name="password"/>        <br/>        <input type="submit" value="登录"/>    </form></body></html><h2 id="2-2-文字字段"><a href="#2-2-文字字段" class="headerlink" title="2.2 文字字段"></a>2.2 文字字段</h2><h3 id="2-2-1-单行文本输入框（text）"><a href="#2-2-1-单行文本输入框（text）" class="headerlink" title="2.2.1 单行文本输入框（text）"></a>2.2.1 单行文本输入框（text）</h3><p>文本框是一种让访问者自己输入内容的表单对象，通常用来填写单个字或者简单的回答，代码格式如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>其中，type&#x3D;”text”定义单行文本输入框。</p><p>name属性定义文本框的名称，要保证数据的准确采集，必须定义一个独一无二的名称。</p><p>size属性定义文本框的宽度，单位是单个字符宽度。</p><p>maxlength属性定义最多输入的字符数。</p><h3 id="2-2-2-多行文本输入框（textarea）"><a href="#2-2-2-多行文本输入框（textarea）" class="headerlink" title="2.2.2 多行文本输入框（textarea）"></a>2.2.2 多行文本输入框（textarea）</h3><p>多行文本输入框主要用于输入较长的文本信息，代码格式如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">wrap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span></code></pre><p>其中，name属性定义多行文本框的名称，要保证数据的准确采集，必须定义一个独一无二的名称。</p><p>cols属性定义多行文本框的宽度；rows属性定义多行文本框的高度。</p><p>wrap属性定义输入内容大于文本域时的显示方式。</p><h3 id="2-2-3-密码域（password）"><a href="#2-2-3-密码域（password）" class="headerlink" title="2.2.3 密码域（password）"></a>2.2.3 密码域（password）</h3><p>密码输入是一种特殊的文本域，主要用于输入一些保密信息。当网页浏览者输入文本时，显示的是黑点或者其他符号，这样就增加了输入文本的安全性。代码格式如下</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>其中，type&#x3D;”password”定义密码框。name属性定义密码框的名称，要保证唯一性。</p><p>size属性定义密码框的宽度。maxlength属性定义最多输入的密码字符数。</p><h3 id="2-2-4-单选按钮（radio）"><a href="#2-2-4-单选按钮（radio）" class="headerlink" title="2.2.4 单选按钮（radio）"></a>2.2.4 单选按钮（radio）</h3><p>单选按钮主要是让网页浏览者在一组选项里选择一个。代码格式如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>其中，type&#x3D;”radio”定义单选按钮。</p><p>name属性定义单选按钮的名称，单选按钮都是以组为单位使用的，在同一组中的单选选项都必须使用同一个名称。</p><p>value属性定义单选按钮的名称，在同一组中，它们的值必须是不同的。</p><h3 id="2-2-5-复选框（checkbox）"><a href="#2-2-5-复选框（checkbox）" class="headerlink" title="2.2.5 复选框（checkbox）"></a>2.2.5 复选框（checkbox）</h3><p>复选框主要是让网页浏览者在一组选项里同时选择多个选项（也即多选框），每个复选框都是一个独立的元素，都必须有一个唯一的名称。代码格式如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>其中，type&#x3D;”checkbox”定义复选框。</p><p>name属性定义复选框的名称，在同一组中的复选框都必须用同一个名称。</p><p>value属性定义复选框的值。</p><h3 id="2-2-6-下拉菜单"><a href="#2-2-6-下拉菜单" class="headerlink" title="2.2.6 下拉菜单"></a>2.2.6 下拉菜单</h3><p>使用 select + option 可以创建单选或多选下拉菜单。具体实例如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>列表1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>列表2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>列表3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>列表4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><select>    <option>列表1</option>    <option>列表2</option>    <option>列表3</option>    <option>列表4</option></select><h3 id="2-2-7-列表框"><a href="#2-2-7-列表框" class="headerlink" title="2.2.7 列表框"></a>2.2.7 列表框</h3><p>列表框主要用于在有限的空间里设置多个选项，即可用作单选，也可用作多选。代码格式如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">selected</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>其中，size属性定义下拉选择框的行数。name属性定义下拉选择框的名称。</p><p>multiple属性表示可以多选，如果不设置本属性，那么只能单选。</p><p>value属性定义选择项的值。selected属性表示默认已经选择本选项。具体实例如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>    请选择您感兴趣的电影类型：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>movie<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Book1<span class="token punctuation">"</span></span> <span class="token attr-name">selected</span><span class="token punctuation">></span></span>浪漫喜剧<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Book2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>恐怖片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Book3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>科幻片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Book4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>动话片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Book5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>黑帮片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><form>    请选择您感兴趣的电影类型：<br/>    <select name="movie" size="3" multiple>        <option value="Book1" selected>浪漫喜剧</option>        <option value="Book2">恐怖片</option>        <option value="Book3">科幻片</option>        <option value="Book4">动话片</option>        <option value="Book5">黑帮片</option>    </select></form><h3 id="2-2-8-普通按钮（button）"><a href="#2-2-8-普通按钮（button）" class="headerlink" title="2.2.8 普通按钮（button）"></a>2.2.8 普通按钮（button）</h3><p>普通按钮用来控制其他定义了处理脚本的处理工作。代码格式如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>其中，type&#x3D;”button”定义普通按钮。name属性定义普通按钮的名称。value属性定义按钮的显示文字。</p><p>onclick属性表示单击行为，也可以是其他的事件，通过指定脚本函数来定义按钮的行为。</p><p>具体实例如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>    点击下面的按钮，把文本框1中的内容复制到文本框2中：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    文本框1：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>学习HTML的技巧<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    文本框2：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>点击我<span class="token punctuation">"</span></span><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>document.getElementById(<span class="token punctuation">'</span>field2<span class="token punctuation">'</span>).value=document.getElementById(<span class="token punctuation">'</span>field1<span class="token punctuation">'</span>).value<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><form>    点击下面的按钮，把文本框1中的内容复制到文本框2中：<br/>    文本框1：<input type="text" id="field1" value="学习HTML的技巧"/><br/>    文本框2：<input type="text" id="field2"/><br/>    <input type="button" name="..." value="点击我"onclick="document.getElementById('field2').value=document.getElementById('field1').value"/></form><h3 id="2-2-9-提交按钮（submit）"><a href="#2-2-9-提交按钮（submit）" class="headerlink" title="2.2.9 提交按钮（submit）"></a>2.2.9 提交按钮（submit）</h3><p>提交按钮用来将输入的信息提交到服务器。代码格式如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>其中，type&#x3D;”submit”定义提交按钮。name属性定义提交按钮的名称。</p><p>value属性定义按钮的显示文字。通过提交按钮可以将表单里的信息提交给表单里action所指向的文件。</p><p>具体实例如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://jayfan.icu<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    请输入你的姓名：    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    请输入你的电话：    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>telephone<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    请输入你的身份证号：    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IDCard<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><form action="https://jayfan.icu" method="get">    请输入你的姓名：    <input type="text" name="name"/><br/>    请输入你的电话：    <input type="text" name="telephone"/><br/>    请输入你的身份证号：    <input type="text" name="IDCard"/><br/>    <input type="submit" value="提交"/></form><p>在以上三个文本框中输入相应的内容，之后点击“提交”按钮，即可实现将表单中的数据发送到这个博客网站。</p><h3 id="2-2-10-重置按钮（reset）"><a href="#2-2-10-重置按钮（reset）" class="headerlink" title="2.2.10 重置按钮（reset）"></a>2.2.10 重置按钮（reset）</h3><p>重置按钮用来重置表单中输入的信息。代码格式如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>其中，type&#x3D;”reset”定义重置按钮。name属性定义重置按钮的名称。value属性定义按钮的显示文字。</p><p>具体实例如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>    请输入用户名称：    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    请输入用户密码：    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>重置<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><form>    请输入用户名称：    <input type="text" name="name"/><br/>    请输入用户密码：    <input type="password" name="password"/><br/>    <input type="submit" value="登录"/>    <input type="reset" value="重置"/></form><p>在两个文本框中输入相应的内容，点击“重置”按钮即可清空两个文本框中的所有内容。</p>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之HTML5学习（二）列表（无序列表、有序列表、嵌套列表、自定义列表）及列表项的相关标签设置</title>
      <link href="/posts/5833b0a5/"/>
      <url>/posts/5833b0a5/</url>
      
        <content type="html"><![CDATA[<h1 id="1-无序列表的设置"><a href="#1-无序列表的设置" class="headerlink" title="1. 无序列表的设置"></a>1. 无序列表的设置</h1><p>无序列表使用 <code>&lt;ul&gt;</code>…<code>&lt;/ul&gt;</code> 标签设置，其中每一个列表项使用 <code>&lt;li&gt;</code>…<code>&lt;/li&gt;</code> 标签设置。</p><p>示例：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>网站建设流程<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>项目需求<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>系统分析<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>网站的定位<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>内容收集<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>栏目规划<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>网站目录结构设计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>网站标志设计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>网站风格设计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>网站导航系统设计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>伪网页草图<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>制作网页草图<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>将草图转换为网页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>站点建设<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>网页布局<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>网站测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>站点的发布与站点管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><!DOCTYPE html><html lang="en">    <head>        <meta charset="utf-8">    </head>    <body>        <h1>网站建设流程</h1>        <ul>            <li>项目需求</li>            <li>系统分析                <ul>                    <li>网站的定位</li>                    <li>内容收集</li>                    <li>栏目规划</li>                    <li>网站目录结构设计</li>                    <li>网站标志设计</li>                    <li>网站风格设计</li>                    <li>网站导航系统设计</li>                </ul>            </li>            <li>伪网页草图                <ul>                    <li>制作网页草图</li>                    <li>将草图转换为网页</li>                </ul>            </li>            <li>站点建设</li>            <li>网页布局</li>            <li>网站测试</li>            <li>站点的发布与站点管理</li>        </ul>    </body></html><h1 id="2-建立不同类型的无序列表"><a href="#2-建立不同类型的无序列表" class="headerlink" title="2. 建立不同类型的无序列表"></a>2. 建立不同类型的无序列表</h1><p>通过使用多个 <code>&lt;ul type=&quot;...&quot;&gt;</code>…<code>&lt;/ul&gt;</code> 标签，可以建立不同类型的无序列表。 </p><p>示例：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>disc列表：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>disc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>苹果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>香蕉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>柠檬<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>桔子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>circle列表：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>circle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>苹果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>香蕉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>柠檬<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>桔子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>square列表：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>square<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>苹果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>香蕉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>柠檬<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>桔子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><!DOCTYPE html><html lang="en">    <head>        <meta charset="utf-8">    </head>    <body>        <h4>disc列表：</h4>        <ul  type="disc">            <li>苹果</li>            <li>香蕉</li>            <li>柠檬</li>            <li>桔子</li>        </ul>        <hr/>        <h4>circle列表：</h4>        <ul type="circle">            <li>苹果</li>            <li>香蕉</li>            <li>柠檬</li>            <li>桔子</li>        </ul>        <hr/>        <h4>square列表：</h4>        <ul type="square">            <li>苹果</li>            <li>香蕉</li>            <li>柠檬</li>            <li>桔子</li>        </ul>    </body></html><h1 id="3-有序列表的设置"><a href="#3-有序列表的设置" class="headerlink" title="3.有序列表的设置"></a>3.有序列表的设置</h1><p>有序列表使用 <code>&lt;ol&gt;</code>…<code>&lt;/ol&gt;</code> 标签设置，其中每一个列表项使用 <code>&lt;li&gt;</code>…<code>&lt;/li&gt;</code> 标签设置。</p><p>也可以通过使用多个 <code>&lt;ol type=&quot;...&quot;&gt;</code>…<code>&lt;/ol&gt;</code> 标签，可以建立不同类型的有序列表。 </p><p>示例：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>HTML5列表学习<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>网页的相关概念<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>网页与HTML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Web标准（结构、表现、行为）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>网页设计与开发的过程<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>与设计相关的技术因素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>HTML简介<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><!DOCTYPE html><html lang="en">    <head>        <meta charset="utf-8">    </head>    <body>        <h1>HTML5列表学习</h1>        <ol>            <li>网页的相关概念</li>            <li>网页与HTML</li>            <li>Web标准（结构、表现、行为）</li>            <li>网页设计与开发的过程</li>            <li>与设计相关的技术因素</li>            <li>HTML简介</li>        </ol>    </body></html><h1 id="4-自定义列表的设置"><a href="#4-自定义列表的设置" class="headerlink" title="4. 自定义列表的设置"></a>4. 自定义列表的设置</h1><p>自定义列表通过使用<code> &lt;dl&gt;</code>…<code>&lt;/dl&gt;</code> 、<code>&lt;dt&gt;</code>…<code>&lt;/dt&gt;</code>、<code>&lt;dd&gt;...&lt;/dd&gt;</code> 标签进行设置。</p><p>示例：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>一个自定义列表：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>电脑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>是一种能够按照程序运行的电子设备！！！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>显示器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>以视觉方式显示信息的装置！！！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="/img/Web/zidingyi.png" alt="自定义列表" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之CSS3学习（五）浮动属性（float）的相关设置以及高度塌陷与BFC</title>
      <link href="/posts/eea05491/"/>
      <url>/posts/eea05491/</url>
      
        <content type="html"><![CDATA[<h1 id="1-CSS-浮动"><a href="#1-CSS-浮动" class="headerlink" title="1. CSS 浮动"></a>1. CSS 浮动</h1><p>CSS的<strong>浮动</strong>（float）定义元素在哪个方向浮动，且周围的元素也会重新排列。这个属性往往应用于图像，使文本围绕在图像周围，不过在 CSS 中，任何元素都可以浮动，所以在布局时一样很有用。</p><h2 id="1-1-float属性"><a href="#1-1-float属性" class="headerlink" title="1.1 float属性"></a>1.1 float属性</h2><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">left</td><td align="left">元素向左浮动。</td></tr><tr><td align="left">right</td><td align="left">元素向右浮动。</td></tr><tr><td align="left">none</td><td align="left">默认值。元素不浮动，并会显示在其在文本中出现的位置。</td></tr><tr><td align="left">inherit</td><td align="left">规定应该从父元素继承 float 属性的值。</td></tr></tbody></table><h2 id="1-2-浮动的性质"><a href="#1-2-浮动的性质" class="headerlink" title="1.2 浮动的性质"></a>1.2 浮动的性质</h2><ul><li>性质1：浮动的元素脱离标准文档流，所有标签，浮动之后，就不区分行内、块级了。</li><li>性质2：浮动的元素互相贴靠。</li><li>性质3：浮动的元素不会挡住文字，会形成“字围”效果。</li><li>性质4：如果没有设置width，会自动收缩为内容的宽度。</li></ul><p>想对浮动性质有详细的了解，可以去阅读这位博主的博客<a href="https://www.cnblogs.com/qianguyihao/p/7297736.html">link1</a></p><h1 id="2-高度塌陷"><a href="#2-高度塌陷" class="headerlink" title="2. 高度塌陷"></a>2. 高度塌陷</h1><p>在文档流中，父元素的高度默认是被子元素撑开的，子元素多高，父元素就多高。但是当为子元素设置浮动以后，子元素会完全脱离文档流，此时就会导致子元素无法撑起父元素的高度，由此引发父元素的高度塌陷。如果此时下面有其他元素，一旦你的父元素的高度塌陷，那么下面的元素必然会往上拱，这样会使你的页面布局非常混乱。</p><h2 id="2-1-解决方法"><a href="#2-1-解决方法" class="headerlink" title="2.1 解决方法"></a>2.1 解决方法</h2><ul><li><p>直接给父元素加高度（不推荐）</p><ul><li>优点：代码简单，容易理解</li><li>缺点：自适应性不强</li></ul></li><li><p>利用clear:both;声明（不推荐）</p><ul><li>原理：clear:both清除span两边的浮动，让父级div能自动获取到高度</li><li>优点：简单，代码少，所有主流浏览器都支持clear属性</li><li>缺点：不易理解，添加空白元素造成代码冗余</li></ul></li><li><p>利用BFC特性（推荐）</p></li></ul><h1 id="3-BFC"><a href="#3-BFC" class="headerlink" title="3. BFC"></a>3. BFC</h1><p>BFC（Block Formatting Context）块级格式化环境</p><ul><li>BFC是一个CSS中的一个隐含的属性，可以为一个元素开启BFC</li><li>开启BFC该元素会变成一个独立的布局区域</li></ul><p>元素触发BFC的条件</p><ul><li><p>html标签为BFC</p></li><li><p>float属性值不为none</p></li><li><p>overflow属性值不为visible</p><p>既没有覆盖元素，也保持了独占一方的特性（保持了宽度），与下方元素也保持了最初的间隙<br>常用的方式为元素设置overflow:hidden（overflow:auto也是ok的） 开启其BFC， 以使其可以包含浮动元素<br>overflow:scroll 会有滚动条，可能并不需要的，所以不太推荐</p></li><li><p>display属性值为inline-block、table-cell、table-caption、flex、inline-flex其中之一</p></li><li><p>position属性值为absolute或fixed</p></li></ul><p>开启BFC后元素的特点：</p><ul><li>不会被浮动元素覆盖</li><li>父子元素外边距不会重叠</li><li>可以包含浮动的元素</li></ul><h1 id="4-clear"><a href="#4-clear" class="headerlink" title="4. clear"></a>4. clear</h1><p><code>clear</code> 属性规定元素的哪一侧不允许其他浮动元素。</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>在左侧不允许浮动元素。</td></tr><tr><td>right</td><td>在右侧不允许浮动元素。</td></tr><tr><td>both</td><td>在左右两侧均不允许浮动元素。</td></tr><tr><td>none</td><td>默认值。允许浮动元素出现在两侧。</td></tr><tr><td>inherit</td><td>规定应该从父元素继承 clear 属性的值。</td></tr></tbody></table><h1 id="5-clearfix"><a href="#5-clearfix" class="headerlink" title="5. clearfix"></a>5. clearfix</h1><p>总所周知的万能清除法:</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.clearfix::after</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>  <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这个方法的原理是什么呢？</p><ol><li>首先<code>::after</code>是元素的伪元素，在元素后面生成伪元素</li><li><code>content </code>是伪元素的内容，为空，只是让伪元素不显示，显然不是原理</li><li><code>height:0 </code>是为了让伪元素高度为0 ，显然不是</li><li><code>visibility:hidden</code> 是为了伪元素浏览器渲染但不显示，显然也不是</li><li><code>display: block </code>只是为了让伪元素成为块级元素，成为触发 <code>clear:both</code> 的条件，有点关</li><li><code>clear:both</code> 规定在左右两侧不允许出现浮动元素， 这便是清除浮动的原理了</li></ol><p>想详细了解可以参考这位博主的博客<a href="https://www.cnblogs.com/SuperBrother/p/12836340.html">link2</a></p>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS3学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之CSS3学习（四）定位（position）的相关设置</title>
      <link href="/posts/d249bed2/"/>
      <url>/posts/d249bed2/</url>
      
        <content type="html"><![CDATA[<h1 id="1-CSS定位属性（position）"><a href="#1-CSS定位属性（position）" class="headerlink" title="1. CSS定位属性（position）"></a>1. CSS定位属性（position）</h1><p>position 属性指定了元素的定位类型。</p><p>position 属性的五个值：</p><ul><li>static</li><li>relative</li><li>fixed</li><li>absolute</li><li>sticky</li></ul><p>元素可以使用的顶部，底部，左侧和右侧属性定位。然而，这些属性无法工作，除非是先设定position属性。他们也有不同的工作方式，这取决于定位方法。</p><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">absolute</td><td align="left">生成<em>绝对定位</em>的元素，相对于 static 定位以外的第一个父元素进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。</td></tr><tr><td align="left">fixed</td><td align="left">生成固定定位的元素，相对于浏览器窗口进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。</td></tr><tr><td align="left">relative</td><td align="left">生成相对定位的元素，相对于其正常位置进行定位。因此，”left:20” 会向元素的 LEFT 位置添加 20 像素。</td></tr><tr><td align="left">static</td><td align="left">默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。</td></tr><tr><td align="left">sticky</td><td align="left">粘性定位，该定位基于用户滚动的位置。它的行为就像 position:relative ; 而当页面滚动超出目标区域时，它的表现就像 position:fixed ;，它会固定在目标位置。         <strong>注意:</strong> Internet Explorer, Edge 15 及更早 IE 版本不支持 sticky 定位。</td></tr><tr><td align="left">inherit</td><td align="left">规定应该从父元素继承 position 属性的值。</td></tr><tr><td align="left">initial</td><td align="left">设置该属性为默认值。</td></tr></tbody></table><h1 id="2-部分值的展示效果"><a href="#2-部分值的展示效果" class="headerlink" title="2. 部分值的展示效果"></a>2. 部分值的展示效果</h1><h2 id="2-1-static-定位"><a href="#2-1-static-定位" class="headerlink" title="2.1 static 定位"></a>2.1 static 定位</h2><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">div.static</span> <span class="token punctuation">&#123;</span><span class="token property">position</span><span class="token punctuation">:</span> static<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 2px solid red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>position: static;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>static定位;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="/img/Web/static.png" loading="lazy"></p><h2 id="2-2-fixed-定位"><a href="#2-2-fixed-定位" class="headerlink" title="2.2 fixed 定位"></a>2.2 fixed 定位</h2><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">p.fixed</span> <span class="token punctuation">&#123;</span><span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span><span class="token property">right</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 2px solid red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fixed<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>fixed定位的段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>普通段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>普通段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>普通段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>普通段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>普通段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>普通段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="/img/Web/fixed.png" loading="lazy"></p><h2 id="2-3-relative-定位"><a href="#2-3-relative-定位" class="headerlink" title="2.3 relative 定位"></a>2.3 relative 定位</h2><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">h2.relative-left</span> <span class="token punctuation">&#123;</span><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> -20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h2.relative-right</span> <span class="token punctuation">&#123;</span><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h2.relative-top</span> <span class="token punctuation">&#123;</span><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> -30px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>正常位置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>relative-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>偏左移动<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>relative-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>偏右移动<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>relative-top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>偏上移动<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span> relative 定位会按照元素的原始位置对该元素进行移动。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>注意:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span> 即使 relative 定位元素的内容是移动,预留空间的元素仍保存在正常流动。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="/img/Web/relative.png" loading="lazy"></p><h2 id="2-4-absolute-定位"><a href="#2-4-absolute-定位" class="headerlink" title="2.4 absolute 定位"></a>2.4 absolute 定位</h2><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">h2</span> <span class="token punctuation">&#123;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>这是一个绝对定位的标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>用绝对定位,一个元素可以放在页面上的任何位置,标题下面放置距离左边的页面150px和距离页面的顶部200px的元素。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="/img/Web/absolute.png" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS3学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之CSS3学习（三）盒模型-水平方向与垂直方向布局</title>
      <link href="/posts/3b04502/"/>
      <url>/posts/3b04502/</url>
      
        <content type="html"><![CDATA[<h1 id="1-水平方向布局"><a href="#1-水平方向布局" class="headerlink" title="1.水平方向布局"></a>1.水平方向布局</h1><p>一个元素在其父元素中，水平布局必须要满足以下的等式<br>margin-left + border-left + padding-left + width + padding-right + border-right + margin-right </p><p>&#x3D; 其父元素的宽度<br>以上等式必须满足，如果相加结果使等式不成立，则称为<em>过渡约束</em></p><p>在过渡约束的情况下等式会自动进行调整：</p><ul><li>如果这七个值中没有<code>auto</code>的情况，则浏览器会自动调整<code>margin-right</code>值以使等式满足</li><li>如果这七个值中有<code>auto</code>的情况，则会自动调整<code>auto</code>值以使等式成立<ul><li>这七个值中有三个值可以设置为<code>auto</code>：<code>width</code>、<code>margin-left</code>、<code>maring-right</code></li><li>如果只有一个值为<code>auto</code>，则会自动调整<code>auto</code>的那个值以使等式成立</li><li>如果有多个<code>auto</code>且宽度为<code>auto</code>，优先调整宽度到最大，其他<code>auto</code>的外边距会自动设置为0</li><li>如果外边距都为<code>auto</code>，则auto的外边距会自动均分以使等式成立</li></ul></li></ul><h2 id="1-1-元素居中对齐的技巧"><a href="#1-1-元素居中对齐的技巧" class="headerlink" title="1.1 元素居中对齐的技巧"></a>1.1 元素居中对齐的技巧</h2><p>要水平居中对齐一个元素(如 <code>&lt;div&gt;</code>), 可以使用<code>margin</code>: auto;。</p><p>设置到元素的宽度将防止它溢出到容器的边缘。</p><p>元素通过指定宽度，并将两边的空外边距平均分配。<strong>注意:</strong> 如果没有设置 width 属性(或者设置 100%)，居中对齐将不起作用。</p><h1 id="2-垂直方向布局"><a href="#2-垂直方向布局" class="headerlink" title="2.垂直方向布局"></a>2.垂直方向布局</h1><h2 id="2-1-元素溢出"><a href="#2-1-元素溢出" class="headerlink" title="2.1 元素溢出"></a>2.1 元素溢出</h2><p>子元素是在父元素的内容区中排列的，如果子元素的大小超过了父元素，则子元素会从父元素中溢出</p><p>可以使用<code>overflow</code>&#x2F;<code>overflow-x</code>&#x2F;<code>overflow-y</code>属性来设置父元素如何处理溢出的子元素</p><p>有关<strong>overflow</strong>的相关内容可以参考这篇博文：(CSS3元素的display、visibility与overflow属性的相关设置)[<a href="https://jayfan.icu/2022/03/15/Web%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8BHTML5+CSS3%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/#2-CSS%E5%85%83%E7%B4%A0%E7%9A%84%E6%BA%A2%E5%87%BA%EF%BC%88overflow%EF%BC%89]">https://jayfan.icu/2022/03/15/Web%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8BHTML5+CSS3%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/#2-CSS%E5%85%83%E7%B4%A0%E7%9A%84%E6%BA%A2%E5%87%BA%EF%BC%88overflow%EF%BC%89]</a></p><h2 id="2-2-边距折叠"><a href="#2-2-边距折叠" class="headerlink" title="2.2 边距折叠"></a>2.2 边距折叠</h2><p>垂直外边距的重叠（折叠）：相邻的垂直方向外边距会发生重叠现象</p><p>兄弟元素间的相邻，垂直外边距会取两者之间的较大值（两者都是正值）</p><ul><li><p>如果相邻的外边距一正一负，则取两者的和</p></li><li><p>如果相邻的外边距都是负值，则取两者中绝对值较大的</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS3学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之CSS3学习（二）display、visibility与overflow属性的相关设置</title>
      <link href="/posts/45d9178c/"/>
      <url>/posts/45d9178c/</url>
      
        <content type="html"><![CDATA[<h1 id="1-CSS元素的显示（display）、可见性（visibility）"><a href="#1-CSS元素的显示（display）、可见性（visibility）" class="headerlink" title="1.CSS元素的显示（display）、可见性（visibility）"></a>1.CSS元素的显示（display）、可见性（visibility）</h1><p>display属性设置一个元素应如何显示，visibility属性指定一个元素应可见还是隐藏。</p><h2 id="1-1-隐藏元素：display-none与visibility-hidden"><a href="#1-1-隐藏元素：display-none与visibility-hidden" class="headerlink" title="1.1 隐藏元素：display:none与visibility:hidden"></a>1.1 隐藏元素：display:none与visibility:hidden</h2><p>隐藏一个元素可以通过把display属性设置为”none”，或把visibility属性设置为”hidden”。但是请注意，这两种方法会产生不同的结果。</p><ul><li>visibility:hidden可以隐藏某个元素，但隐藏的元素仍需占用与未隐藏之前一样的空间。也就是说，该元素虽然被隐藏了，但仍然会影响布局。</li><li>display:none可以隐藏某个元素，且隐藏的元素不会占用任何空间。也就是说，该元素不但被隐藏了，而且该元素原本占用的空间也会从页面布局中消失。</li></ul><p>示例1:</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">h1.hidden</span> <span class="token punctuation">&#123;</span><span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>可见标题，下面有隐藏标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>隐藏标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>注意，该实例中的隐藏标题仍然占用空间。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="/img/Web/Vexample.png" loading="lazy"></p><p>示例2:</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">h1.hidden</span> <span class="token punctuation">&#123;</span><span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>可见标题，下面有隐藏标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>隐藏标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>注意，该实例中的隐藏标题不占用空间。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="/img/Web/Dexample.png" loading="lazy"></p><h2 id="1-2-更改块元素和行内元素的显示"><a href="#1-2-更改块元素和行内元素的显示" class="headerlink" title="1.2 更改块元素和行内元素的显示"></a>1.2 更改块元素和行内元素的显示</h2><p>块元素是一个元素，占用了全部宽度，在前后都是换行符。</p><p>块元素的例子：</p><ul><li><code>&lt;h1&gt;</code></li><li><code>&lt;p&gt;</code></li><li><code>&lt;div&gt;</code></li></ul><p>行内元素只需要必要的宽度，不强制换行。</p><p>行内元素的例子：</p><ul><li><code>&lt;span&gt;</code></li><li><code>&lt;a&gt;</code></li></ul><p>通过display: inline; 可以将块元素的显示更改为内联元素的显示。</p><p>通过display: block; 可以将内联元素的显示更改为块元素的显示。</p><p>示例3:</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>CSS简单学习<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">li</span> <span class="token punctuation">&#123;</span><span class="token comment">/* display属性的值为"inline"的结果,两个元素显示在同一水平线上。*/</span><span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">span</span> <span class="token punctuation">&#123;</span><span class="token comment">/* display属性值为"block"的结果,这两个元素之间的换行符。*/</span><span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>列表中链接依次水平显示：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 如果不指定display: inline;     则下面的5个列表项会依次换行显示 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.tencent.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>腾讯<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.1688.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>阿里巴巴<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.huawei.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>华为<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.jd.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>京东<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>WBG<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>越共、黑天使、赎罪小子、off<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>The shy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>TES<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>魏延、诸葛、左手、马超<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>水<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="/img/Web/displayExample.png" loading="lazy"></p><h1 id="2-CSS元素的溢出（overflow）"><a href="#2-CSS元素的溢出（overflow）" class="headerlink" title="2.CSS元素的溢出（overflow）"></a>2.CSS元素的溢出（overflow）</h1><p>CSS overflow 属性用于控制内容溢出元素框时显示的方式。可以控制内容溢出元素框时在对应的元素区间内添加滚动条。</p><p><strong>overflow</strong>属性有以下值： （<strong>注意：</strong>overflow 属性只工作于指定高度的块元素上。）</p><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">visible</td><td align="left">默认值。内容不会被修剪，会呈现在元素框之外。</td></tr><tr><td align="left">hidden</td><td align="left">内容会被修剪，并且其余内容是不可见的。</td></tr><tr><td align="left">scroll</td><td align="left">内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</td></tr><tr><td align="left">auto</td><td align="left">如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</td></tr><tr><td align="left">inherit</td><td align="left">规定应该从父元素继承 overflow 属性的值。</td></tr></tbody></table><h2 id="overflow-visible"><a href="#overflow-visible" class="headerlink" title="overflow: visible"></a>overflow: visible</h2><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 1px dotted red<span class="token punctuation">;</span><span class="token property">overflow</span><span class="token punctuation">:</span> visible<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这里的文本内容会溢出元素框！！！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这里的文本内容会溢出元素框！！！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这里的文本内容会溢出元素框！！！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="/img/Web/Overflow1.png" alt="overflow1" loading="lazy"></p><h2 id="2-2-overflow-scroll-和-overflow-hidden"><a href="#2-2-overflow-scroll-和-overflow-hidden" class="headerlink" title="2.2 overflow: scroll; 和 overflow: hidden"></a>2.2 overflow: scroll; 和 overflow: hidden</h2><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">#overflowTest1</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> #00FFFF<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> #FF0000<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 1px solid #008000<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 450px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span><span class="token property">overflow</span><span class="token punctuation">:</span> scroll<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#overflowTest2</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> #00FFFF<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> #FF0000<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 1px solid #008000<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 450px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>overflowTest1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这里的文本内容是可以滚动的，滚动条方向是垂直方向。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这里的文本内容是可以滚动的，滚动条方向是垂直方向。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这里的文本内容是可以滚动的，滚动条方向是垂直方向。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这里的文本内容是可以滚动的，滚动条方向是垂直方向。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这里的文本内容是可以滚动的，滚动条方向是垂直方向。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>overflowTest2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这里的文本内容是可以滚动的，滚动条方向是垂直方向。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这里的文本内容是可以滚动的，滚动条方向是垂直方向。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这里的文本内容是可以滚动的，滚动条方向是垂直方向。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这里的文本内容是可以滚动的，滚动条方向是垂直方向。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这里的文本内容是可以滚动的，滚动条方向是垂直方向。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="/img/Web/Overflow2.png" alt="overflow1" loading="lazy"></p><p>可以发现<strong>scroll</strong>会生成滚动条，<strong>hidden</strong>则会隐藏溢出的内容。</p><h2 id="2-3-overflow-auto"><a href="#2-3-overflow-auto" class="headerlink" title="2.3 overflow: auto"></a>2.3 overflow: auto</h2><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">#overflowTest1</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> #00FFFF<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> #FF0000<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 1px solid #008000<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 450px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span><span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#overflowTest2</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> #00FFFF<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> #FF0000<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 1px solid #008000<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 450px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span><span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>overflowTest1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这里的文本内容是可以滚动的，滚动条方向是垂直方向。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这里的文本内容是可以滚动的，滚动条方向是垂直方向。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这里的文本内容是可以滚动的，滚动条方向是垂直方向。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这里的文本内容是可以滚动的，滚动条方向是垂直方向。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>overflowTest2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这里的文本内容是可以滚动的，滚动条方向是垂直方向。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这里的文本内容是可以滚动的，滚动条方向是垂直方向。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="/img/Web/Overflow3.png" alt="overflow1" loading="lazy"></p><p>可以看出<strong>auto</strong>在某些方面更为优秀，可以自己判断是否需要生成滚动条，大多数开发情况下都会选择<strong>auto</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS3学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之CSS3学习（一）盒模型（Box Model）及其属性的相关设置</title>
      <link href="/posts/855e6d6f/"/>
      <url>/posts/855e6d6f/</url>
      
        <content type="html"><![CDATA[<h1 id="1-CSS盒子模型-Box-Model"><a href="#1-CSS盒子模型-Box-Model" class="headerlink" title="1.CSS盒子模型(Box Model)"></a>1.CSS盒子模型(Box Model)</h1><p>所有HTML元素可以看作盒子，在CSS中，”box model”这一术语是用来设计和布局时使用。</p><p>CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容。</p><p>盒模型允许我们在其它元素和周围元素边框之间的空间放置元素。</p><p>下面的图片说明了盒子模型(Box Model)：<br><img src="/img/Web/CSS3hemoxing.jpg" loading="lazy"></p><p>包含属性的说明：</p><ul><li>Margin(外边距) - 清除边框外的区域，外边距是透明的。</li><li>Border(边框) - 围绕在内边距和内容外的边框。</li><li>Padding(内边距) - 清除内容周围的区域，内边距是透明的。</li><li>Content(内容) - 盒子的内容，显示文本和图像。width和height为内容的宽度和高度（不是盒子的宽度和高度）</li></ul><p>最终元素的总宽度计算公式是这样的：</p><p>总元素的宽度&#x3D;宽度+左填充+右填充+左边框+右边框+左边距+右边距。</p><p>元素的总高度最终计算公式是这样的：</p><p>总元素的高度&#x3D;高度+顶部填充+底部填充+上边框+下边框+上边距+下边距。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>CSS简单学习<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> lightgray<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 25px solid green<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>盒子模型小实例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>这里是盒子内的实际内容。有 25px 内间距，25px 外间距、25px 绿色边框。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="/img/Web/boxexample.png" loading="lazy"></p><h1 id="2-CSS边框属性（border）"><a href="#2-CSS边框属性（border）" class="headerlink" title="2.CSS边框属性（border）"></a>2.CSS边框属性（border）</h1><p>CSS边框属性允许你指定一个元素边框的样式和颜色。</p><h2 id="2-1-border-属性"><a href="#2-1-border-属性" class="headerlink" title="2.1 border 属性"></a>2.1 border 属性</h2><table><thead><tr><th align="left">值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><em><a href="https://www.runoob.com/cssref/pr-border-width.html">border-width</a></em></td><td align="left">指定边框的宽度</td></tr><tr><td align="left"><em><a href="https://www.runoob.com/cssref/pr-border-style.html">border-style</a></em></td><td align="left">指定边框的样式</td></tr><tr><td align="left"><em><a href="https://www.runoob.com/cssref/pr-border-color.html">border-color</a></em></td><td align="left">指定边框的颜色</td></tr><tr><td align="left"><em><a href="https://www.runoob.com/cssref/css-inherit.html?1">inherit</a></em></td><td align="left">指定应该从父元素继承border属性值</td></tr></tbody></table><h2 id="2-2-border-width属性"><a href="#2-2-border-width属性" class="headerlink" title="2.2 border-width属性"></a>2.2 border-width属性</h2><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">thin</td><td align="left">定义细的边框。</td></tr><tr><td align="left">medium</td><td align="left">默认。定义中等的边框。</td></tr><tr><td align="left">thick</td><td align="left">定义粗的边框。</td></tr><tr><td align="left"><em>length</em></td><td align="left">允许您自定义边框的宽度。</td></tr><tr><td align="left">inherit</td><td align="left">规定应该从父元素继承边框宽度。</td></tr></tbody></table><h2 id="2-3-border-style属性"><a href="#2-3-border-style属性" class="headerlink" title="2.3 border-style属性"></a>2.3 border-style属性</h2><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">none</td><td align="left">定义无边框。</td></tr><tr><td align="left">hidden</td><td align="left">与 “none” 相同。不过应用于表时除外，对于表，hidden 用于解决边框冲突。</td></tr><tr><td align="left">dotted</td><td align="left">定义点状边框。在大多数浏览器中呈现为实线。</td></tr><tr><td align="left">dashed</td><td align="left">定义虚线。在大多数浏览器中呈现为实线。</td></tr><tr><td align="left">solid</td><td align="left">定义实线。</td></tr><tr><td align="left">double</td><td align="left">定义双线。双线的宽度等于 border-width 的值。</td></tr><tr><td align="left">groove</td><td align="left">定义 3D 凹槽边框。其效果取决于 border-color 的值。</td></tr><tr><td align="left">ridge</td><td align="left">定义 3D 垄状边框。其效果取决于 border-color 的值。</td></tr><tr><td align="left">inset</td><td align="left">定义 3D inset 边框。其效果取决于 border-color 的值。</td></tr><tr><td align="left">outset</td><td align="left">定义 3D outset 边框。其效果取决于 border-color 的值。</td></tr><tr><td align="left">inherit</td><td align="left">规定应该从父元素继承边框样式。</td></tr></tbody></table><h2 id="2-4-border-color属性"><a href="#2-4-border-color属性" class="headerlink" title="2.4 border-color属性"></a>2.4 border-color属性</h2><table><thead><tr><th align="left">值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><em>color</em></td><td align="left">指定背景颜色。</td></tr><tr><td align="left">transparent</td><td align="left">指定边框的颜色应该是透明的。这是默认</td></tr><tr><td align="left">inherit</td><td align="left">指定边框的颜色，应该从父元素继承</td></tr></tbody></table><h1 id="3-CSS轮廓属性（outline）"><a href="#3-CSS轮廓属性（outline）" class="headerlink" title="3.CSS轮廓属性（outline）"></a>3.CSS轮廓属性（outline）</h1><p>轮廓（outline）是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。</p><p>CSS outline 属性规定元素轮廓的样式、颜色和宽度。</p><img src="/img/Web/CSSoutline.png" alt="" style="zoom:150%;" / loading="lazy"><table><thead><tr><th align="left">属性</th><th align="left">说明</th><th align="left">值</th><th align="left">CSS</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-outline.html">outline</a></td><td align="left">在一个声明中设置所有的轮廓属性</td><td align="left"><em>outline-color outline-style outline-width inherit</em></td><td align="left">2</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-outline-color.html">outline-color</a></td><td align="left">设置轮廓的颜色</td><td align="left"><em>color-name hex-number rgb-number invert inherit</em></td><td align="left">2</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-outline-style.html">outline-style</a></td><td align="left">设置轮廓的样式</td><td align="left"><em>none dotted dashed solid double groove ridge inset outset inherit</em></td><td align="left">2</td></tr><tr><td align="left"><a href="https://www.runoob.com/cssref/pr-outline-width.html">outline-width</a></td><td align="left">设置轮廓的宽度</td><td align="left"><em>thin medium thick length inherit</em></td><td align="left">2</td></tr></tbody></table><h2 id="3-1-outline-style属性（轮廓样式"><a href="#3-1-outline-style属性（轮廓样式" class="headerlink" title="3.1 outline-style属性（轮廓样式)"></a>3.1 outline-style属性（轮廓样式)</h2><p>outline（轮廓）是绘制于元素周围的一条线，位于边框边缘的外围。</p><p>outline-style属性指定outline的样式。</p><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">none</td><td align="left">默认。定义无轮廓。</td></tr><tr><td align="left">dotted</td><td align="left">定义点状的轮廓。</td></tr><tr><td align="left">dashed</td><td align="left">定义虚线轮廓。</td></tr><tr><td align="left">solid</td><td align="left">定义实线轮廓。</td></tr><tr><td align="left">double</td><td align="left">定义双线轮廓。双线的宽度等同于 outline-width 的值。</td></tr><tr><td align="left">groove</td><td align="left">定义 3D 凹槽轮廓。此效果取决于 outline-color 值。</td></tr><tr><td align="left">ridge</td><td align="left">定义 3D 凸槽轮廓。此效果取决于 outline-color 值。</td></tr><tr><td align="left">inset</td><td align="left">定义 3D 凹边轮廓。此效果取决于 outline-color 值。</td></tr><tr><td align="left">outset</td><td align="left">定义 3D 凸边轮廓。此效果取决于 outline-color 值。</td></tr><tr><td align="left">inherit</td><td align="left">规定应该从父元素继承轮廓样式的设置。</td></tr></tbody></table><h2 id="3-2-outline-width属性（轮廓宽度）"><a href="#3-2-outline-width属性（轮廓宽度）" class="headerlink" title="3.2 outline-width属性（轮廓宽度）"></a>3.2 outline-width属性（轮廓宽度）</h2><p>outline（轮廓）是绘制于元素周围的一条线，位于边框边缘的外围。</p><p>outline-width指定轮廓的宽度。</p><p><strong>注意：</strong> 请始终在outline-width属性之前声明outline-style属性。元素只有获得轮廓以后才能改变其轮廓的宽度。</p><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">thin</td><td align="left">规定细轮廓。</td></tr><tr><td align="left">medium</td><td align="left">默认。规定中等的轮廓。</td></tr><tr><td align="left">thick</td><td align="left">规定粗的轮廓。</td></tr><tr><td align="left"><em>length</em></td><td align="left">允许您规定轮廓粗细的值。</td></tr><tr><td align="left">inherit</td><td align="left">规定应该从父元素继承轮廓宽度的设置。</td></tr></tbody></table><h2 id="3-3-outline-color属性（轮廓颜色）"><a href="#3-3-outline-color属性（轮廓颜色）" class="headerlink" title="3.3 outline-color属性（轮廓颜色）"></a>3.3 outline-color属性（轮廓颜色）</h2><p>outline （轮廓）是绘制于元素周围的一条线，位于边框边缘的外围。</p><p>outline-color属性指定轮廓颜色。</p><p><strong>注意：</strong> 请始终在 outline-color 属性之前声明 outline-style 属性。元素只有获得轮廓以后才能改变其轮廓的颜色。</p><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>color</em></td><td align="left">指定轮廓颜色。</td></tr><tr><td align="left">invert</td><td align="left">默认。执行颜色反转（逆向的颜色）。可使轮廓在不同的背景颜色中都是可见。</td></tr><tr><td align="left">inherit</td><td align="left">规定应该从父元素继承轮廓颜色的设置。</td></tr></tbody></table><h2 id="3-4-outline属性"><a href="#3-4-outline属性" class="headerlink" title="3.4 outline属性"></a>3.4 outline属性</h2><p>outline（轮廓）是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。</p><p>outline简写属性在一个声明中设置所有的轮廓属性。</p><p>可以设置的属性分别是（按顺序）：outline-color，outline-style，outline-width（顺序正好与border相反）</p><p>如果不设置其中的某个值，也不会出问题，比如 outline:solid #ff0000; 也是允许的。</p><h1 id="4-CSS外边距属性（margin）"><a href="#4-CSS外边距属性（margin）" class="headerlink" title="4.CSS外边距属性（margin）"></a>4.CSS外边距属性（margin）</h1><p>CSS margin(外边距)属性定义元素周围的空间。</p><p>margin 清除周围的（外边框）元素区域。margin 没有背景颜色，是完全透明的。</p><p>margin 可以单独改变元素的上，下，左，右边距，也可以一次改变所有的属性。</p><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">auto</td><td align="left">浏览器计算外边距。</td></tr><tr><td align="left"><em>length</em></td><td align="left">规定以具体单位计的外边距值，比如像素、厘米等。默认值是 0px。</td></tr><tr><td align="left"><em>%</em></td><td align="left">规定基于父元素的宽度的百分比的外边距。</td></tr><tr><td align="left">inherit</td><td align="left">规定应该从父元素继承外边距。</td></tr></tbody></table><h2 id="4-1-简写属性设置"><a href="#4-1-简写属性设置" class="headerlink" title="4.1 简写属性设置"></a>4.1 简写属性设置</h2><p>margin简写属性在一个声明中设置所有外边距属性。该属性可以有1到4个值。</p><p>实例:</p><ul><li>margin:10px 5px 15px 20px;<ul><li>上边距是 10px</li><li>右边距是 5px</li><li>下边距是 15px</li><li>左边距是 20px</li></ul></li><li>margin:10px 5px 15px;<ul><li>上边距是 10px</li><li>右边距和左边距是 5px</li><li>下边距是 15px</li></ul></li><li>margin:10px 5px;<ul><li>上边距和下边距是 10px</li><li>右边距和左边距是 5px</li></ul></li><li>margin:10px;<ul><li>所有四个边距都是 10px</li></ul></li></ul><p><strong>注意</strong>： 负值是允许的。</p><h1 id="5-CSS填充属性（padding）"><a href="#5-CSS填充属性（padding）" class="headerlink" title="5 CSS填充属性（padding）"></a>5 CSS填充属性（padding）</h1><p>CSS padding（填充）是一个简写属性，定义元素边框与元素内容之间的空间，即上下左右的内边距。</p><p>当元素的 padding（填充）内边距被清除时，所释放的区域将会受到元素背景颜色的填充。</p><p>单独使用 padding 属性可以改变上下左右的填充。</p><table><thead><tr><th align="left">值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><em>length</em></td><td align="left">规定以具体单位计的填充值，比如像素、厘米等。默认值是 0px</td></tr><tr><td align="left"><em>%</em></td><td align="left">规定基于父元素的宽度的百分比的填充</td></tr><tr><td align="left">inherit</td><td align="left">指定应该从父元素继承padding</td></tr></tbody></table><h2 id="5-1-简写属性设置"><a href="#5-1-简写属性设置" class="headerlink" title="5.1 简写属性设置"></a>5.1 简写属性设置</h2><p>padding简写属性在一个声明中设置所有外边距属性。该属性可以有1到4个值。</p><p>实例:</p><ul><li>padding:10px 5px 15px 20px;<ul><li>上边距是 10px</li><li>右边距是 5px</li><li>下边距是 15px</li><li>左边距是 20px</li></ul></li><li>padding:10px 5px 15px;<ul><li>上边距是 10px</li><li>右边距和左边距是 5px</li><li>下边距是 15px</li></ul></li><li>padding:10px 5px;<ul><li>上边距和下边距是 10px</li><li>右边距和左边距是 5px</li></ul></li><li>padding:10px;<ul><li>所有四个边距都是 10px</li></ul></li></ul><p><strong>注意</strong>： 负值是允许的。</p>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS3学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端学习之HTML5学习（一）块级元素与行内元素</title>
      <link href="/posts/316fe2ce/"/>
      <url>/posts/316fe2ce/</url>
      
        <content type="html"><![CDATA[<h1 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h1><p>在网页中一般通过块元素对页面进行布局</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>不可以和其他的元素在一行，可以自动换行，可以设置宽高</li><li>块元素中基本什么都能放。</li><li>p元素中不能放任何的块元素</li></ul><h2 id="常见块元素列表"><a href="#常见块元素列表" class="headerlink" title="常见块元素列表"></a>常见块元素列表</h2><table><thead><tr><th align="left"><code>&lt;address&gt;</code></th><th align="left">定义地址</th></tr></thead><tbody><tr><td align="left"><code>&lt;caption&gt;</code></td><td align="left">定义表格标题</td></tr><tr><td align="left"><code>&lt;dd&gt;</code></td><td align="left">定义列表中定义条目</td></tr><tr><td align="left"><code>&lt;div&gt;</code></td><td align="left">定义文档中的分区或节</td></tr><tr><td align="left"><code>&lt;dl&gt;</code></td><td align="left">定义列表</td></tr><tr><td align="left"><code>&lt;dt&gt;</code></td><td align="left">定义列表中的项目</td></tr><tr><td align="left"><code>&lt;fieldset&gt;</code></td><td align="left">定义一个框架集</td></tr><tr><td align="left"><code>&lt;form&gt;</code></td><td align="left">创建 HTML 表单</td></tr><tr><td align="left"><code>&lt;h1&gt;</code></td><td align="left">定义最大的标题</td></tr><tr><td align="left"><code>&lt;h2&gt;</code></td><td align="left">定义副标题</td></tr><tr><td align="left"><code>&lt;h3&gt;</code></td><td align="left">定义标题</td></tr><tr><td align="left"><code>&lt;h4&gt;</code></td><td align="left">定义标题</td></tr><tr><td align="left"><code>&lt;h5&gt;</code></td><td align="left">定义标题</td></tr><tr><td align="left"><code>&lt;h6&gt;</code></td><td align="left">定义最小的标题</td></tr><tr><td align="left"><code>&lt;hr&gt;</code></td><td align="left">创建一条水平线</td></tr><tr><td align="left"><code>&lt;legend&gt;</code></td><td align="left">元素为 fieldset 元素定义标题</td></tr><tr><td align="left"><code>&lt;li&gt;</code></td><td align="left">标签定义列表项目</td></tr><tr><td align="left"><code>&lt;noframes&gt;</code></td><td align="left">为那些不支持框架的浏览器显示文本，于 frameset 元素内部</td></tr><tr><td align="left"><code>&lt;noscript&gt;</code></td><td align="left">定义在脚本未被执行时的替代内容</td></tr><tr><td align="left"><code>&lt;ol&gt;</code></td><td align="left">定义有序列表</td></tr><tr><td align="left"><code>&lt;ul&gt;</code></td><td align="left">定义无序列表</td></tr><tr><td align="left"><code>&lt;p&gt;</code></td><td align="left">标签定义段落</td></tr><tr><td align="left"><code>&lt;pre&gt;</code></td><td align="left">定义预格式化的文本</td></tr><tr><td align="left"><code>&lt;table&gt;</code></td><td align="left">标签定义 HTML 表格</td></tr><tr><td align="left"><code>&lt;tbody&gt;</code></td><td align="left">标签表格主体（正文）</td></tr><tr><td align="left"><code>&lt;td&gt;</code></td><td align="left">表格中的标准单元格</td></tr><tr><td align="left"><code>&lt;tfoot&gt;</code></td><td align="left">定义表格的页脚（脚注或表注）</td></tr><tr><td align="left"><code>&lt;th&gt;</code></td><td align="left">定义表头单元格</td></tr><tr><td align="left"><code>&lt;thead&gt;</code></td><td align="left">标签定义表格的表头</td></tr><tr><td align="left"><code>&lt;tr&gt;</code></td><td align="left">定义表格中的行</td></tr></tbody></table><h1 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h1><p>行内元素主要用来包裹文字</p><h2 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h2><ul><li>可以和其他元素在一行显示，不能自动换行，不能设置宽高</li><li>一般会在块元素中放行内元素，而不会在行内元素中放块元素。</li></ul><h2 id="常见行内元素列表"><a href="#常见行内元素列表" class="headerlink" title="常见行内元素列表"></a>常见行内元素列表</h2><table><thead><tr><th align="left"><code>&lt;a&gt;</code></th><th align="left">标签可定义锚</th></tr></thead><tbody><tr><td align="left"><code>&lt;abbr&gt;</code></td><td align="left">表示一个缩写形式</td></tr><tr><td align="left"><code>&lt;acronym&gt;</code></td><td align="left">定义只取首字母缩写</td></tr><tr><td align="left"><code>&lt;b&gt;</code></td><td align="left">字体加粗</td></tr><tr><td align="left"><code>&lt;bdo&gt;</code></td><td align="left">可覆盖默认的文本方向</td></tr><tr><td align="left"><code>&lt;big&gt;</code></td><td align="left">大号字体加粗</td></tr><tr><td align="left"><code>&lt;br&gt;</code></td><td align="left">换行</td></tr><tr><td align="left"><code>&lt;cite&gt;</code></td><td align="left">引用进行定义</td></tr><tr><td align="left"><code>&lt;code&gt;</code></td><td align="left">定义计算机代码文本</td></tr><tr><td align="left"><code>&lt;dfn&gt;</code></td><td align="left">定义一个定义项目</td></tr><tr><td align="left"><code>&lt;em&gt;</code></td><td align="left">定义为强调的内容</td></tr><tr><td align="left"><code>&lt;i&gt;</code></td><td align="left">斜体文本效果</td></tr><tr><td align="left"><code>&lt;img&gt;</code></td><td align="left">向网页中嵌入一幅图像</td></tr><tr><td align="left"><code>&lt;input&gt;</code></td><td align="left">输入框</td></tr><tr><td align="left"><code>&lt;kbd&gt;</code></td><td align="left">定义键盘文本</td></tr><tr><td align="left"><code>&lt;label&gt;</code></td><td align="left">标签为 input 元素定义标注（标记）</td></tr><tr><td align="left"><code>&lt;q&gt;</code></td><td align="left">定义短的引用</td></tr><tr><td align="left"><code>&lt;samp&gt;</code></td><td align="left">定义样本文本</td></tr><tr><td align="left"><code>&lt;select&gt;</code></td><td align="left">创建单选或多选菜单</td></tr><tr><td align="left"><code>&lt;small&gt;</code></td><td align="left">呈现小号字体效果</td></tr><tr><td align="left"><code>&lt;span&gt;</code></td><td align="left">组合文档中的行内元素</td></tr><tr><td align="left"><code>&lt;strong&gt;</code></td><td align="left">语气更强的强调的内容</td></tr><tr><td align="left"><code>&lt;sub&gt;</code></td><td align="left">定义下标文本</td></tr><tr><td align="left"><code>&lt;sup&gt;</code></td><td align="left">定义上标文本</td></tr><tr><td align="left"><code>&lt;textarea&gt;</code></td><td align="left">多行的文本输入控件</td></tr><tr><td align="left"><code>&lt;tt&gt;</code></td><td align="left">打字机或者等宽的文本效果</td></tr><tr><td align="left"><code>&lt;var&gt;</code></td><td align="left">定义变量</td></tr></tbody></table><h1 id="其他（br标签换行符）"><a href="#其他（br标签换行符）" class="headerlink" title="其他（br标签换行符）"></a>其他（<code>br</code>标签换行符）</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><code>&lt;br&gt;</code>标签用于插入一个简单的换行符。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Jayfan<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        Welcome<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>To<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://jayfan.icu/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Jayfan’s Blog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><!DOCTYPE html><html><head>    <meta charset="UTF-8">    <title>Jayfan</title></head><body>    <p>        Welcome<br>To<br>        <br>        <a href="https://jayfan.icu/">Jayfan’s Blog<a>        <br>    </p></body></html>]]></content>
      
      
      <categories>
          
          <category> Web前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java项目：炉石传说ver 2.0</title>
      <link href="/posts/92f0e342/"/>
      <url>/posts/92f0e342/</url>
      
        <content type="html"><![CDATA[<h1 id="进度描述"><a href="#进度描述" class="headerlink" title="进度描述"></a>进度描述</h1><p>此次对《java项目：炉石传说》进行了更新，来到ver 2.0。</p><h1 id="更新内容"><a href="#更新内容" class="headerlink" title="更新内容"></a>更新内容</h1><p>新添玩法：</p><ol><li><p>(Cost)费用：每个随从都有召唤费用，通常为 (AP+HP)&#x2F;2，需要消耗对应的水晶才能召唤进战场；</p></li><li><p>(CardLibrary)牌库：游戏开始时，给每个玩家初始化30张牌（随从），相同的随从可以重复出现最多3次；</p></li><li><p>(Cemetery)墓地：随从被击杀时，将从战场中移出，并置入每个玩家各自拥有的墓地中；</p></li><li><p>(HandCard)手牌：游戏开始时，每个玩家从牌库中依序抽出前3张牌作为手牌，手牌最多10张；</p></li><li><p>先手：游戏通过抛硬币的方式决定先手玩家；(等概率公平随机)</p></li><li><p>抽牌：先手玩家从自己的牌库中抽第4张牌并开始游戏；每个玩家在自己回合开始时都会抽1张牌；若牌库没有牌可抽，将按1、2、4、8的方式扣除英雄的生命值（直至英雄死亡）；若手牌已有10张， 抽牌后11张，则需要选择1张牌置入墓地后再继续其他操作。</p></li><li><p>水晶：每个回合开始时玩家将收获水晶；水晶在回合结束后将清空；第1回合双方拥有2个水晶，此后每个回合增加1个水晶，直到达到最大值10个水晶。</p></li></ol><h1 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h1><p>由于暂时还没找炉石的牌库，所以决定先随机生成卡牌(名称、攻击力、生命值)，并用牌堆(CardPile)储存。</p><h2 id="Role类"><a href="#Role类" class="headerlink" title="Role类"></a>Role类</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Role</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>hero <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>Servant</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">battlefiledCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>crystal <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handCard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HandCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>cemetery <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cemetery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>cardLibrary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CardLibrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Hero</span> hero<span class="token punctuation">;</span><span class="token keyword">public</span> battlefiledCard <span class="token class-name">Servant</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> crystal<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">HandCard</span> handCard<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Cemetery</span> cemetery<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">CardLibrary</span> cardLibrary<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getCrystal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>crystal<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">checkCrystal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>crystal<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span>handCard<span class="token punctuation">.</span></span>Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">cardLibrary<span class="token punctuation">.</span></span>CardInit</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span>cardLibrary<span class="token punctuation">.</span></span>Remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Deployment</span><span class="token punctuation">(</span><span class="token keyword">int</span> attacker<span class="token punctuation">,</span><span class="token keyword">int</span> hCard<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>Servant</span><span class="token punctuation">.</span>servant<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>attacker<span class="token punctuation">,</span> handCard<span class="token punctuation">.</span>handCard<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>hCard<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handCard<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>hCard<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>抽卡行为Draw和部署行为Deployment，以及一些新添的内容</p><h2 id="Hero类"><a href="#Hero类" class="headerlink" title="Hero类"></a>Hero类</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> HP<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Skill</span> skill<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请选择你想要的英雄："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>HP <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>skill <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Skill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> <span class="token class-name">Name</span> <span class="token operator">=</span> name<span class="token punctuation">;</span>skill<span class="token punctuation">.</span><span class="token function">getSkillType</span><span class="token punctuation">(</span><span class="token class-name">Name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>skill<span class="token punctuation">.</span><span class="token function">getSkill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hurt</span><span class="token punctuation">(</span><span class="token keyword">int</span> hurtHP<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>HP <span class="token operator">-=</span> hurtHP<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getHP</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> HP<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>新添技能Skill和name</p><h2 id="battlefiledCard类-原Servant类"><a href="#battlefiledCard类-原Servant类" class="headerlink" title="battlefiledCard类(原Servant类)"></a>battlefiledCard类(原Servant类)</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Card</span><span class="token punctuation">></span></span> servant<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">battlefiledCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>servant <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Card</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hurt</span><span class="token punctuation">(</span><span class="token keyword">int</span> defender<span class="token punctuation">,</span><span class="token keyword">int</span> injure<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>servant<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>defender<span class="token punctuation">)</span><span class="token punctuation">.</span>HP <span class="token operator">-=</span> injure<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> defender<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>servant<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>defender<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>更名为战场牌(battlefiledCard类)</p><h2 id="Cemetery类"><a href="#Cemetery类" class="headerlink" title="Cemetery类"></a>Cemetery类</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Card</span><span class="token punctuation">></span></span> dead<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Cemetery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>dead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Card</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Card</span> gee<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dead<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>gee<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>墓地</p><h2 id="Skill类"><a href="#Skill类" class="headerlink" title="Skill类"></a>Skill类</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> cost<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Skill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getSkillType</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"pastor"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你选择的英雄是牧师"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">"cure"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"hunter"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你选择的英雄是猎人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">"attack"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getSkill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token string">"cure"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>cost <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token string">"attack"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>cost <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>此为所选英雄技能的初始化。</p><h2 id="Card类"><a href="#Card类" class="headerlink" title="Card类"></a>Card类</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> cost<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> AP<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> HP<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">CardBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token function">getStringRandom</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>cost <span class="token operator">=</span> <span class="token function">getCostRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>AP <span class="token operator">=</span> <span class="token function">getAPRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>HP <span class="token operator">=</span> <span class="token function">getHPRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//生成随机卡牌费用</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCostRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> expense <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> expense<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//生成随机用户名，数字和字母组成,</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStringRandom</span><span class="token punctuation">(</span><span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> val <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//参数length，表示生成几位随机数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> charOrNum <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"char"</span> <span class="token operator">:</span> <span class="token string">"num"</span><span class="token punctuation">;</span>            <span class="token comment">//输出字母还是数字</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token string">"char"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>charOrNum<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//输出是大写字母还是小写字母</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">65</span> <span class="token operator">:</span> <span class="token number">97</span><span class="token punctuation">;</span>                val <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span> <span class="token operator">+</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token string">"num"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>charOrNum<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                val <span class="token operator">+=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//生成随机卡牌的攻击力</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAPRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token class-name">Ap</span><span class="token punctuation">;</span>    <span class="token class-name">Ap</span> <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>cost <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Ap</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//生成随机卡牌的生命值</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getHPRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token class-name">AHp</span><span class="token punctuation">,</span><span class="token class-name">Hp</span><span class="token punctuation">;</span>    <span class="token class-name">AHp</span> <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span>cost<span class="token operator">+</span><span class="token number">1</span><span class="token operator">-</span>AP<span class="token punctuation">)</span> <span class="token operator">+</span> AP<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token class-name">Hp</span> <span class="token operator">=</span> <span class="token class-name">AHp</span> <span class="token operator">-</span> AP<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Hp</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><p>此为卡牌类，包括卡牌的基础属性、费用、以及卡牌的初始化方法。初始化方法用的是随机生成数值，并带有根据费用带来的一定限制。</p><h2 id="CardPile类"><a href="#CardPile类" class="headerlink" title="CardPile类"></a>CardPile类</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Card</span><span class="token punctuation">></span></span> <span class="token class-name">TotalCard</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">CardPile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>TotalCard</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Card</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Card</span> aCard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Card</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name"><span class="token namespace">aCard<span class="token punctuation">.</span></span>CardBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>TotalCard</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>aCard<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>简单的生成一个牌堆。</p><h2 id="CardLibrary类"><a href="#CardLibrary类" class="headerlink" title="CardLibrary类"></a>CardLibrary类</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Card</span><span class="token punctuation">></span></span> <span class="token class-name">CardInit</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">CardLibrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>CardInit</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Card</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Init</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Card</span><span class="token punctuation">></span></span><span class="token class-name">TotalCard</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> judge<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> select<span class="token punctuation">,</span>amount<span class="token punctuation">,</span>sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>sum<span class="token operator">&lt;</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>select <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>amount <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">></span> <span class="token number">27</span><span class="token punctuation">)</span> amount <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">-</span> sum<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>judge<span class="token punctuation">[</span>select<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>select <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>judge<span class="token punctuation">[</span>select<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> amount<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>CardInit</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">TotalCard</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>select<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>sum <span class="token operator">+=</span> amount<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> delete<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>CardInit</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>delete<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>生成玩家自己的牌库，从牌堆中随机挑选(暂时先随机挑选吧)。</p><h2 id="HandCard类"><a href="#HandCard类" class="headerlink" title="HandCard类"></a>HandCard类</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Card</span><span class="token punctuation">></span></span> handCard<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">HandCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handCard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Card</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Add</span><span class="token punctuation">(</span><span class="token class-name">Card</span> card<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handCard<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>card<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handCard<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你的卡牌超过10，请选择一张放入墓地"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> number <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handCard<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>手牌类，需要进行最大容量判断和移除操作。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>能力和时间都有限，有些知识还没学，先更新到这里，后面还有版本前瞻，可以先看看。</p><h1 id="版本前瞻"><a href="#版本前瞻" class="headerlink" title="版本前瞻"></a>版本前瞻</h1><h2 id="加点功能"><a href="#加点功能" class="headerlink" title="加点功能"></a>加点功能</h2><p><strong>英雄</strong>：</p><p>1、增加名称、头像</p><p>2、技能类增加特殊随从召唤  </p><p><strong>卡牌</strong>：</p><p>1、给每个卡牌增加正反两面的图案(看时间)</p><p>2、初始时卡牌都在右侧的牌库，堆叠、背面朝上</p><p>3、卡牌使用后（或随从被击杀）依次放在左侧的队列，正面朝上</p><p>4、增加战场中的卡牌状态<br>    <em>休息：刚被召唤进战场或本次行动后<br>    可用：玩家回合一开始时<br>    其他状态自己增加</em></p><h2 id="做个界面"><a href="#做个界面" class="headerlink" title="做个界面"></a>做个界面</h2><p>就尽量往炉石的界面做，争取能进行基本游戏操作即可。</p><p>先去学一学异常处理机制、文件输入输出流、GUI和网络进行开发。</p><h2 id="人机对战"><a href="#人机对战" class="headerlink" title="人机对战"></a>人机对战</h2><p>每个回合，每个玩家可以执行的动作其实只有（回合开始自动）“抽牌”、“召唤”（选那些牌）、“攻击”（选谁攻击谁）和结束回合这么几种，当然因为召唤有消耗，具体会有不同的随从召唤策略，同时攻击也有攻击哪个随从或玩家的差异。可以设计多种的机器智能，使机器玩家也能进行游戏。</p>]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF-非零段划分-JAVA-20210902</title>
      <link href="/posts/846e6d4a/"/>
      <url>/posts/846e6d4a/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>A1,A2,⋯,An 是一个由 n 个自然数（非负整数）组成的数组。我们称其中 Ai,⋯,Aj 是一个非零段，当且仅当以下条件同时满足：</p><ul><li>1≤i≤j≤n；</li><li>对于任意的整数 k，若 i≤k≤j，则 Ak&gt;0；</li><li>i&#x3D;1 或 Ai−1&#x3D;0；</li><li>j&#x3D;n 或 Aj+1&#x3D;0。</li></ul><p>下面展示了几个简单的例子：</p><ul><li>A&#x3D;[3,1,2,0,0,2,0,4,5,0,2] 中的 4 个非零段依次为 [3,1,2]、[2]、[4,5] 和 [2]；</li><li>A&#x3D;[2,3,1,4,5] 仅有 1 个非零段；</li><li>A&#x3D;[0,0,0] 则不含非零段（即非零段个数为 0）。</li></ul><p>现在我们可以对数组 A 进行如下操作：任选一个正整数 p，然后将 A 中所有小于 p 的数都变为 0。试选取一个合适的 p，使得数组 A 中的非零段个数达到最大。若输入的 A 所含非零段数已达最大值，可取 p&#x3D;1，即不对 A 做任何修改。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>从标准输入读入数据。</p><p>输入的第一行包含一个正整数 n。</p><p>输入的第二行包含 n 个用空格分隔的自然数 A1,A2,⋯,An。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出到标准输出。</p><p>仅输出一个整数，表示对数组 A 进行操作后，其非零段个数能达到的最大值。</p><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><pre class="language-data" data-language="data"><code class="language-data">113 1 2 0 0 2 0 4 5 0 2</code></pre><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><pre class="language-data" data-language="data"><code class="language-data">5</code></pre><h2 id="评测用例规模与规定"><a href="#评测用例规模与规定" class="headerlink" title="评测用例规模与规定"></a>评测用例规模与规定</h2><p>70% 的测试数据满足 n≤1000；</p><p>全部的测试数据满足 n≤5×105，且数组 A 中的每一个数均不超过 104。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>首先，由题目可得，存在一个正整数p，使得数组A经过p的处理之后得到最多的非零段。我一开始的思路是，当经过p处理修改a[i]为0后，a[i-1]和a[i+1]都等于0时非零段减一，都不等于0时非零段加一。最后记下非零段最多的时候。如果不经过其他处理这样只可以过70%的数据。 </p><p>这道题其实考的是对前缀和和差分数组的性质的理解。当a[i]&gt;a[i-1]时，当p取到这两个数之间的值时，这里会出现一个非零段，也就是非零段加1，这就需要对一个范围都加上1，这就可以用到差分数组的性质，当我们要对一个范围[l,r]的数全体加上或减去某个值n时，我们只需要对它的差分数组diff[l]+n,diff[r+1]-n;然后再求前缀和得到的数组便是进行处理之后的数组。 </p><p>（对前缀和还有差分数组一点都不了解的可以去看看这位大佬的博客<a href="https://www.cnblogs.com/yongcheng137blogs/">ycloong’s blog</a>）</p><h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><h2 id="70分代码"><a href="#70分代码" class="headerlink" title="70分代码"></a>70分代码</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>maxs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> f <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> t <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>sum <span class="token operator">++</span><span class="token punctuation">;</span>f <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>f <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>maxs <span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxs<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> in <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>list2<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>list2<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">naturalOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> list2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> k <span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> i <span class="token operator">&amp;&amp;</span> k <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> k1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>k1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> k2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>sum <span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>k1 <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> k2 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>sum <span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>maxs <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxs<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>maxs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="100分代码"><a href="#100分代码" class="headerlink" title="100分代码"></a>100分代码</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>dif <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dif<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>dif<span class="token punctuation">[</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//对差分数组进行一整段的加减</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token function">_0902</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//数组最前面要放一个0，不然开始就会判断错误</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> pre <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> p <span class="token operator">&lt;</span> <span class="token number">1e4</span><span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pre <span class="token operator">+=</span> dif<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>        maxn <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxn<span class="token punctuation">,</span> pre<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>maxn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java项目：炉石传说（基于CSP-20160903）</title>
      <link href="/posts/4d61c43a/"/>
      <url>/posts/4d61c43a/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>《炉石传说：魔兽英雄传》（Hearthstone: Heroes of Warcraft，简称炉石传说）是暴雪娱乐开发的一款集换式卡牌游戏。游戏在一个战斗棋盘上进行，由两名玩家轮流进行操作，本题所使用的炉石传说游戏的简化规则如下：</p><p>* 玩家会控制一些角色(Role)，每个角色有自己的生命值和攻击力。当生命值小于等于 0 时，该角色死亡。角色分为英雄和随从。</p><p>* 玩家各控制一个英雄(Hero)，游戏开始时，英雄的生命值为 30，攻击力为 0。当英雄死亡时，游戏结束，英雄未死亡的一方获胜。</p><p>* 玩家可在游戏过程中召唤随从(Servant)。棋盘上每方都有 7 个可用于放置随从的空位，从左到右一字排开，被称为战场。当随从死亡时，它将被从战场上移除。</p><p>* 游戏开始后，两位玩家轮流进行操作（Command），每个玩家的连续一组操作称为一个回合(Turn)。</p><p>* 每个回合中，当前玩家可进行零个或者多个以下操作：</p><p>​       1) 召唤随从：玩家召唤一个随从进入战场，随从具有指定的生命值和攻击力。</p><p>　　2) 随从攻击：玩家控制自己的某个随从攻击对手的英雄或者某个随从。</p><p>　　3) 结束回合：玩家声明自己的当前回合结束，游戏将进入对手的回合。该操作一定是一个回合的最后一个操作。</p><p>* 当随从攻击时，攻击方和被攻击方会同时对彼此造成等同于自己攻击力的伤害。受到伤害的角色的生命值将会减少，数值等同于受到的伤害。例如，随从 X 的生命值为 HX、攻击力为 AX，随从 Y 的生命值为 HY、攻击力为 AY，如果随从 X 攻击随从 Y，则攻击发生后随从 X 的生命值变为 HX - AY，随从 Y 的生命值变为 HY - AX。攻击发生后，角色的生命值可以为负数。</p><p>本题将给出一个游戏的过程，要求编写程序模拟该游戏过程并输出最后的局面。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入第一行是一个整数 n，表示操作的个数。接下来 n 行，每行描述一个操作，格式如下：</p><p>　　<action> <arg1> <arg2> …</p><p>其中<action>表示操作类型，是一个字符串，共有 3 种：summon表示召唤随从，attack表示随从攻击，end表示结束回合。这 3 种操作的具体格式如下：</p><p>* summon <position> <attack> <health>：当前玩家在位置<position>召唤一个生命值为<health>、攻击力为<attack>的随从。其中<position>是一个 1 到 7 的整数，表示召唤的随从出现在战场上的位置，原来该位置及右边的随从都将顺次向右移动一位。</p><p>* attack <attacker> <defender>：当前玩家的角色<attacker>攻击对方的角色 <defender>。<attacker>是 1 到 7 的整数，表示发起攻击的本方随从编号，<defender>是 0 到 7 的整数，表示被攻击的对方角色，0 表示攻击对方英雄，1 到 7 表示攻击对方随从的编号。</p><p>* end：当前玩家结束本回合。</p><p>注意：随从的编号会随着游戏的进程发生变化，当召唤一个随从时，玩家指定召唤该随从放入战场的位置，此时，原来该位置及右边的所有随从编号都会增加 1。而当一个随从死亡时，它右边的所有随从编号都会减少 1。任意时刻，战场上的随从总是从1开始连续编号。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出共 5 行。</p><p>第 1 行包含一个整数，表示这 n 次操作后（以下称为 T 时刻）游戏的胜负结果，1 表示先手玩家获胜，-1 表示后手玩家获胜，0 表示游戏尚未结束，还没有人获胜。</p><p>第 2 行包含一个整数，表示 T 时刻先手玩家的英雄的生命值。</p><p>第 3 行包含若干个整数，第一个整数 p 表示 T 时刻先手玩家在战场上存活的随从个数，之后 p 个整数，分别表示这些随从在 T 时刻的生命值（按照从左往右的顺序）。</p><p>第 4 行和第 5 行与第 2 行和第 3 行类似，只是将玩家从先手玩家换为后手玩家。</p><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><p>8</p><p>summon 1 3 6</p><p>summon 2 4 2</p><p>end</p><p>summon 1 4 5</p><p>summon 1 2 1</p><p>attack 1 2</p><p>end</p><p>attack 1 1</p><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><p>0</p><p>30</p><p>1 2</p><p>30</p><p>1 2</p><h2 id="样例说明"><a href="#样例说明" class="headerlink" title="样例说明"></a>样例说明</h2><p>按照样例输入从第 2 行开始逐行的解释如下：</p><p>\1. 先手玩家在位置 1 召唤一个生命值为 6、攻击力为 3 的随从 A，是本方战场上唯一的随从。</p><p>\2. 先手玩家在位置 2 召唤一个生命值为 2、攻击力为 4 的随从 B，出现在随从 A 的右边。</p><p>\3. 先手玩家回合结束。</p><p>\4. 后手玩家在位置 1 召唤一个生命值为 5、攻击力为 4 的随从 C，是本方战场上唯一的随从。</p><p>\5. 后手玩家在位置 1 召唤一个生命值为 1、攻击力为 2 的随从 D，出现在随从 C 的左边。</p><p>\6. 随从 D 攻击随从 B，双方均死亡。</p><p>\7. 后手玩家回合结束。</p><p>\8. 随从 A 攻击随从 C，双方的生命值都降低至 2。</p><p><strong>测试用例</strong> ：<strong>CSP-20160903</strong></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>因为问题中有角色，每个角色有一个英雄和若干个随从，所以需要进行角色、英雄、随从等类设计，角色可以进行一些行动，需要考虑这些行动函数放在哪个类比较合适（使后期的改动轻松），下面是我对这些类的第一代设计：</p><h1 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h1><p>初步对于类的设计</p><h2 id="Role类"><a href="#Role类" class="headerlink" title="Role类"></a>Role类</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Role</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>hero <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>servant <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Servant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Hero</span> hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Servant</span> servant<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">summon</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">,</span><span class="token keyword">int</span> attack<span class="token punctuation">,</span><span class="token keyword">int</span> health<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ele <span class="token operator">=</span> <span class="token punctuation">&#123;</span>attack<span class="token punctuation">,</span>health<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span>servant<span class="token punctuation">.</span></span>Suicong</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>position<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token keyword">int</span> attacker<span class="token punctuation">,</span><span class="token keyword">int</span> defender<span class="token punctuation">,</span><span class="token class-name">Role</span> attackob<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>defender <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>attackob<span class="token punctuation">.</span>hero<span class="token punctuation">.</span><span class="token function">hurt</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span>servant<span class="token punctuation">.</span></span>Suicong</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>attacker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>servant<span class="token punctuation">.</span><span class="token function">hurt</span><span class="token punctuation">(</span>attacker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">attackob<span class="token punctuation">.</span>servant<span class="token punctuation">.</span></span>Suicong</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>defender<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>attackob<span class="token punctuation">.</span>servant<span class="token punctuation">.</span><span class="token function">hurt</span><span class="token punctuation">(</span>defender<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span>servant<span class="token punctuation">.</span></span>Suicong</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>attacker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span>servant<span class="token punctuation">.</span></span>Suicong</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>attacker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>servant<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>attacker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">attackob<span class="token punctuation">.</span>servant<span class="token punctuation">.</span></span>Suicong</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>defender<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>attackob<span class="token punctuation">.</span>servant<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>defender<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>首先是要在构造函数中new hero和servant；</p><p>我将行为summon和attack放在Role 类中，都归为角色的行为，这样在后期如果添加部分随从由于行动获得不同技能的机制这类的改动会轻松一点。</p><h2 id="Hero类"><a href="#Hero类" class="headerlink" title="Hero类"></a>Hero类</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> HP<span class="token punctuation">;</span><span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>HP <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hurt</span><span class="token punctuation">(</span><span class="token keyword">int</span> hurtHP<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>HP <span class="token operator">-=</span> hurtHP<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getHP</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> HP<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p> Hero类中有hurt（受伤）函数和getHP（获取血量）函数。</p><h2 id="Servant类"><a href="#Servant类" class="headerlink" title="Servant类"></a>Servant类</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token class-name">Suicong</span><span class="token punctuation">;</span><span class="token class-name">Servant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Suicong</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hurt</span><span class="token punctuation">(</span><span class="token keyword">int</span> defender<span class="token punctuation">,</span><span class="token keyword">int</span> injure<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>Suicong</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>defender<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> injure<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> defender<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>Suicong</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>defender<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>Servant类中用ArrayList来存储随从，有hurt（受伤）函数，还有remove（死亡随从移除）函数。后期或许Servant类应该细化血量和攻击力等，现在的设计对于随从血量和攻击力上的灵活性还是比较低的。</p><h1 id="总结和体会"><a href="#总结和体会" class="headerlink" title="总结和体会"></a>总结和体会</h1><p>对于这个问题，类的设计十分重要，在类函数的设计中进行了较多思考，因为要服务于后面的代码改进。中间遇到了一些小问题，比如函数中的对象变量前面忘了加this.导致出现变量的传参问题等，耗费了比较长的修改时间。让我认识到每个类的设计都要认真。 </p><p>发现我对于用java设计一些虚拟的问题有了一定的想法，希望接下来能对这个游戏的机制进行更多有趣的增加与优化。</p>]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF 学生排队 (JAVA) -20170302</title>
      <link href="/posts/a38d1e10/"/>
      <url>/posts/a38d1e10/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>​体育老师小明要将自己班上的学生按顺序排队。他首先让学生按学号从小到大的顺序排成一排，学号小的排在前面，然后进行多次调整。一次调整小明可能让一位同学出队，向前或者向后移动一段距离后再插入队列。  </p><p>​例如，下面给出了一组移动的例子，例子中学生的人数为8人。<br>　　0）初始队列中学生的学号依次为1, 2, 3, 4, 5, 6, 7, 8；<br>　　1）第一次调整，命令为“3号同学向后移动2”，表示3号同学出队，向后移动2名同学的距离，再插入到队列中，新队列中学生的学号依次为1, 2, 4, 5, 3, 6, 7, 8；<br>　　2）第二次调整，命令为“8号同学向前移动3”，表示8号同学出队，向前移动3名同学的距离，再插入到队列中，新队列中学生的学号依次为1, 2, 4, 5, 8, 3, 6, 7；<br>　　3）第三次调整，命令为“3号同学向前移动2”，表示3号同学出队，向前移动2名同学的距离，再插入到队列中，新队列中学生的学号依次为1, 2, 4, 3, 5, 8, 6, 7。<br>　　小明记录了所有调整的过程，请问，最终从前向后所有学生的学号依次是多少？  </p><p>请特别注意，上述移动过程中所涉及的号码指的是学号，而不是在队伍中的位置。在向后移动时，移动的距离不超过对应同学后面的人数，如果向后移动的距离正好等于对应同学后面的人数则该同学会移动到队列的最后面。在向前移动时，移动的距离不超过对应同学前面的人数，如果向前移动的距离正好等于对应同学前面的人数则该同学会移动到队列的最前面。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>​输入的第一行包含一个整数n，表示学生的数量，学生的学号由1到n编号。<br>　　第二行包含一个整数m，表示调整的次数。<br>　　接下来m行，每行两个整数p, q，如果q为正，表示学号为p的同学向后移动q，如果q为负，表示学号为p的同学向前移动-q。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>​输出一行，包含n个整数，相邻两个整数之间由一个空格分隔，表示最终从前向后所有学生的学号。</p><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><p>8<br>3<br>3 2<br>8 -3<br>3 -2</p><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><p>1 2 4 3 5 8 6 7</p><h2 id="评测用例规模与规定"><a href="#评测用例规模与规定" class="headerlink" title="评测用例规模与规定"></a>评测用例规模与规定</h2><p>​对于所有评测用例，1 ≤ n ≤ 1000，1 ≤ m ≤ 1000，所有移动均合法。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>​看了看用例的规模，在1000以内，那么第一种想法就是直接用循环去进行插入和数组的移动，会有部分样例超出时间限制，第二种做法就是使用LinkedList类来对插入和删除元素进行处理，代码中最核心的就是通过输入所需要移动的学号与LinkedList类中的元素进行比较，如果两者相等，则得到下标值进行下面的操作，然后先移除所需要移动的元素，最后在最终移动的位置中添加刚刚删除的元素。</p><h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><p>import java.util.LinkedList;<br>import java.util.Scanner;</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//学生数量</span><span class="token keyword">int</span> m <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调整的次数</span><span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span>list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//需要调整的学号以及移动的距离</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//初始化学生的学号</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//索引</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//得到当前位置i</span>index<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//移动的最终位置</span>list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//移除数值（先移除后添加）</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在需要的索引处添加刚刚移除的数值</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 入门 前期准备</title>
      <link href="/posts/13ba649d/"/>
      <url>/posts/13ba649d/</url>
      
        <content type="html"><![CDATA[<ol><li>准备好一款在线、随时随地写代码的工具，不用在本地去安装和配置，是初学者的好帮手  </li><li>准备一款记笔记的软件，学编程的过程中老师的思路、自己遇到的问题、解决问题的方法、心得感悟、遇到的好资料，都记下来。（推荐软件：Typora、VS Code）  </li><li>多做题，刷题可以去LeetCode等（最近老师让我们做CSP的模拟题）</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java前期准备 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
